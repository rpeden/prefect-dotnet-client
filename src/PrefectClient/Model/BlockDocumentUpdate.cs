/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = PrefectClient.Client.FileParameter;
using OpenAPIDateConverter = PrefectClient.Client.OpenAPIDateConverter;

namespace PrefectClient.Model
{
    /// <summary>
    /// Data used by the Prefect REST API to update a block document.
    /// </summary>
    [DataContract(Name = "BlockDocumentUpdate")]
    public partial class BlockDocumentUpdate : IEquatable<BlockDocumentUpdate>, IValidatableObject
    {
                

        /// <summary>
        /// A block schema ID
        /// </summary>
        /// <value>A block schema ID</value>
        [DataMember(Name = "block_schema_id", EmitDefaultValue = false)]
        public Guid? BlockSchemaId { get; set; }

        /// <summary>
        /// The block document's data
        /// </summary>
        /// <value>The block document&#39;s data</value>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public Object? Data { get; set; }

        /// <summary>
        /// Gets or Sets MergeExistingData
        /// </summary>
        [DataMember(Name = "merge_existing_data", EmitDefaultValue = true)]
        public bool? MergeExistingData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BlockDocumentUpdate {\n");
            sb.Append("  BlockSchemaId: ").Append(BlockSchemaId).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  MergeExistingData: ").Append(MergeExistingData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlockDocumentUpdate);
        }

        /// <summary>
        /// Returns true if BlockDocumentUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of BlockDocumentUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlockDocumentUpdate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BlockSchemaId == input.BlockSchemaId ||
                    (this.BlockSchemaId != null &&
                    this.BlockSchemaId.Equals(input.BlockSchemaId))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.MergeExistingData == input.MergeExistingData ||
                    this.MergeExistingData.Equals(input.MergeExistingData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BlockSchemaId != null)
                {
                    hashCode = (hashCode * 59) + this.BlockSchemaId.GetHashCode();
                }
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MergeExistingData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
