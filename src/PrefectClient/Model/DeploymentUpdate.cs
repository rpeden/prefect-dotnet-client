/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = PrefectClient.Client.FileParameter;
using OpenAPIDateConverter = PrefectClient.Client.OpenAPIDateConverter;

namespace PrefectClient.Model
{
    /// <summary>
    /// Data used by the Prefect REST API to update a deployment.
    /// </summary>
    [DataContract(Name = "DeploymentUpdate")]
    public partial class DeploymentUpdate : IEquatable<DeploymentUpdate>, IValidatableObject
    {
                

        /// <summary>
        /// An optional version for the deployment.
        /// </summary>
        /// <value>An optional version for the deployment.</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string? VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name = "schedule", EmitDefaultValue = false)]
        public Schedule Schedule { get; set; }

        /// <summary>
        /// A description for the deployment.
        /// </summary>
        /// <value>A description for the deployment.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string? Description { get; set; }

        /// <summary>
        /// Whether or not the deployment schedule is active.
        /// </summary>
        /// <value>Whether or not the deployment schedule is active.</value>
        [DataMember(Name = "is_schedule_active", EmitDefaultValue = true)]
        public bool? IsScheduleActive { get; set; }

        /// <summary>
        /// Parameters for flow runs scheduled by the deployment.
        /// </summary>
        /// <value>Parameters for flow runs scheduled by the deployment.</value>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        public Object? Parameters { get; set; }

        /// <summary>
        /// A list of tags for the deployment
        /// </summary>
        /// <value>A list of tags for the deployment</value>
        /// <example>["tag-1","tag-2"]</example>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string>? Tags { get; set; }

        /// <summary>
        /// The work queue for the deployment. If no work queue is set, work will not be scheduled.
        /// </summary>
        /// <value>The work queue for the deployment. If no work queue is set, work will not be scheduled.</value>
        [DataMember(Name = "work_queue_name", EmitDefaultValue = false)]
        public string? WorkQueueName { get; set; }

        /// <summary>
        /// The name of the deployment work pool.
        /// </summary>
        /// <value>The name of the deployment work pool.</value>
        /// <example>my-work-pool</example>
        [DataMember(Name = "work_pool_name", EmitDefaultValue = false)]
        public string? WorkPoolName { get; set; }

        /// <summary>
        /// The path to the working directory for the workflow, relative to remote storage or an absolute path.
        /// </summary>
        /// <value>The path to the working directory for the workflow, relative to remote storage or an absolute path.</value>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string? Path { get; set; }

        /// <summary>
        /// Overrides to apply to the base infrastructure block at runtime.
        /// </summary>
        /// <value>Overrides to apply to the base infrastructure block at runtime.</value>
        [DataMember(Name = "infra_overrides", EmitDefaultValue = false)]
        public Object? InfraOverrides { get; set; }

        /// <summary>
        /// The path to the entrypoint for the workflow, relative to the `path`.
        /// </summary>
        /// <value>The path to the entrypoint for the workflow, relative to the &#x60;path&#x60;.</value>
        [DataMember(Name = "entrypoint", EmitDefaultValue = false)]
        public string? Entrypoint { get; set; }

        /// <summary>
        /// The path to the flow's manifest file, relative to the chosen storage.
        /// </summary>
        /// <value>The path to the flow&#39;s manifest file, relative to the chosen storage.</value>
        [DataMember(Name = "manifest_path", EmitDefaultValue = false)]
        public string? ManifestPath { get; set; }

        /// <summary>
        /// The block document defining storage used for this flow.
        /// </summary>
        /// <value>The block document defining storage used for this flow.</value>
        [DataMember(Name = "storage_document_id", EmitDefaultValue = false)]
        public Guid? StorageDocumentId { get; set; }

        /// <summary>
        /// The block document defining infrastructure to use for flow runs.
        /// </summary>
        /// <value>The block document defining infrastructure to use for flow runs.</value>
        [DataMember(Name = "infrastructure_document_id", EmitDefaultValue = false)]
        public Guid? InfrastructureDocumentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeploymentUpdate {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsScheduleActive: ").Append(IsScheduleActive).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  WorkQueueName: ").Append(WorkQueueName).Append("\n");
            sb.Append("  WorkPoolName: ").Append(WorkPoolName).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  InfraOverrides: ").Append(InfraOverrides).Append("\n");
            sb.Append("  Entrypoint: ").Append(Entrypoint).Append("\n");
            sb.Append("  ManifestPath: ").Append(ManifestPath).Append("\n");
            sb.Append("  StorageDocumentId: ").Append(StorageDocumentId).Append("\n");
            sb.Append("  InfrastructureDocumentId: ").Append(InfrastructureDocumentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeploymentUpdate);
        }

        /// <summary>
        /// Returns true if DeploymentUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of DeploymentUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeploymentUpdate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                ) && 
                (
                    this.Schedule == input.Schedule ||
                    (this.Schedule != null &&
                    this.Schedule.Equals(input.Schedule))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IsScheduleActive == input.IsScheduleActive ||
                    this.IsScheduleActive.Equals(input.IsScheduleActive)
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.WorkQueueName == input.WorkQueueName ||
                    (this.WorkQueueName != null &&
                    this.WorkQueueName.Equals(input.WorkQueueName))
                ) && 
                (
                    this.WorkPoolName == input.WorkPoolName ||
                    (this.WorkPoolName != null &&
                    this.WorkPoolName.Equals(input.WorkPoolName))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.InfraOverrides == input.InfraOverrides ||
                    (this.InfraOverrides != null &&
                    this.InfraOverrides.Equals(input.InfraOverrides))
                ) && 
                (
                    this.Entrypoint == input.Entrypoint ||
                    (this.Entrypoint != null &&
                    this.Entrypoint.Equals(input.Entrypoint))
                ) && 
                (
                    this.ManifestPath == input.ManifestPath ||
                    (this.ManifestPath != null &&
                    this.ManifestPath.Equals(input.ManifestPath))
                ) && 
                (
                    this.StorageDocumentId == input.StorageDocumentId ||
                    (this.StorageDocumentId != null &&
                    this.StorageDocumentId.Equals(input.StorageDocumentId))
                ) && 
                (
                    this.InfrastructureDocumentId == input.InfrastructureDocumentId ||
                    (this.InfrastructureDocumentId != null &&
                    this.InfrastructureDocumentId.Equals(input.InfrastructureDocumentId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                if (this.Schedule != null)
                {
                    hashCode = (hashCode * 59) + this.Schedule.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsScheduleActive.GetHashCode();
                if (this.Parameters != null)
                {
                    hashCode = (hashCode * 59) + this.Parameters.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.WorkQueueName != null)
                {
                    hashCode = (hashCode * 59) + this.WorkQueueName.GetHashCode();
                }
                if (this.WorkPoolName != null)
                {
                    hashCode = (hashCode * 59) + this.WorkPoolName.GetHashCode();
                }
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                if (this.InfraOverrides != null)
                {
                    hashCode = (hashCode * 59) + this.InfraOverrides.GetHashCode();
                }
                if (this.Entrypoint != null)
                {
                    hashCode = (hashCode * 59) + this.Entrypoint.GetHashCode();
                }
                if (this.ManifestPath != null)
                {
                    hashCode = (hashCode * 59) + this.ManifestPath.GetHashCode();
                }
                if (this.StorageDocumentId != null)
                {
                    hashCode = (hashCode * 59) + this.StorageDocumentId.GetHashCode();
                }
                if (this.InfrastructureDocumentId != null)
                {
                    hashCode = (hashCode * 59) + this.InfrastructureDocumentId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
