/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = PrefectClient.Client.FileParameter;
using OpenAPIDateConverter = PrefectClient.Client.OpenAPIDateConverter;

namespace PrefectClient.Model
{
    /// <summary>
    /// Filter criteria definition for a work queue.
    /// </summary>
    [DataContract(Name = "QueueFilter")]
    public partial class QueueFilter : IEquatable<QueueFilter>, IValidatableObject
    {
                

        /// <summary>
        /// Only include flow runs with these tags in the work queue.
        /// </summary>
        /// <value>Only include flow runs with these tags in the work queue.</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string>? Tags { get; set; }

        /// <summary>
        /// Only include flow runs from these deployments in the work queue.
        /// </summary>
        /// <value>Only include flow runs from these deployments in the work queue.</value>
        [DataMember(Name = "deployment_ids", EmitDefaultValue = false)]
        public List<Guid>? DeploymentIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueueFilter {\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  DeploymentIds: ").Append(DeploymentIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueueFilter);
        }

        /// <summary>
        /// Returns true if QueueFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of QueueFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueueFilter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.DeploymentIds == input.DeploymentIds ||
                    this.DeploymentIds != null &&
                    input.DeploymentIds != null &&
                    this.DeploymentIds.SequenceEqual(input.DeploymentIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.DeploymentIds != null)
                {
                    hashCode = (hashCode * 59) + this.DeploymentIds.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
