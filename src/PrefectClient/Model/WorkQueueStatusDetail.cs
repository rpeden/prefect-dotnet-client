/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = PrefectClient.Client.FileParameter;
using OpenAPIDateConverter = PrefectClient.Client.OpenAPIDateConverter;

namespace PrefectClient.Model
{
    /// <summary>
    /// Indicates if the work queue is healthy, based on late runs and last polling time.
    /// </summary>
    [DataContract(Name = "WorkQueueStatusDetail")]
    public partial class WorkQueueStatusDetail : IEquatable<WorkQueueStatusDetail>, IValidatableObject
    {
                /// <summary>
        /// Initializes a new instance of the <see cref="WorkQueueStatusDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkQueueStatusDetail() { }
        

        /// <summary>
        /// Whether or not the work queue is healthy.
        /// </summary>
        /// <value>Whether or not the work queue is healthy.</value>
        [DataMember(Name = "healthy", IsRequired = true, EmitDefaultValue = true)]
        public bool? Healthy { get; set; }

        /// <summary>
        /// The number of late flow runs in the work queue.
        /// </summary>
        /// <value>The number of late flow runs in the work queue.</value>
        [DataMember(Name = "late_runs_count", EmitDefaultValue = false)]
        public int? LateRunsCount { get; set; }

        /// <summary>
        /// The last time an agent polled this queue for work.
        /// </summary>
        /// <value>The last time an agent polled this queue for work.</value>
        [DataMember(Name = "last_polled", EmitDefaultValue = false)]
        public DateTime? LastPolled { get; set; }

        /// <summary>
        /// Gets or Sets HealthCheckPolicy
        /// </summary>
        [DataMember(Name = "health_check_policy", IsRequired = true, EmitDefaultValue = true)]
        public WorkQueueHealthPolicy HealthCheckPolicy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkQueueStatusDetail {\n");
            sb.Append("  Healthy: ").Append(Healthy).Append("\n");
            sb.Append("  LateRunsCount: ").Append(LateRunsCount).Append("\n");
            sb.Append("  LastPolled: ").Append(LastPolled).Append("\n");
            sb.Append("  HealthCheckPolicy: ").Append(HealthCheckPolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkQueueStatusDetail);
        }

        /// <summary>
        /// Returns true if WorkQueueStatusDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkQueueStatusDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkQueueStatusDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Healthy == input.Healthy ||
                    this.Healthy.Equals(input.Healthy)
                ) && 
                (
                    this.LateRunsCount == input.LateRunsCount ||
                    this.LateRunsCount.Equals(input.LateRunsCount)
                ) && 
                (
                    this.LastPolled == input.LastPolled ||
                    (this.LastPolled != null &&
                    this.LastPolled.Equals(input.LastPolled))
                ) && 
                (
                    this.HealthCheckPolicy == input.HealthCheckPolicy ||
                    (this.HealthCheckPolicy != null &&
                    this.HealthCheckPolicy.Equals(input.HealthCheckPolicy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Healthy.GetHashCode();
                hashCode = (hashCode * 59) + this.LateRunsCount.GetHashCode();
                if (this.LastPolled != null)
                {
                    hashCode = (hashCode * 59) + this.LastPolled.GetHashCode();
                }
                if (this.HealthCheckPolicy != null)
                {
                    hashCode = (hashCode * 59) + this.HealthCheckPolicy.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
