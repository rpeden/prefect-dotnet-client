/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = PrefectClient.Client.FileParameter;
using OpenAPIDateConverter = PrefectClient.Client.OpenAPIDateConverter;

namespace PrefectClient.Model
{
    /// <summary>
    /// Data used by the Prefect REST API to update a block type.
    /// </summary>
    [DataContract(Name = "BlockTypeUpdate")]
    public partial class BlockTypeUpdate : IEquatable<BlockTypeUpdate>, IValidatableObject
    {
                

        /// <summary>
        /// Web URL for the block type's logo
        /// </summary>
        /// <value>Web URL for the block type&#39;s logo</value>
        [DataMember(Name = "logo_url", EmitDefaultValue = false)]
        public string? LogoUrl { get; set; }

        /// <summary>
        /// Web URL for the block type's documentation
        /// </summary>
        /// <value>Web URL for the block type&#39;s documentation</value>
        [DataMember(Name = "documentation_url", EmitDefaultValue = false)]
        public string? DocumentationUrl { get; set; }

        /// <summary>
        /// A short blurb about the corresponding block's intended use
        /// </summary>
        /// <value>A short blurb about the corresponding block&#39;s intended use</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string? Description { get; set; }

        /// <summary>
        /// A code snippet demonstrating use of the corresponding block
        /// </summary>
        /// <value>A code snippet demonstrating use of the corresponding block</value>
        [DataMember(Name = "code_example", EmitDefaultValue = false)]
        public string? CodeExample { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BlockTypeUpdate {\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  DocumentationUrl: ").Append(DocumentationUrl).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CodeExample: ").Append(CodeExample).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlockTypeUpdate);
        }

        /// <summary>
        /// Returns true if BlockTypeUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of BlockTypeUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlockTypeUpdate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.DocumentationUrl == input.DocumentationUrl ||
                    (this.DocumentationUrl != null &&
                    this.DocumentationUrl.Equals(input.DocumentationUrl))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CodeExample == input.CodeExample ||
                    (this.CodeExample != null &&
                    this.CodeExample.Equals(input.CodeExample))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LogoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LogoUrl.GetHashCode();
                }
                if (this.DocumentationUrl != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentationUrl.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.CodeExample != null)
                {
                    hashCode = (hashCode * 59) + this.CodeExample.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LogoUrl (string) maxLength
            if (this.LogoUrl != null && this.LogoUrl.Length > 2083)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LogoUrl, length must be less than 2083.", new [] { "LogoUrl" });
            }

            // LogoUrl (string) minLength
            if (this.LogoUrl != null && this.LogoUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LogoUrl, length must be greater than 1.", new [] { "LogoUrl" });
            }

            // DocumentationUrl (string) maxLength
            if (this.DocumentationUrl != null && this.DocumentationUrl.Length > 2083)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocumentationUrl, length must be less than 2083.", new [] { "DocumentationUrl" });
            }

            // DocumentationUrl (string) minLength
            if (this.DocumentationUrl != null && this.DocumentationUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DocumentationUrl, length must be greater than 1.", new [] { "DocumentationUrl" });
            }

            yield break;
        }
    }

}
