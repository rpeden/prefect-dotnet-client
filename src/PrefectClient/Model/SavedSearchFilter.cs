/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = PrefectClient.Client.FileParameter;
using OpenAPIDateConverter = PrefectClient.Client.OpenAPIDateConverter;

namespace PrefectClient.Model
{
    /// <summary>
    /// A filter for a saved search model. Intended for use by the Prefect UI.
    /// </summary>
    [DataContract(Name = "SavedSearchFilter")]
    public partial class SavedSearchFilter : IEquatable<SavedSearchFilter>, IValidatableObject
    {
                /// <summary>
        /// Initializes a new instance of the <see cref="SavedSearchFilter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SavedSearchFilter() { }
        

        /// <summary>
        /// The object over which to filter.
        /// </summary>
        /// <value>The object over which to filter.</value>
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = true)]
        public string? VarObject { get; set; }

        /// <summary>
        /// The property of the object on which to filter.
        /// </summary>
        /// <value>The property of the object on which to filter.</value>
        [DataMember(Name = "property", IsRequired = true, EmitDefaultValue = true)]
        public string? Property { get; set; }

        /// <summary>
        /// The type of the property.
        /// </summary>
        /// <value>The type of the property.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string? Type { get; set; }

        /// <summary>
        /// The operator to apply to the object. For example, `equals`.
        /// </summary>
        /// <value>The operator to apply to the object. For example, &#x60;equals&#x60;.</value>
        [DataMember(Name = "operation", IsRequired = true, EmitDefaultValue = true)]
        public string? Operation { get; set; }

        /// <summary>
        /// A JSON-compatible value for the filter.
        /// </summary>
        /// <value>A JSON-compatible value for the filter.</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public Object? Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SavedSearchFilter {\n");
            sb.Append("  VarObject: ").Append(VarObject).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SavedSearchFilter);
        }

        /// <summary>
        /// Returns true if SavedSearchFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of SavedSearchFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SavedSearchFilter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarObject == input.VarObject ||
                    (this.VarObject != null &&
                    this.VarObject.Equals(input.VarObject))
                ) && 
                (
                    this.Property == input.Property ||
                    (this.Property != null &&
                    this.Property.Equals(input.Property))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Operation == input.Operation ||
                    (this.Operation != null &&
                    this.Operation.Equals(input.Operation))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VarObject != null)
                {
                    hashCode = (hashCode * 59) + this.VarObject.GetHashCode();
                }
                if (this.Property != null)
                {
                    hashCode = (hashCode * 59) + this.Property.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Operation != null)
                {
                    hashCode = (hashCode * 59) + this.Operation.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
