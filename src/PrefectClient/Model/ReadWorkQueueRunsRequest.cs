/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = PrefectClient.Client.FileParameter;
using OpenAPIDateConverter = PrefectClient.Client.OpenAPIDateConverter;

namespace PrefectClient.Model
{
    /// <summary>
    /// ReadWorkQueueRunsRequest
    /// </summary>
    [DataContract(Name = "ReadWorkQueueRunsRequest")]
    public partial class ReadWorkQueueRunsRequest : IEquatable<ReadWorkQueueRunsRequest>, IValidatableObject
    {
                

        /// <summary>
        /// Only flow runs scheduled to start before this time will be returned.
        /// </summary>
        /// <value>Only flow runs scheduled to start before this time will be returned.</value>
        [DataMember(Name = "scheduled_before", EmitDefaultValue = false)]
        public DateTime? ScheduledBefore { get; set; }

        /// <summary>
        /// An optional unique identifier for the agent making this query. If provided, the Prefect REST API will track the last time this agent polled the work queue.
        /// </summary>
        /// <value>An optional unique identifier for the agent making this query. If provided, the Prefect REST API will track the last time this agent polled the work queue.</value>
        [DataMember(Name = "agent_id", EmitDefaultValue = false)]
        public Guid? AgentId { get; set; }

        /// <summary>
        /// Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.
        /// </summary>
        /// <value>Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int? Limit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReadWorkQueueRunsRequest {\n");
            sb.Append("  ScheduledBefore: ").Append(ScheduledBefore).Append("\n");
            sb.Append("  AgentId: ").Append(AgentId).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReadWorkQueueRunsRequest);
        }

        /// <summary>
        /// Returns true if ReadWorkQueueRunsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReadWorkQueueRunsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReadWorkQueueRunsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ScheduledBefore == input.ScheduledBefore ||
                    (this.ScheduledBefore != null &&
                    this.ScheduledBefore.Equals(input.ScheduledBefore))
                ) && 
                (
                    this.AgentId == input.AgentId ||
                    (this.AgentId != null &&
                    this.AgentId.Equals(input.AgentId))
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScheduledBefore != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduledBefore.GetHashCode();
                }
                if (this.AgentId != null)
                {
                    hashCode = (hashCode * 59) + this.AgentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
