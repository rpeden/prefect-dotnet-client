/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = PrefectClient.Client.FileParameter;
using OpenAPIDateConverter = PrefectClient.Client.OpenAPIDateConverter;

namespace PrefectClient.Model
{
    /// <summary>
    /// Cron schedule\\n\\nNOTE: If the timezone is a DST-observing one, then the schedule will adjust\\nitself appropriately. Cron's rules for DST are based on schedule times, not\\nintervals. This means that an hourly cron schedule will fire on every new\\nschedule hour, not every elapsed hour; for example, when clocks are set back\\nthis will result in a two-hour pause as the schedule will fire *the first\\ntime* 1am is reached and *the first time* 2am is reached, 120 minutes later.\\nLonger schedules, such as one that fires at 9am every morning, will\\nautomatically adjust for DST.\\n\\nArgs:\\n    cron (str): a valid cron string\\n    timezone (str): a valid timezone string in IANA tzdata format (for example,\\n        America/New_York).\\n    day_or (bool, optional): Control how croniter handles `day` and `day_of_week`\\n        entries. Defaults to True, matching cron which connects those values using\\n        OR. If the switch is set to False, the values are connected using AND. This\\n        behaves like fcron and enables you to e.g. define a job that executes each\\n        2nd friday of a month by setting the days of month and the weekday.
    /// </summary>
    [DataContract(Name = "CronSchedule")]
    public partial class CronSchedule : IEquatable<CronSchedule>, IValidatableObject
    {
                /// <summary>
        /// Initializes a new instance of the <see cref="CronSchedule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CronSchedule() { }
        

        /// <summary>
        /// Gets or Sets Cron
        /// </summary>
        /// <example>0 0 * * *</example>
        [DataMember(Name = "cron", IsRequired = true, EmitDefaultValue = true)]
        public string? Cron { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        /// <example>America/New_York</example>
        [DataMember(Name = "timezone", EmitDefaultValue = false)]
        public string? Timezone { get; set; }

        /// <summary>
        /// Control croniter behavior for handling day and day_of_week entries.
        /// </summary>
        /// <value>Control croniter behavior for handling day and day_of_week entries.</value>
        [DataMember(Name = "day_or", EmitDefaultValue = true)]
        public bool? DayOr { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CronSchedule {\n");
            sb.Append("  Cron: ").Append(Cron).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  DayOr: ").Append(DayOr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CronSchedule);
        }

        /// <summary>
        /// Returns true if CronSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of CronSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CronSchedule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Cron == input.Cron ||
                    (this.Cron != null &&
                    this.Cron.Equals(input.Cron))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.DayOr == input.DayOr ||
                    this.DayOr.Equals(input.DayOr)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cron != null)
                {
                    hashCode = (hashCode * 59) + this.Cron.GetHashCode();
                }
                if (this.Timezone != null)
                {
                    hashCode = (hashCode * 59) + this.Timezone.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DayOr.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
