/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = PrefectClient.Client.FileParameter;
using OpenAPIDateConverter = PrefectClient.Client.OpenAPIDateConverter;

namespace PrefectClient.Model
{
    /// <summary>
    /// Data used by the Prefect REST API to create a flow run from a deployment.
    /// </summary>
    [DataContract(Name = "DeploymentFlowRunCreate")]
    public partial class DeploymentFlowRunCreate : IEquatable<DeploymentFlowRunCreate>, IValidatableObject
    {
                

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateCreate State { get; set; }

        /// <summary>
        /// The name of the flow run. Defaults to a random slug if not specified.
        /// </summary>
        /// <value>The name of the flow run. Defaults to a random slug if not specified.</value>
        /// <example>my-flow-run</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string? Name { get; set; }

        /// <summary>
        /// Parameters for the flow run.
        /// </summary>
        /// <value>Parameters for the flow run.</value>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        public Object? Parameters { get; set; }

        /// <summary>
        /// Additional context for the flow run.
        /// </summary>
        /// <value>Additional context for the flow run.</value>
        /// <example>{"my_var":"my_val"}</example>
        [DataMember(Name = "context", EmitDefaultValue = false)]
        public Object? Context { get; set; }

        /// <summary>
        /// The block document defining infrastructure to use this flow run.
        /// </summary>
        /// <value>The block document defining infrastructure to use this flow run.</value>
        [DataMember(Name = "infrastructure_document_id", EmitDefaultValue = false)]
        public Guid? InfrastructureDocumentId { get; set; }

        /// <summary>
        /// Gets or Sets EmpiricalPolicy
        /// </summary>
        [DataMember(Name = "empirical_policy", EmitDefaultValue = false)]
        public FlowRunPolicy EmpiricalPolicy { get; set; }

        /// <summary>
        /// A list of tags on the flow run
        /// </summary>
        /// <value>A list of tags on the flow run</value>
        /// <example>["tag-1","tag-2"]</example>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string>? Tags { get; set; }

        /// <summary>
        /// An optional idempotency key for the flow run. Used to ensure the same flow run is not created multiple times.
        /// </summary>
        /// <value>An optional idempotency key for the flow run. Used to ensure the same flow run is not created multiple times.</value>
        [DataMember(Name = "idempotency_key", EmitDefaultValue = false)]
        public string? IdempotencyKey { get; set; }

        /// <summary>
        /// If the flow run is a subflow, the id of the 'dummy' task in the parent flow used to track subflow state.
        /// </summary>
        /// <value>If the flow run is a subflow, the id of the &#39;dummy&#39; task in the parent flow used to track subflow state.</value>
        [DataMember(Name = "parent_task_run_id", EmitDefaultValue = false)]
        public Guid? ParentTaskRunId { get; set; }

        /// <summary>
        /// The work queue that handled this flow run.
        /// </summary>
        /// <value>The work queue that handled this flow run.</value>
        [DataMember(Name = "work_queue_name", EmitDefaultValue = false)]
        public string? WorkQueueName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeploymentFlowRunCreate {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  InfrastructureDocumentId: ").Append(InfrastructureDocumentId).Append("\n");
            sb.Append("  EmpiricalPolicy: ").Append(EmpiricalPolicy).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  IdempotencyKey: ").Append(IdempotencyKey).Append("\n");
            sb.Append("  ParentTaskRunId: ").Append(ParentTaskRunId).Append("\n");
            sb.Append("  WorkQueueName: ").Append(WorkQueueName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeploymentFlowRunCreate);
        }

        /// <summary>
        /// Returns true if DeploymentFlowRunCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of DeploymentFlowRunCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeploymentFlowRunCreate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                ) && 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.InfrastructureDocumentId == input.InfrastructureDocumentId ||
                    (this.InfrastructureDocumentId != null &&
                    this.InfrastructureDocumentId.Equals(input.InfrastructureDocumentId))
                ) && 
                (
                    this.EmpiricalPolicy == input.EmpiricalPolicy ||
                    (this.EmpiricalPolicy != null &&
                    this.EmpiricalPolicy.Equals(input.EmpiricalPolicy))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.IdempotencyKey == input.IdempotencyKey ||
                    (this.IdempotencyKey != null &&
                    this.IdempotencyKey.Equals(input.IdempotencyKey))
                ) && 
                (
                    this.ParentTaskRunId == input.ParentTaskRunId ||
                    (this.ParentTaskRunId != null &&
                    this.ParentTaskRunId.Equals(input.ParentTaskRunId))
                ) && 
                (
                    this.WorkQueueName == input.WorkQueueName ||
                    (this.WorkQueueName != null &&
                    this.WorkQueueName.Equals(input.WorkQueueName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Parameters != null)
                {
                    hashCode = (hashCode * 59) + this.Parameters.GetHashCode();
                }
                if (this.Context != null)
                {
                    hashCode = (hashCode * 59) + this.Context.GetHashCode();
                }
                if (this.InfrastructureDocumentId != null)
                {
                    hashCode = (hashCode * 59) + this.InfrastructureDocumentId.GetHashCode();
                }
                if (this.EmpiricalPolicy != null)
                {
                    hashCode = (hashCode * 59) + this.EmpiricalPolicy.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.IdempotencyKey != null)
                {
                    hashCode = (hashCode * 59) + this.IdempotencyKey.GetHashCode();
                }
                if (this.ParentTaskRunId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentTaskRunId.GetHashCode();
                }
                if (this.WorkQueueName != null)
                {
                    hashCode = (hashCode * 59) + this.WorkQueueName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
