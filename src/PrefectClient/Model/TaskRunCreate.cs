/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = PrefectClient.Client.FileParameter;
using OpenAPIDateConverter = PrefectClient.Client.OpenAPIDateConverter;

namespace PrefectClient.Model
{
    /// <summary>
    /// Data used by the Prefect REST API to create a task run
    /// </summary>
    [DataContract(Name = "TaskRunCreate")]
    public partial class TaskRunCreate : IEquatable<TaskRunCreate>, IValidatableObject
    {
                

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateCreate State { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /// <example>my-task-run</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string? Name { get; set; }

        /// <summary>
        /// The flow run id of the task run.
        /// </summary>
        /// <value>The flow run id of the task run.</value>
        [DataMember(Name = "flow_run_id", EmitDefaultValue = false)]
        public Guid? FlowRunId { get; set; }

        /// <summary>
        /// A unique identifier for the task being run.
        /// </summary>
        /// <value>A unique identifier for the task being run.</value>
        [DataMember(Name = "task_key", EmitDefaultValue = false)]
        public string? TaskKey { get; set; }

        /// <summary>
        /// A dynamic key used to differentiate between multiple runs of the same task within the same flow run.
        /// </summary>
        /// <value>A dynamic key used to differentiate between multiple runs of the same task within the same flow run.</value>
        [DataMember(Name = "dynamic_key", EmitDefaultValue = false)]
        public string? DynamicKey { get; set; }

        /// <summary>
        /// An optional cache key. If a COMPLETED state associated with this cache key is found, the cached COMPLETED state will be used instead of executing the task run.
        /// </summary>
        /// <value>An optional cache key. If a COMPLETED state associated with this cache key is found, the cached COMPLETED state will be used instead of executing the task run.</value>
        [DataMember(Name = "cache_key", EmitDefaultValue = false)]
        public string? CacheKey { get; set; }

        /// <summary>
        /// Specifies when the cached state should expire.
        /// </summary>
        /// <value>Specifies when the cached state should expire.</value>
        [DataMember(Name = "cache_expiration", EmitDefaultValue = false)]
        public DateTime? CacheExpiration { get; set; }

        /// <summary>
        /// The version of the task being run.
        /// </summary>
        /// <value>The version of the task being run.</value>
        [DataMember(Name = "task_version", EmitDefaultValue = false)]
        public string? TaskVersion { get; set; }

        /// <summary>
        /// Gets or Sets EmpiricalPolicy
        /// </summary>
        [DataMember(Name = "empirical_policy", EmitDefaultValue = false)]
        public TaskRunPolicy EmpiricalPolicy { get; set; }

        /// <summary>
        /// A list of tags for the task run.
        /// </summary>
        /// <value>A list of tags for the task run.</value>
        /// <example>["tag-1","tag-2"]</example>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string>? Tags { get; set; }

        /// <summary>
        /// Tracks the source of inputs to a task run. Used for internal bookkeeping.
        /// </summary>
        /// <value>Tracks the source of inputs to a task run. Used for internal bookkeeping.</value>
        [DataMember(Name = "task_inputs", EmitDefaultValue = false)]
        public Dictionary<string, List<TaskInputsInner>>? TaskInputs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaskRunCreate {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FlowRunId: ").Append(FlowRunId).Append("\n");
            sb.Append("  TaskKey: ").Append(TaskKey).Append("\n");
            sb.Append("  DynamicKey: ").Append(DynamicKey).Append("\n");
            sb.Append("  CacheKey: ").Append(CacheKey).Append("\n");
            sb.Append("  CacheExpiration: ").Append(CacheExpiration).Append("\n");
            sb.Append("  TaskVersion: ").Append(TaskVersion).Append("\n");
            sb.Append("  EmpiricalPolicy: ").Append(EmpiricalPolicy).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TaskInputs: ").Append(TaskInputs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskRunCreate);
        }

        /// <summary>
        /// Returns true if TaskRunCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskRunCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskRunCreate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FlowRunId == input.FlowRunId ||
                    (this.FlowRunId != null &&
                    this.FlowRunId.Equals(input.FlowRunId))
                ) && 
                (
                    this.TaskKey == input.TaskKey ||
                    (this.TaskKey != null &&
                    this.TaskKey.Equals(input.TaskKey))
                ) && 
                (
                    this.DynamicKey == input.DynamicKey ||
                    (this.DynamicKey != null &&
                    this.DynamicKey.Equals(input.DynamicKey))
                ) && 
                (
                    this.CacheKey == input.CacheKey ||
                    (this.CacheKey != null &&
                    this.CacheKey.Equals(input.CacheKey))
                ) && 
                (
                    this.CacheExpiration == input.CacheExpiration ||
                    (this.CacheExpiration != null &&
                    this.CacheExpiration.Equals(input.CacheExpiration))
                ) && 
                (
                    this.TaskVersion == input.TaskVersion ||
                    (this.TaskVersion != null &&
                    this.TaskVersion.Equals(input.TaskVersion))
                ) && 
                (
                    this.EmpiricalPolicy == input.EmpiricalPolicy ||
                    (this.EmpiricalPolicy != null &&
                    this.EmpiricalPolicy.Equals(input.EmpiricalPolicy))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TaskInputs == input.TaskInputs ||
                    this.TaskInputs != null &&
                    input.TaskInputs != null &&
                    this.TaskInputs.SequenceEqual(input.TaskInputs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.FlowRunId != null)
                {
                    hashCode = (hashCode * 59) + this.FlowRunId.GetHashCode();
                }
                if (this.TaskKey != null)
                {
                    hashCode = (hashCode * 59) + this.TaskKey.GetHashCode();
                }
                if (this.DynamicKey != null)
                {
                    hashCode = (hashCode * 59) + this.DynamicKey.GetHashCode();
                }
                if (this.CacheKey != null)
                {
                    hashCode = (hashCode * 59) + this.CacheKey.GetHashCode();
                }
                if (this.CacheExpiration != null)
                {
                    hashCode = (hashCode * 59) + this.CacheExpiration.GetHashCode();
                }
                if (this.TaskVersion != null)
                {
                    hashCode = (hashCode * 59) + this.TaskVersion.GetHashCode();
                }
                if (this.EmpiricalPolicy != null)
                {
                    hashCode = (hashCode * 59) + this.EmpiricalPolicy.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.TaskInputs != null)
                {
                    hashCode = (hashCode * 59) + this.TaskInputs.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
