/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = PrefectClient.Client.FileParameter;
using OpenAPIDateConverter = PrefectClient.Client.OpenAPIDateConverter;

namespace PrefectClient.Model
{
    /// <summary>
    /// Defines of how a flow run should retry.
    /// </summary>
    [DataContract(Name = "FlowRunPolicy")]
    public partial class FlowRunPolicy : IEquatable<FlowRunPolicy>, IValidatableObject
    {
                

        /// <summary>
        /// The maximum number of retries. Field is not used. Please use `retries` instead.
        /// </summary>
        /// <value>The maximum number of retries. Field is not used. Please use &#x60;retries&#x60; instead.</value>
        [DataMember(Name = "max_retries", EmitDefaultValue = false)]
        [Obsolete]
        public int? MaxRetries { get; set; }

        /// <summary>
        /// The delay between retries. Field is not used. Please use `retry_delay` instead.
        /// </summary>
        /// <value>The delay between retries. Field is not used. Please use &#x60;retry_delay&#x60; instead.</value>
        [DataMember(Name = "retry_delay_seconds", EmitDefaultValue = false)]
        [Obsolete]
        public decimal? RetryDelaySeconds { get; set; }

        /// <summary>
        /// The number of retries.
        /// </summary>
        /// <value>The number of retries.</value>
        [DataMember(Name = "retries", EmitDefaultValue = false)]
        public int? Retries { get; set; }

        /// <summary>
        /// The delay time between retries, in seconds.
        /// </summary>
        /// <value>The delay time between retries, in seconds.</value>
        [DataMember(Name = "retry_delay", EmitDefaultValue = false)]
        public int? RetryDelay { get; set; }

        /// <summary>
        /// Tracks pauses this run has observed.
        /// </summary>
        /// <value>Tracks pauses this run has observed.</value>
        [DataMember(Name = "pause_keys", EmitDefaultValue = false)]
        public List<Object>? PauseKeys { get; set; }

        /// <summary>
        /// Indicates if this run is resuming from a pause.
        /// </summary>
        /// <value>Indicates if this run is resuming from a pause.</value>
        [DataMember(Name = "resuming", EmitDefaultValue = true)]
        public bool? Resuming { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlowRunPolicy {\n");
            sb.Append("  MaxRetries: ").Append(MaxRetries).Append("\n");
            sb.Append("  RetryDelaySeconds: ").Append(RetryDelaySeconds).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("  RetryDelay: ").Append(RetryDelay).Append("\n");
            sb.Append("  PauseKeys: ").Append(PauseKeys).Append("\n");
            sb.Append("  Resuming: ").Append(Resuming).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlowRunPolicy);
        }

        /// <summary>
        /// Returns true if FlowRunPolicy instances are equal
        /// </summary>
        /// <param name="input">Instance of FlowRunPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowRunPolicy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MaxRetries == input.MaxRetries ||
                    this.MaxRetries.Equals(input.MaxRetries)
                ) && 
                (
                    this.RetryDelaySeconds == input.RetryDelaySeconds ||
                    this.RetryDelaySeconds.Equals(input.RetryDelaySeconds)
                ) && 
                (
                    this.Retries == input.Retries ||
                    this.Retries.Equals(input.Retries)
                ) && 
                (
                    this.RetryDelay == input.RetryDelay ||
                    this.RetryDelay.Equals(input.RetryDelay)
                ) && 
                (
                    this.PauseKeys == input.PauseKeys ||
                    this.PauseKeys != null &&
                    input.PauseKeys != null &&
                    this.PauseKeys.SequenceEqual(input.PauseKeys)
                ) && 
                (
                    this.Resuming == input.Resuming ||
                    this.Resuming.Equals(input.Resuming)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MaxRetries.GetHashCode();
                hashCode = (hashCode * 59) + this.RetryDelaySeconds.GetHashCode();
                hashCode = (hashCode * 59) + this.Retries.GetHashCode();
                hashCode = (hashCode * 59) + this.RetryDelay.GetHashCode();
                if (this.PauseKeys != null)
                {
                    hashCode = (hashCode * 59) + this.PauseKeys.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Resuming.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
