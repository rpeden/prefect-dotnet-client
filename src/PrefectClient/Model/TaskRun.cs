/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = PrefectClient.Client.FileParameter;
using OpenAPIDateConverter = PrefectClient.Client.OpenAPIDateConverter;

namespace PrefectClient.Model
{
    /// <summary>
    /// An ORM representation of task run data.
    /// </summary>
    [DataContract(Name = "TaskRun")]
    public partial class TaskRun : IEquatable<TaskRun>, IValidatableObject
    {
        
        /// <summary>
        /// Gets or Sets StateType
        /// </summary>  StateType
        [DataMember(Name = "state_type", EmitDefaultValue = false)]
        public StateType? StateType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskRun" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaskRun() { }
        

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name = "updated", EmitDefaultValue = false)]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /// <example>my-task-run</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string? Name { get; set; }

        /// <summary>
        /// The flow run id of the task run.
        /// </summary>
        /// <value>The flow run id of the task run.</value>
        [DataMember(Name = "flow_run_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid? FlowRunId { get; set; }

        /// <summary>
        /// A unique identifier for the task being run.
        /// </summary>
        /// <value>A unique identifier for the task being run.</value>
        [DataMember(Name = "task_key", IsRequired = true, EmitDefaultValue = true)]
        public string? TaskKey { get; set; }

        /// <summary>
        /// A dynamic key used to differentiate between multiple runs of the same task within the same flow run.
        /// </summary>
        /// <value>A dynamic key used to differentiate between multiple runs of the same task within the same flow run.</value>
        [DataMember(Name = "dynamic_key", IsRequired = true, EmitDefaultValue = true)]
        public string? DynamicKey { get; set; }

        /// <summary>
        /// An optional cache key. If a COMPLETED state associated with this cache key is found, the cached COMPLETED state will be used instead of executing the task run.
        /// </summary>
        /// <value>An optional cache key. If a COMPLETED state associated with this cache key is found, the cached COMPLETED state will be used instead of executing the task run.</value>
        [DataMember(Name = "cache_key", EmitDefaultValue = false)]
        public string? CacheKey { get; set; }

        /// <summary>
        /// Specifies when the cached state should expire.
        /// </summary>
        /// <value>Specifies when the cached state should expire.</value>
        [DataMember(Name = "cache_expiration", EmitDefaultValue = false)]
        public DateTime? CacheExpiration { get; set; }

        /// <summary>
        /// The version of the task being run.
        /// </summary>
        /// <value>The version of the task being run.</value>
        [DataMember(Name = "task_version", EmitDefaultValue = false)]
        public string? TaskVersion { get; set; }

        /// <summary>
        /// Gets or Sets EmpiricalPolicy
        /// </summary>
        [DataMember(Name = "empirical_policy", EmitDefaultValue = false)]
        public TaskRunPolicy EmpiricalPolicy { get; set; }

        /// <summary>
        /// A list of tags for the task run.
        /// </summary>
        /// <value>A list of tags for the task run.</value>
        /// <example>["tag-1","tag-2"]</example>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string>? Tags { get; set; }

        /// <summary>
        /// The id of the current task run state.
        /// </summary>
        /// <value>The id of the current task run state.</value>
        [DataMember(Name = "state_id", EmitDefaultValue = false)]
        public Guid? StateId { get; set; }

        /// <summary>
        /// Tracks the source of inputs to a task run. Used for internal bookkeeping.
        /// </summary>
        /// <value>Tracks the source of inputs to a task run. Used for internal bookkeeping.</value>
        [DataMember(Name = "task_inputs", EmitDefaultValue = false)]
        public Dictionary<string, List<TaskInputsInner>>? TaskInputs { get; set; }

        /// <summary>
        /// The name of the current task run state.
        /// </summary>
        /// <value>The name of the current task run state.</value>
        [DataMember(Name = "state_name", EmitDefaultValue = false)]
        public string? StateName { get; set; }

        /// <summary>
        /// The number of times the task run has been executed.
        /// </summary>
        /// <value>The number of times the task run has been executed.</value>
        [DataMember(Name = "run_count", EmitDefaultValue = false)]
        public int? RunCount { get; set; }

        /// <summary>
        /// If the parent flow has retried, this indicates the flow retry this run is associated with.
        /// </summary>
        /// <value>If the parent flow has retried, this indicates the flow retry this run is associated with.</value>
        [DataMember(Name = "flow_run_run_count", EmitDefaultValue = false)]
        public int? FlowRunRunCount { get; set; }

        /// <summary>
        /// The task run's expected start time.
        /// </summary>
        /// <value>The task run&#39;s expected start time.</value>
        [DataMember(Name = "expected_start_time", EmitDefaultValue = false)]
        public DateTime? ExpectedStartTime { get; set; }

        /// <summary>
        /// The next time the task run is scheduled to start.
        /// </summary>
        /// <value>The next time the task run is scheduled to start.</value>
        [DataMember(Name = "next_scheduled_start_time", EmitDefaultValue = false)]
        public DateTime? NextScheduledStartTime { get; set; }

        /// <summary>
        /// The actual start time.
        /// </summary>
        /// <value>The actual start time.</value>
        [DataMember(Name = "start_time", EmitDefaultValue = false)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// The actual end time.
        /// </summary>
        /// <value>The actual end time.</value>
        [DataMember(Name = "end_time", EmitDefaultValue = false)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Total run time. If the task run was executed multiple times, the time of each run will be summed.
        /// </summary>
        /// <value>Total run time. If the task run was executed multiple times, the time of each run will be summed.</value>
        [DataMember(Name = "total_run_time", EmitDefaultValue = false)]
        public decimal? TotalRunTime { get; set; }

        /// <summary>
        /// A real-time estimate of total run time.
        /// </summary>
        /// <value>A real-time estimate of total run time.</value>
        [DataMember(Name = "estimated_run_time", EmitDefaultValue = false)]
        public decimal? EstimatedRunTime { get; set; }

        /// <summary>
        /// The difference between actual and expected start time.
        /// </summary>
        /// <value>The difference between actual and expected start time.</value>
        [DataMember(Name = "estimated_start_time_delta", EmitDefaultValue = false)]
        public decimal? EstimatedStartTimeDelta { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public State State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaskRun {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FlowRunId: ").Append(FlowRunId).Append("\n");
            sb.Append("  TaskKey: ").Append(TaskKey).Append("\n");
            sb.Append("  DynamicKey: ").Append(DynamicKey).Append("\n");
            sb.Append("  CacheKey: ").Append(CacheKey).Append("\n");
            sb.Append("  CacheExpiration: ").Append(CacheExpiration).Append("\n");
            sb.Append("  TaskVersion: ").Append(TaskVersion).Append("\n");
            sb.Append("  EmpiricalPolicy: ").Append(EmpiricalPolicy).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  StateId: ").Append(StateId).Append("\n");
            sb.Append("  TaskInputs: ").Append(TaskInputs).Append("\n");
            sb.Append("  StateType: ").Append(StateType).Append("\n");
            sb.Append("  StateName: ").Append(StateName).Append("\n");
            sb.Append("  RunCount: ").Append(RunCount).Append("\n");
            sb.Append("  FlowRunRunCount: ").Append(FlowRunRunCount).Append("\n");
            sb.Append("  ExpectedStartTime: ").Append(ExpectedStartTime).Append("\n");
            sb.Append("  NextScheduledStartTime: ").Append(NextScheduledStartTime).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  TotalRunTime: ").Append(TotalRunTime).Append("\n");
            sb.Append("  EstimatedRunTime: ").Append(EstimatedRunTime).Append("\n");
            sb.Append("  EstimatedStartTimeDelta: ").Append(EstimatedStartTimeDelta).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskRun);
        }

        /// <summary>
        /// Returns true if TaskRun instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskRun to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskRun input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FlowRunId == input.FlowRunId ||
                    (this.FlowRunId != null &&
                    this.FlowRunId.Equals(input.FlowRunId))
                ) && 
                (
                    this.TaskKey == input.TaskKey ||
                    (this.TaskKey != null &&
                    this.TaskKey.Equals(input.TaskKey))
                ) && 
                (
                    this.DynamicKey == input.DynamicKey ||
                    (this.DynamicKey != null &&
                    this.DynamicKey.Equals(input.DynamicKey))
                ) && 
                (
                    this.CacheKey == input.CacheKey ||
                    (this.CacheKey != null &&
                    this.CacheKey.Equals(input.CacheKey))
                ) && 
                (
                    this.CacheExpiration == input.CacheExpiration ||
                    (this.CacheExpiration != null &&
                    this.CacheExpiration.Equals(input.CacheExpiration))
                ) && 
                (
                    this.TaskVersion == input.TaskVersion ||
                    (this.TaskVersion != null &&
                    this.TaskVersion.Equals(input.TaskVersion))
                ) && 
                (
                    this.EmpiricalPolicy == input.EmpiricalPolicy ||
                    (this.EmpiricalPolicy != null &&
                    this.EmpiricalPolicy.Equals(input.EmpiricalPolicy))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.StateId == input.StateId ||
                    (this.StateId != null &&
                    this.StateId.Equals(input.StateId))
                ) && 
                (
                    this.TaskInputs == input.TaskInputs ||
                    this.TaskInputs != null &&
                    input.TaskInputs != null &&
                    this.TaskInputs.SequenceEqual(input.TaskInputs)
                ) && 
                (
                    this.StateType == input.StateType ||
                    this.StateType.Equals(input.StateType)
                ) && 
                (
                    this.StateName == input.StateName ||
                    (this.StateName != null &&
                    this.StateName.Equals(input.StateName))
                ) && 
                (
                    this.RunCount == input.RunCount ||
                    this.RunCount.Equals(input.RunCount)
                ) && 
                (
                    this.FlowRunRunCount == input.FlowRunRunCount ||
                    this.FlowRunRunCount.Equals(input.FlowRunRunCount)
                ) && 
                (
                    this.ExpectedStartTime == input.ExpectedStartTime ||
                    (this.ExpectedStartTime != null &&
                    this.ExpectedStartTime.Equals(input.ExpectedStartTime))
                ) && 
                (
                    this.NextScheduledStartTime == input.NextScheduledStartTime ||
                    (this.NextScheduledStartTime != null &&
                    this.NextScheduledStartTime.Equals(input.NextScheduledStartTime))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.TotalRunTime == input.TotalRunTime ||
                    this.TotalRunTime.Equals(input.TotalRunTime)
                ) && 
                (
                    this.EstimatedRunTime == input.EstimatedRunTime ||
                    this.EstimatedRunTime.Equals(input.EstimatedRunTime)
                ) && 
                (
                    this.EstimatedStartTimeDelta == input.EstimatedStartTimeDelta ||
                    this.EstimatedStartTimeDelta.Equals(input.EstimatedStartTimeDelta)
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Created != null)
                {
                    hashCode = (hashCode * 59) + this.Created.GetHashCode();
                }
                if (this.Updated != null)
                {
                    hashCode = (hashCode * 59) + this.Updated.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.FlowRunId != null)
                {
                    hashCode = (hashCode * 59) + this.FlowRunId.GetHashCode();
                }
                if (this.TaskKey != null)
                {
                    hashCode = (hashCode * 59) + this.TaskKey.GetHashCode();
                }
                if (this.DynamicKey != null)
                {
                    hashCode = (hashCode * 59) + this.DynamicKey.GetHashCode();
                }
                if (this.CacheKey != null)
                {
                    hashCode = (hashCode * 59) + this.CacheKey.GetHashCode();
                }
                if (this.CacheExpiration != null)
                {
                    hashCode = (hashCode * 59) + this.CacheExpiration.GetHashCode();
                }
                if (this.TaskVersion != null)
                {
                    hashCode = (hashCode * 59) + this.TaskVersion.GetHashCode();
                }
                if (this.EmpiricalPolicy != null)
                {
                    hashCode = (hashCode * 59) + this.EmpiricalPolicy.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.StateId != null)
                {
                    hashCode = (hashCode * 59) + this.StateId.GetHashCode();
                }
                if (this.TaskInputs != null)
                {
                    hashCode = (hashCode * 59) + this.TaskInputs.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StateType.GetHashCode();
                if (this.StateName != null)
                {
                    hashCode = (hashCode * 59) + this.StateName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RunCount.GetHashCode();
                hashCode = (hashCode * 59) + this.FlowRunRunCount.GetHashCode();
                if (this.ExpectedStartTime != null)
                {
                    hashCode = (hashCode * 59) + this.ExpectedStartTime.GetHashCode();
                }
                if (this.NextScheduledStartTime != null)
                {
                    hashCode = (hashCode * 59) + this.NextScheduledStartTime.GetHashCode();
                }
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.EndTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalRunTime.GetHashCode();
                hashCode = (hashCode * 59) + this.EstimatedRunTime.GetHashCode();
                hashCode = (hashCode * 59) + this.EstimatedStartTimeDelta.GetHashCode();
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
