/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = PrefectClient.Client.FileParameter;
using OpenAPIDateConverter = PrefectClient.Client.OpenAPIDateConverter;

namespace PrefectClient.Model
{
    /// <summary>
    /// Links a flow run to its work pool and queue IDs.
    /// </summary>
    [DataContract(Name = "WorkerFlowRunResponse")]
    public partial class WorkerFlowRunResponse : IEquatable<WorkerFlowRunResponse>, IValidatableObject
    {
                /// <summary>
        /// Initializes a new instance of the <see cref="WorkerFlowRunResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkerFlowRunResponse() { }
        

        /// <summary>
        /// Gets or Sets WorkPoolId
        /// </summary>
        [DataMember(Name = "work_pool_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid? WorkPoolId { get; set; }

        /// <summary>
        /// Gets or Sets WorkQueueId
        /// </summary>
        [DataMember(Name = "work_queue_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid? WorkQueueId { get; set; }

        /// <summary>
        /// Gets or Sets FlowRun
        /// </summary>
        [DataMember(Name = "flow_run", IsRequired = true, EmitDefaultValue = true)]
        public FlowRun FlowRun { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkerFlowRunResponse {\n");
            sb.Append("  WorkPoolId: ").Append(WorkPoolId).Append("\n");
            sb.Append("  WorkQueueId: ").Append(WorkQueueId).Append("\n");
            sb.Append("  FlowRun: ").Append(FlowRun).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkerFlowRunResponse);
        }

        /// <summary>
        /// Returns true if WorkerFlowRunResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkerFlowRunResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkerFlowRunResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.WorkPoolId == input.WorkPoolId ||
                    (this.WorkPoolId != null &&
                    this.WorkPoolId.Equals(input.WorkPoolId))
                ) && 
                (
                    this.WorkQueueId == input.WorkQueueId ||
                    (this.WorkQueueId != null &&
                    this.WorkQueueId.Equals(input.WorkQueueId))
                ) && 
                (
                    this.FlowRun == input.FlowRun ||
                    (this.FlowRun != null &&
                    this.FlowRun.Equals(input.FlowRun))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WorkPoolId != null)
                {
                    hashCode = (hashCode * 59) + this.WorkPoolId.GetHashCode();
                }
                if (this.WorkQueueId != null)
                {
                    hashCode = (hashCode * 59) + this.WorkQueueId.GetHashCode();
                }
                if (this.FlowRun != null)
                {
                    hashCode = (hashCode * 59) + this.FlowRun.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
