/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = PrefectClient.Client.FileParameter;
using OpenAPIDateConverter = PrefectClient.Client.OpenAPIDateConverter;

namespace PrefectClient.Model
{
    /// <summary>
    /// ReadBlockDocumentsRequest
    /// </summary>
    [DataContract(Name = "ReadBlockDocumentsRequest")]
    public partial class ReadBlockDocumentsRequest : IEquatable<ReadBlockDocumentsRequest>, IValidatableObject
    {
                

        /// <summary>
        /// Gets or Sets BlockDocuments
        /// </summary>
        [DataMember(Name = "block_documents", EmitDefaultValue = false)]
        public BlockDocumentFilter BlockDocuments { get; set; }

        /// <summary>
        /// Gets or Sets BlockTypes
        /// </summary>
        [DataMember(Name = "block_types", EmitDefaultValue = false)]
        public BlockTypeFilter BlockTypes { get; set; }

        /// <summary>
        /// Gets or Sets BlockSchemas
        /// </summary>
        [DataMember(Name = "block_schemas", EmitDefaultValue = false)]
        public BlockSchemaFilter BlockSchemas { get; set; }

        /// <summary>
        /// Whether to include sensitive values in the block document.
        /// </summary>
        /// <value>Whether to include sensitive values in the block document.</value>
        [DataMember(Name = "include_secrets", EmitDefaultValue = true)]
        public bool? IncludeSecrets { get; set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public int? Offset { get; set; }

        /// <summary>
        /// Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.
        /// </summary>
        /// <value>Defaults to PREFECT_API_DEFAULT_LIMIT if not provided.</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int? Limit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReadBlockDocumentsRequest {\n");
            sb.Append("  BlockDocuments: ").Append(BlockDocuments).Append("\n");
            sb.Append("  BlockTypes: ").Append(BlockTypes).Append("\n");
            sb.Append("  BlockSchemas: ").Append(BlockSchemas).Append("\n");
            sb.Append("  IncludeSecrets: ").Append(IncludeSecrets).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReadBlockDocumentsRequest);
        }

        /// <summary>
        /// Returns true if ReadBlockDocumentsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReadBlockDocumentsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReadBlockDocumentsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BlockDocuments == input.BlockDocuments ||
                    (this.BlockDocuments != null &&
                    this.BlockDocuments.Equals(input.BlockDocuments))
                ) && 
                (
                    this.BlockTypes == input.BlockTypes ||
                    (this.BlockTypes != null &&
                    this.BlockTypes.Equals(input.BlockTypes))
                ) && 
                (
                    this.BlockSchemas == input.BlockSchemas ||
                    (this.BlockSchemas != null &&
                    this.BlockSchemas.Equals(input.BlockSchemas))
                ) && 
                (
                    this.IncludeSecrets == input.IncludeSecrets ||
                    this.IncludeSecrets.Equals(input.IncludeSecrets)
                ) && 
                (
                    this.Offset == input.Offset ||
                    this.Offset.Equals(input.Offset)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BlockDocuments != null)
                {
                    hashCode = (hashCode * 59) + this.BlockDocuments.GetHashCode();
                }
                if (this.BlockTypes != null)
                {
                    hashCode = (hashCode * 59) + this.BlockTypes.GetHashCode();
                }
                if (this.BlockSchemas != null)
                {
                    hashCode = (hashCode * 59) + this.BlockSchemas.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IncludeSecrets.GetHashCode();
                hashCode = (hashCode * 59) + this.Offset.GetHashCode();
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Offset (int) minimum
            if (this.Offset < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Offset, must be a value greater than or equal to 0.", new [] { "Offset" });
            }

            yield break;
        }
    }

}
