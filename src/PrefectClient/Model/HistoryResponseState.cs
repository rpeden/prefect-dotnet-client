/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = PrefectClient.Client.FileParameter;
using OpenAPIDateConverter = PrefectClient.Client.OpenAPIDateConverter;

namespace PrefectClient.Model
{
    /// <summary>
    /// Represents a single state's history over an interval.
    /// </summary>
    [DataContract(Name = "HistoryResponseState")]
    public partial class HistoryResponseState : IEquatable<HistoryResponseState>, IValidatableObject
    {
        
        /// <summary>
        /// Gets or Sets StateType
        /// </summary>  StateType
        [DataMember(Name = "state_type", IsRequired = true, EmitDefaultValue = true)]
        public StateType StateType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryResponseState" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HistoryResponseState() { }
        

        /// <summary>
        /// The state name.
        /// </summary>
        /// <value>The state name.</value>
        [DataMember(Name = "state_name", IsRequired = true, EmitDefaultValue = true)]
        public string? StateName { get; set; }

        /// <summary>
        /// The number of runs in the specified state during the interval.
        /// </summary>
        /// <value>The number of runs in the specified state during the interval.</value>
        [DataMember(Name = "count_runs", IsRequired = true, EmitDefaultValue = true)]
        public int? CountRuns { get; set; }

        /// <summary>
        /// The total estimated run time of all runs during the interval.
        /// </summary>
        /// <value>The total estimated run time of all runs during the interval.</value>
        [DataMember(Name = "sum_estimated_run_time", IsRequired = true, EmitDefaultValue = true)]
        public decimal? SumEstimatedRunTime { get; set; }

        /// <summary>
        /// The sum of differences between actual and expected start time during the interval.
        /// </summary>
        /// <value>The sum of differences between actual and expected start time during the interval.</value>
        [DataMember(Name = "sum_estimated_lateness", IsRequired = true, EmitDefaultValue = true)]
        public decimal? SumEstimatedLateness { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HistoryResponseState {\n");
            sb.Append("  StateType: ").Append(StateType).Append("\n");
            sb.Append("  StateName: ").Append(StateName).Append("\n");
            sb.Append("  CountRuns: ").Append(CountRuns).Append("\n");
            sb.Append("  SumEstimatedRunTime: ").Append(SumEstimatedRunTime).Append("\n");
            sb.Append("  SumEstimatedLateness: ").Append(SumEstimatedLateness).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HistoryResponseState);
        }

        /// <summary>
        /// Returns true if HistoryResponseState instances are equal
        /// </summary>
        /// <param name="input">Instance of HistoryResponseState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HistoryResponseState input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StateType == input.StateType ||
                    this.StateType.Equals(input.StateType)
                ) && 
                (
                    this.StateName == input.StateName ||
                    (this.StateName != null &&
                    this.StateName.Equals(input.StateName))
                ) && 
                (
                    this.CountRuns == input.CountRuns ||
                    this.CountRuns.Equals(input.CountRuns)
                ) && 
                (
                    this.SumEstimatedRunTime == input.SumEstimatedRunTime ||
                    this.SumEstimatedRunTime.Equals(input.SumEstimatedRunTime)
                ) && 
                (
                    this.SumEstimatedLateness == input.SumEstimatedLateness ||
                    this.SumEstimatedLateness.Equals(input.SumEstimatedLateness)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.StateType.GetHashCode();
                if (this.StateName != null)
                {
                    hashCode = (hashCode * 59) + this.StateName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CountRuns.GetHashCode();
                hashCode = (hashCode * 59) + this.SumEstimatedRunTime.GetHashCode();
                hashCode = (hashCode * 59) + this.SumEstimatedLateness.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
