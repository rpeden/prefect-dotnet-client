/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = PrefectClient.Client.FileParameter;
using OpenAPIDateConverter = PrefectClient.Client.OpenAPIDateConverter;

namespace PrefectClient.Model
{
    /// <summary>
    /// Data used by the Prefect REST API to update a flow run.
    /// </summary>
    [DataContract(Name = "FlowRunUpdate")]
    public partial class FlowRunUpdate : IEquatable<FlowRunUpdate>, IValidatableObject
    {
                

        /// <summary>
        /// The name of the flow run. Defaults to a random slug if not specified.
        /// </summary>
        /// <value>The name of the flow run. Defaults to a random slug if not specified.</value>
        /// <example>my-flow-run</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string? Name { get; set; }

        /// <summary>
        /// The version of the flow executed in this flow run.
        /// </summary>
        /// <value>The version of the flow executed in this flow run.</value>
        /// <example>1.0</example>
        [DataMember(Name = "flow_version", EmitDefaultValue = false)]
        public string? FlowVersion { get; set; }

        /// <summary>
        /// Parameters for the flow run.
        /// </summary>
        /// <value>Parameters for the flow run.</value>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        public Object? Parameters { get; set; }

        /// <summary>
        /// Gets or Sets EmpiricalPolicy
        /// </summary>
        [DataMember(Name = "empirical_policy", EmitDefaultValue = false)]
        public FlowRunPolicy EmpiricalPolicy { get; set; }

        /// <summary>
        /// A list of tags on the flow run
        /// </summary>
        /// <value>A list of tags on the flow run</value>
        /// <example>["tag-1","tag-2"]</example>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string>? Tags { get; set; }

        /// <summary>
        /// The id of the flow run as returned by an infrastructure block.
        /// </summary>
        /// <value>The id of the flow run as returned by an infrastructure block.</value>
        [DataMember(Name = "infrastructure_pid", EmitDefaultValue = false)]
        public string? InfrastructurePid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlowRunUpdate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FlowVersion: ").Append(FlowVersion).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  EmpiricalPolicy: ").Append(EmpiricalPolicy).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  InfrastructurePid: ").Append(InfrastructurePid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlowRunUpdate);
        }

        /// <summary>
        /// Returns true if FlowRunUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of FlowRunUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowRunUpdate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FlowVersion == input.FlowVersion ||
                    (this.FlowVersion != null &&
                    this.FlowVersion.Equals(input.FlowVersion))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                ) && 
                (
                    this.EmpiricalPolicy == input.EmpiricalPolicy ||
                    (this.EmpiricalPolicy != null &&
                    this.EmpiricalPolicy.Equals(input.EmpiricalPolicy))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.InfrastructurePid == input.InfrastructurePid ||
                    (this.InfrastructurePid != null &&
                    this.InfrastructurePid.Equals(input.InfrastructurePid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.FlowVersion != null)
                {
                    hashCode = (hashCode * 59) + this.FlowVersion.GetHashCode();
                }
                if (this.Parameters != null)
                {
                    hashCode = (hashCode * 59) + this.Parameters.GetHashCode();
                }
                if (this.EmpiricalPolicy != null)
                {
                    hashCode = (hashCode * 59) + this.EmpiricalPolicy.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.InfrastructurePid != null)
                {
                    hashCode = (hashCode * 59) + this.InfrastructurePid.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
