/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = PrefectClient.Client.FileParameter;
using OpenAPIDateConverter = PrefectClient.Client.OpenAPIDateConverter;

namespace PrefectClient.Model
{
    /// <summary>
    /// Captures essential details of a flow run, including its identifier, state type, timestamp, duration, and any lateness.
    /// </summary>
    [DataContract(Name = "SimpleFlowRun")]
    public partial class SimpleFlowRun : IEquatable<SimpleFlowRun>, IValidatableObject
    {
        
        /// <summary>
        /// Gets or Sets StateType
        /// </summary>  StateType
        [DataMember(Name = "state_type", IsRequired = true, EmitDefaultValue = true)]
        public StateType StateType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleFlowRun" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SimpleFlowRun() { }
        

        /// <summary>
        /// The flow run id.
        /// </summary>
        /// <value>The flow run id.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// The start time of the run, or the expected start time if it hasn't run yet.
        /// </summary>
        /// <value>The start time of the run, or the expected start time if it hasn&#39;t run yet.</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// The total run time of the run.
        /// </summary>
        /// <value>The total run time of the run.</value>
        [DataMember(Name = "duration", IsRequired = true, EmitDefaultValue = true)]
        public decimal? Duration { get; set; }

        /// <summary>
        /// The delay between the expected and actual start time.
        /// </summary>
        /// <value>The delay between the expected and actual start time.</value>
        [DataMember(Name = "lateness", IsRequired = true, EmitDefaultValue = true)]
        public decimal? Lateness { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SimpleFlowRun {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StateType: ").Append(StateType).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Lateness: ").Append(Lateness).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimpleFlowRun);
        }

        /// <summary>
        /// Returns true if SimpleFlowRun instances are equal
        /// </summary>
        /// <param name="input">Instance of SimpleFlowRun to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimpleFlowRun input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StateType == input.StateType ||
                    this.StateType.Equals(input.StateType)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                ) && 
                (
                    this.Lateness == input.Lateness ||
                    this.Lateness.Equals(input.Lateness)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StateType.GetHashCode();
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                hashCode = (hashCode * 59) + this.Lateness.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
