/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using PrefectClient.Client;
using PrefectClient.Model;

namespace PrefectClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkQueuesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Work Queue
        /// </summary>
        /// <remarks>
        /// Creates a new work queue.\\n\\nIf a work queue with the same name already exists, an error\\nwill be raised.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workQueueCreate"></param>
        /// <returns>WorkQueueResponse</returns>
        WorkQueueResponse CreateWorkQueue(WorkQueueCreate workQueueCreate);

        /// <summary>
        /// Create Work Queue
        /// </summary>
        /// <remarks>
        /// Creates a new work queue.\\n\\nIf a work queue with the same name already exists, an error\\nwill be raised.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workQueueCreate"></param>
        /// <returns>ApiResponse of WorkQueueResponse</returns>
        ApiResponse<WorkQueueResponse> CreateWorkQueueWithHttpInfo(WorkQueueCreate workQueueCreate);
        /// <summary>
        /// Delete Work Queue
        /// </summary>
        /// <remarks>
        /// Delete a work queue by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <returns></returns>
        void DeleteWorkQueue(Guid id);

        /// <summary>
        /// Delete Work Queue
        /// </summary>
        /// <remarks>
        /// Delete a work queue by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWorkQueueWithHttpInfo(Guid id);
        /// <summary>
        /// Read Work Queue
        /// </summary>
        /// <remarks>
        /// Get a work queue by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <returns>WorkQueueResponse</returns>
        WorkQueueResponse ReadWorkQueue(Guid id);

        /// <summary>
        /// Read Work Queue
        /// </summary>
        /// <remarks>
        /// Get a work queue by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <returns>ApiResponse of WorkQueueResponse</returns>
        ApiResponse<WorkQueueResponse> ReadWorkQueueWithHttpInfo(Guid id);
        /// <summary>
        /// Read Work Queue By Name
        /// </summary>
        /// <remarks>
        /// Get a work queue by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work queue name</param>
        /// <returns>WorkQueueResponse</returns>
        WorkQueueResponse ReadWorkQueueByName(string name);

        /// <summary>
        /// Read Work Queue By Name
        /// </summary>
        /// <remarks>
        /// Get a work queue by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work queue name</param>
        /// <returns>ApiResponse of WorkQueueResponse</returns>
        ApiResponse<WorkQueueResponse> ReadWorkQueueByNameWithHttpInfo(string name);
        /// <summary>
        /// Read Work Queue Runs
        /// </summary>
        /// <remarks>
        /// Get flow runs from the work queue.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="xPrefectUi">A header to indicate this request came from the Prefect UI. (optional, default to false)</param>
        /// <param name="readWorkQueueRunsRequest"> (optional)</param>
        /// <returns>List&lt;FlowRunResponse&gt;</returns>
        List<FlowRunResponse> ReadWorkQueueRuns(Guid id, bool? xPrefectUi = default(bool?), ReadWorkQueueRunsRequest readWorkQueueRunsRequest = default(ReadWorkQueueRunsRequest));

        /// <summary>
        /// Read Work Queue Runs
        /// </summary>
        /// <remarks>
        /// Get flow runs from the work queue.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="xPrefectUi">A header to indicate this request came from the Prefect UI. (optional, default to false)</param>
        /// <param name="readWorkQueueRunsRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;FlowRunResponse&gt;</returns>
        ApiResponse<List<FlowRunResponse>> ReadWorkQueueRunsWithHttpInfo(Guid id, bool? xPrefectUi = default(bool?), ReadWorkQueueRunsRequest readWorkQueueRunsRequest = default(ReadWorkQueueRunsRequest));
        /// <summary>
        /// Read Work Queue Status
        /// </summary>
        /// <remarks>
        /// Get the status of a work queue.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <returns>WorkQueueStatusDetail</returns>
        WorkQueueStatusDetail ReadWorkQueueStatus(Guid id);

        /// <summary>
        /// Read Work Queue Status
        /// </summary>
        /// <remarks>
        /// Get the status of a work queue.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <returns>ApiResponse of WorkQueueStatusDetail</returns>
        ApiResponse<WorkQueueStatusDetail> ReadWorkQueueStatusWithHttpInfo(Guid id);
        /// <summary>
        /// Read Work Queues
        /// </summary>
        /// <remarks>
        /// Query for work queues.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readWorkQueuesRequest"> (optional)</param>
        /// <returns>List&lt;WorkQueueResponse&gt;</returns>
        List<WorkQueueResponse> ReadWorkQueues(ReadWorkQueuesRequest readWorkQueuesRequest = default(ReadWorkQueuesRequest));

        /// <summary>
        /// Read Work Queues
        /// </summary>
        /// <remarks>
        /// Query for work queues.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readWorkQueuesRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkQueueResponse&gt;</returns>
        ApiResponse<List<WorkQueueResponse>> ReadWorkQueuesWithHttpInfo(ReadWorkQueuesRequest readWorkQueuesRequest = default(ReadWorkQueuesRequest));
        /// <summary>
        /// Update Work Queue
        /// </summary>
        /// <remarks>
        /// Updates an existing work queue.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="workQueueUpdate"></param>
        /// <returns></returns>
        void UpdateWorkQueue(Guid id, WorkQueueUpdate workQueueUpdate);

        /// <summary>
        /// Update Work Queue
        /// </summary>
        /// <remarks>
        /// Updates an existing work queue.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="workQueueUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateWorkQueueWithHttpInfo(Guid id, WorkQueueUpdate workQueueUpdate);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkQueuesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Work Queue
        /// </summary>
        /// <remarks>
        /// Creates a new work queue.\\n\\nIf a work queue with the same name already exists, an error\\nwill be raised.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workQueueCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkQueueResponse</returns>
        System.Threading.Tasks.Task<WorkQueueResponse> CreateWorkQueueAsync(WorkQueueCreate workQueueCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Work Queue
        /// </summary>
        /// <remarks>
        /// Creates a new work queue.\\n\\nIf a work queue with the same name already exists, an error\\nwill be raised.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workQueueCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkQueueResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkQueueResponse>> CreateWorkQueueWithHttpInfoAsync(WorkQueueCreate workQueueCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Work Queue
        /// </summary>
        /// <remarks>
        /// Delete a work queue by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWorkQueueAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Work Queue
        /// </summary>
        /// <remarks>
        /// Delete a work queue by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorkQueueWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Work Queue
        /// </summary>
        /// <remarks>
        /// Get a work queue by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkQueueResponse</returns>
        System.Threading.Tasks.Task<WorkQueueResponse> ReadWorkQueueAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Work Queue
        /// </summary>
        /// <remarks>
        /// Get a work queue by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkQueueResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkQueueResponse>> ReadWorkQueueWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Work Queue By Name
        /// </summary>
        /// <remarks>
        /// Get a work queue by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work queue name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkQueueResponse</returns>
        System.Threading.Tasks.Task<WorkQueueResponse> ReadWorkQueueByNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Work Queue By Name
        /// </summary>
        /// <remarks>
        /// Get a work queue by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work queue name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkQueueResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkQueueResponse>> ReadWorkQueueByNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Work Queue Runs
        /// </summary>
        /// <remarks>
        /// Get flow runs from the work queue.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="xPrefectUi">A header to indicate this request came from the Prefect UI. (optional, default to false)</param>
        /// <param name="readWorkQueueRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FlowRunResponse&gt;</returns>
        System.Threading.Tasks.Task<List<FlowRunResponse>> ReadWorkQueueRunsAsync(Guid id, bool? xPrefectUi = default(bool?), ReadWorkQueueRunsRequest readWorkQueueRunsRequest = default(ReadWorkQueueRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Work Queue Runs
        /// </summary>
        /// <remarks>
        /// Get flow runs from the work queue.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="xPrefectUi">A header to indicate this request came from the Prefect UI. (optional, default to false)</param>
        /// <param name="readWorkQueueRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FlowRunResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FlowRunResponse>>> ReadWorkQueueRunsWithHttpInfoAsync(Guid id, bool? xPrefectUi = default(bool?), ReadWorkQueueRunsRequest readWorkQueueRunsRequest = default(ReadWorkQueueRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Work Queue Status
        /// </summary>
        /// <remarks>
        /// Get the status of a work queue.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkQueueStatusDetail</returns>
        System.Threading.Tasks.Task<WorkQueueStatusDetail> ReadWorkQueueStatusAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Work Queue Status
        /// </summary>
        /// <remarks>
        /// Get the status of a work queue.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkQueueStatusDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkQueueStatusDetail>> ReadWorkQueueStatusWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Work Queues
        /// </summary>
        /// <remarks>
        /// Query for work queues.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readWorkQueuesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkQueueResponse&gt;</returns>
        System.Threading.Tasks.Task<List<WorkQueueResponse>> ReadWorkQueuesAsync(ReadWorkQueuesRequest readWorkQueuesRequest = default(ReadWorkQueuesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Work Queues
        /// </summary>
        /// <remarks>
        /// Query for work queues.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readWorkQueuesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkQueueResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkQueueResponse>>> ReadWorkQueuesWithHttpInfoAsync(ReadWorkQueuesRequest readWorkQueuesRequest = default(ReadWorkQueuesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Work Queue
        /// </summary>
        /// <remarks>
        /// Updates an existing work queue.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="workQueueUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateWorkQueueAsync(Guid id, WorkQueueUpdate workQueueUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Work Queue
        /// </summary>
        /// <remarks>
        /// Updates an existing work queue.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="workQueueUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateWorkQueueWithHttpInfoAsync(Guid id, WorkQueueUpdate workQueueUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkQueuesApi : IWorkQueuesApiSync, IWorkQueuesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkQueuesApi : IDisposable, IWorkQueuesApi
    {
        private PrefectClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkQueuesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public WorkQueuesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkQueuesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public WorkQueuesApi(string basePath)
        {
            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkQueuesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public WorkQueuesApi(PrefectClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkQueuesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public WorkQueuesApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkQueuesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public WorkQueuesApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkQueuesApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public WorkQueuesApi(HttpClient client, PrefectClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkQueuesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public WorkQueuesApi(PrefectClient.Client.ISynchronousClient client, PrefectClient.Client.IAsynchronousClient asyncClient, PrefectClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public PrefectClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PrefectClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PrefectClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PrefectClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PrefectClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Work Queue Creates a new work queue.\\n\\nIf a work queue with the same name already exists, an error\\nwill be raised.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workQueueCreate"></param>
        /// <returns>WorkQueueResponse</returns>
        public WorkQueueResponse CreateWorkQueue(WorkQueueCreate workQueueCreate)
        {
            PrefectClient.Client.ApiResponse<WorkQueueResponse> localVarResponse = CreateWorkQueueWithHttpInfo(workQueueCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Work Queue Creates a new work queue.\\n\\nIf a work queue with the same name already exists, an error\\nwill be raised.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workQueueCreate"></param>
        /// <returns>ApiResponse of WorkQueueResponse</returns>
        public PrefectClient.Client.ApiResponse<WorkQueueResponse> CreateWorkQueueWithHttpInfo(WorkQueueCreate workQueueCreate)
        {
            // verify the required parameter 'workQueueCreate' is set
            if (workQueueCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workQueueCreate' when calling WorkQueuesApi->CreateWorkQueue");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = workQueueCreate;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkQueueResponse>("/work_queues/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWorkQueue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Work Queue Creates a new work queue.\\n\\nIf a work queue with the same name already exists, an error\\nwill be raised.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workQueueCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkQueueResponse</returns>
        public async System.Threading.Tasks.Task<WorkQueueResponse> CreateWorkQueueAsync(WorkQueueCreate workQueueCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<WorkQueueResponse> localVarResponse = await CreateWorkQueueWithHttpInfoAsync(workQueueCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Work Queue Creates a new work queue.\\n\\nIf a work queue with the same name already exists, an error\\nwill be raised.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workQueueCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkQueueResponse)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<WorkQueueResponse>> CreateWorkQueueWithHttpInfoAsync(WorkQueueCreate workQueueCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workQueueCreate' is set
            if (workQueueCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workQueueCreate' when calling WorkQueuesApi->CreateWorkQueue");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = workQueueCreate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkQueueResponse>("/work_queues/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWorkQueue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Work Queue Delete a work queue by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <returns></returns>
        public void DeleteWorkQueue(Guid id)
        {
            DeleteWorkQueueWithHttpInfo(id);
        }

        /// <summary>
        /// Delete Work Queue Delete a work queue by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> DeleteWorkQueueWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/work_queues/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWorkQueue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Work Queue Delete a work queue by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWorkQueueAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWorkQueueWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Work Queue Delete a work queue by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> DeleteWorkQueueWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/work_queues/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWorkQueue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Work Queue Get a work queue by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <returns>WorkQueueResponse</returns>
        public WorkQueueResponse ReadWorkQueue(Guid id)
        {
            PrefectClient.Client.ApiResponse<WorkQueueResponse> localVarResponse = ReadWorkQueueWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Work Queue Get a work queue by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <returns>ApiResponse of WorkQueueResponse</returns>
        public PrefectClient.Client.ApiResponse<WorkQueueResponse> ReadWorkQueueWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<WorkQueueResponse>("/work_queues/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkQueue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Work Queue Get a work queue by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkQueueResponse</returns>
        public async System.Threading.Tasks.Task<WorkQueueResponse> ReadWorkQueueAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<WorkQueueResponse> localVarResponse = await ReadWorkQueueWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Work Queue Get a work queue by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkQueueResponse)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<WorkQueueResponse>> ReadWorkQueueWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WorkQueueResponse>("/work_queues/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkQueue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Work Queue By Name Get a work queue by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work queue name</param>
        /// <returns>WorkQueueResponse</returns>
        public WorkQueueResponse ReadWorkQueueByName(string name)
        {
            PrefectClient.Client.ApiResponse<WorkQueueResponse> localVarResponse = ReadWorkQueueByNameWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Work Queue By Name Get a work queue by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work queue name</param>
        /// <returns>ApiResponse of WorkQueueResponse</returns>
        public PrefectClient.Client.ApiResponse<WorkQueueResponse> ReadWorkQueueByNameWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkQueuesApi->ReadWorkQueueByName");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", PrefectClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<WorkQueueResponse>("/work_queues/name/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkQueueByName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Work Queue By Name Get a work queue by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work queue name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkQueueResponse</returns>
        public async System.Threading.Tasks.Task<WorkQueueResponse> ReadWorkQueueByNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<WorkQueueResponse> localVarResponse = await ReadWorkQueueByNameWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Work Queue By Name Get a work queue by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work queue name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkQueueResponse)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<WorkQueueResponse>> ReadWorkQueueByNameWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkQueuesApi->ReadWorkQueueByName");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", PrefectClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WorkQueueResponse>("/work_queues/name/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkQueueByName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Work Queue Runs Get flow runs from the work queue.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="xPrefectUi">A header to indicate this request came from the Prefect UI. (optional, default to false)</param>
        /// <param name="readWorkQueueRunsRequest"> (optional)</param>
        /// <returns>List&lt;FlowRunResponse&gt;</returns>
        public List<FlowRunResponse> ReadWorkQueueRuns(Guid id, bool? xPrefectUi = default(bool?), ReadWorkQueueRunsRequest readWorkQueueRunsRequest = default(ReadWorkQueueRunsRequest))
        {
            PrefectClient.Client.ApiResponse<List<FlowRunResponse>> localVarResponse = ReadWorkQueueRunsWithHttpInfo(id, xPrefectUi, readWorkQueueRunsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Work Queue Runs Get flow runs from the work queue.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="xPrefectUi">A header to indicate this request came from the Prefect UI. (optional, default to false)</param>
        /// <param name="readWorkQueueRunsRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;FlowRunResponse&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<FlowRunResponse>> ReadWorkQueueRunsWithHttpInfo(Guid id, bool? xPrefectUi = default(bool?), ReadWorkQueueRunsRequest readWorkQueueRunsRequest = default(ReadWorkQueueRunsRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (xPrefectUi != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-prefect-ui", PrefectClient.Client.ClientUtils.ParameterToString(xPrefectUi)); // header parameter
            }
            localVarRequestOptions.Data = readWorkQueueRunsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<FlowRunResponse>>("/work_queues/{id}/get_runs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkQueueRuns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Work Queue Runs Get flow runs from the work queue.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="xPrefectUi">A header to indicate this request came from the Prefect UI. (optional, default to false)</param>
        /// <param name="readWorkQueueRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FlowRunResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<FlowRunResponse>> ReadWorkQueueRunsAsync(Guid id, bool? xPrefectUi = default(bool?), ReadWorkQueueRunsRequest readWorkQueueRunsRequest = default(ReadWorkQueueRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<FlowRunResponse>> localVarResponse = await ReadWorkQueueRunsWithHttpInfoAsync(id, xPrefectUi, readWorkQueueRunsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Work Queue Runs Get flow runs from the work queue.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="xPrefectUi">A header to indicate this request came from the Prefect UI. (optional, default to false)</param>
        /// <param name="readWorkQueueRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FlowRunResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<FlowRunResponse>>> ReadWorkQueueRunsWithHttpInfoAsync(Guid id, bool? xPrefectUi = default(bool?), ReadWorkQueueRunsRequest readWorkQueueRunsRequest = default(ReadWorkQueueRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (xPrefectUi != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-prefect-ui", PrefectClient.Client.ClientUtils.ParameterToString(xPrefectUi)); // header parameter
            }
            localVarRequestOptions.Data = readWorkQueueRunsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<FlowRunResponse>>("/work_queues/{id}/get_runs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkQueueRuns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Work Queue Status Get the status of a work queue.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <returns>WorkQueueStatusDetail</returns>
        public WorkQueueStatusDetail ReadWorkQueueStatus(Guid id)
        {
            PrefectClient.Client.ApiResponse<WorkQueueStatusDetail> localVarResponse = ReadWorkQueueStatusWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Work Queue Status Get the status of a work queue.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <returns>ApiResponse of WorkQueueStatusDetail</returns>
        public PrefectClient.Client.ApiResponse<WorkQueueStatusDetail> ReadWorkQueueStatusWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<WorkQueueStatusDetail>("/work_queues/{id}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkQueueStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Work Queue Status Get the status of a work queue.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkQueueStatusDetail</returns>
        public async System.Threading.Tasks.Task<WorkQueueStatusDetail> ReadWorkQueueStatusAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<WorkQueueStatusDetail> localVarResponse = await ReadWorkQueueStatusWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Work Queue Status Get the status of a work queue.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkQueueStatusDetail)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<WorkQueueStatusDetail>> ReadWorkQueueStatusWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WorkQueueStatusDetail>("/work_queues/{id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkQueueStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Work Queues Query for work queues.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readWorkQueuesRequest"> (optional)</param>
        /// <returns>List&lt;WorkQueueResponse&gt;</returns>
        public List<WorkQueueResponse> ReadWorkQueues(ReadWorkQueuesRequest readWorkQueuesRequest = default(ReadWorkQueuesRequest))
        {
            PrefectClient.Client.ApiResponse<List<WorkQueueResponse>> localVarResponse = ReadWorkQueuesWithHttpInfo(readWorkQueuesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Work Queues Query for work queues.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readWorkQueuesRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkQueueResponse&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<WorkQueueResponse>> ReadWorkQueuesWithHttpInfo(ReadWorkQueuesRequest readWorkQueuesRequest = default(ReadWorkQueuesRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readWorkQueuesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<WorkQueueResponse>>("/work_queues/filter", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkQueues", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Work Queues Query for work queues.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readWorkQueuesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkQueueResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkQueueResponse>> ReadWorkQueuesAsync(ReadWorkQueuesRequest readWorkQueuesRequest = default(ReadWorkQueuesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<WorkQueueResponse>> localVarResponse = await ReadWorkQueuesWithHttpInfoAsync(readWorkQueuesRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Work Queues Query for work queues.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readWorkQueuesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkQueueResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<WorkQueueResponse>>> ReadWorkQueuesWithHttpInfoAsync(ReadWorkQueuesRequest readWorkQueuesRequest = default(ReadWorkQueuesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readWorkQueuesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<WorkQueueResponse>>("/work_queues/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkQueues", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work Queue Updates an existing work queue.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="workQueueUpdate"></param>
        /// <returns></returns>
        public void UpdateWorkQueue(Guid id, WorkQueueUpdate workQueueUpdate)
        {
            UpdateWorkQueueWithHttpInfo(id, workQueueUpdate);
        }

        /// <summary>
        /// Update Work Queue Updates an existing work queue.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="workQueueUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> UpdateWorkQueueWithHttpInfo(Guid id, WorkQueueUpdate workQueueUpdate)
        {
            // verify the required parameter 'workQueueUpdate' is set
            if (workQueueUpdate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workQueueUpdate' when calling WorkQueuesApi->UpdateWorkQueue");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = workQueueUpdate;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/work_queues/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWorkQueue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work Queue Updates an existing work queue.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="workQueueUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateWorkQueueAsync(Guid id, WorkQueueUpdate workQueueUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateWorkQueueWithHttpInfoAsync(id, workQueueUpdate, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Work Queue Updates an existing work queue.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The work queue id</param>
        /// <param name="workQueueUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> UpdateWorkQueueWithHttpInfoAsync(Guid id, WorkQueueUpdate workQueueUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workQueueUpdate' is set
            if (workQueueUpdate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workQueueUpdate' when calling WorkQueuesApi->UpdateWorkQueue");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = workQueueUpdate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/work_queues/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWorkQueue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
