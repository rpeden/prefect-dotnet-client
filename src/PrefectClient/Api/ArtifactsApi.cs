/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using PrefectClient.Client;
using PrefectClient.Model;

namespace PrefectClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArtifactsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Count Artifacts
        /// </summary>
        /// <remarks>
        /// Count artifacts from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countArtifactsRequest"> (optional)</param>
        /// <returns>int</returns>
        int CountArtifacts(CountArtifactsRequest countArtifactsRequest = default(CountArtifactsRequest));

        /// <summary>
        /// Count Artifacts
        /// </summary>
        /// <remarks>
        /// Count artifacts from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countArtifactsRequest"> (optional)</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> CountArtifactsWithHttpInfo(CountArtifactsRequest countArtifactsRequest = default(CountArtifactsRequest));
        /// <summary>
        /// Count Latest Artifacts
        /// </summary>
        /// <remarks>
        /// Count artifacts from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countLatestArtifactsRequest"> (optional)</param>
        /// <returns>int</returns>
        int CountLatestArtifacts(CountLatestArtifactsRequest countLatestArtifactsRequest = default(CountLatestArtifactsRequest));

        /// <summary>
        /// Count Latest Artifacts
        /// </summary>
        /// <remarks>
        /// Count artifacts from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countLatestArtifactsRequest"> (optional)</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> CountLatestArtifactsWithHttpInfo(CountLatestArtifactsRequest countLatestArtifactsRequest = default(CountLatestArtifactsRequest));
        /// <summary>
        /// Create Artifact
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artifactCreate"></param>
        /// <returns>Artifact</returns>
        Artifact CreateArtifact(ArtifactCreate artifactCreate);

        /// <summary>
        /// Create Artifact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artifactCreate"></param>
        /// <returns>ApiResponse of Artifact</returns>
        ApiResponse<Artifact> CreateArtifactWithHttpInfo(ArtifactCreate artifactCreate);
        /// <summary>
        /// Delete Artifact
        /// </summary>
        /// <remarks>
        /// Delete an artifact from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to delete.</param>
        /// <returns></returns>
        void DeleteArtifact(Guid id);

        /// <summary>
        /// Delete Artifact
        /// </summary>
        /// <remarks>
        /// Delete an artifact from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteArtifactWithHttpInfo(Guid id);
        /// <summary>
        /// Read Artifact
        /// </summary>
        /// <remarks>
        /// Retrieve an artifact from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to retrieve.</param>
        /// <returns>Artifact</returns>
        Artifact ReadArtifact(Guid id);

        /// <summary>
        /// Read Artifact
        /// </summary>
        /// <remarks>
        /// Retrieve an artifact from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to retrieve.</param>
        /// <returns>ApiResponse of Artifact</returns>
        ApiResponse<Artifact> ReadArtifactWithHttpInfo(Guid id);
        /// <summary>
        /// Read Artifacts
        /// </summary>
        /// <remarks>
        /// Retrieve artifacts from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readArtifactsRequest"> (optional)</param>
        /// <returns>List&lt;Artifact&gt;</returns>
        List<Artifact> ReadArtifacts(ReadArtifactsRequest readArtifactsRequest = default(ReadArtifactsRequest));

        /// <summary>
        /// Read Artifacts
        /// </summary>
        /// <remarks>
        /// Retrieve artifacts from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readArtifactsRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Artifact&gt;</returns>
        ApiResponse<List<Artifact>> ReadArtifactsWithHttpInfo(ReadArtifactsRequest readArtifactsRequest = default(ReadArtifactsRequest));
        /// <summary>
        /// Read Latest Artifact
        /// </summary>
        /// <remarks>
        /// Retrieve the latest artifact from the artifact table.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the artifact to retrieve.</param>
        /// <returns>Artifact</returns>
        Artifact ReadLatestArtifact(string key);

        /// <summary>
        /// Read Latest Artifact
        /// </summary>
        /// <remarks>
        /// Retrieve the latest artifact from the artifact table.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the artifact to retrieve.</param>
        /// <returns>ApiResponse of Artifact</returns>
        ApiResponse<Artifact> ReadLatestArtifactWithHttpInfo(string key);
        /// <summary>
        /// Read Latest Artifacts
        /// </summary>
        /// <remarks>
        /// Retrieve artifacts from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readLatestArtifactsRequest"> (optional)</param>
        /// <returns>List&lt;ArtifactCollection&gt;</returns>
        List<ArtifactCollection> ReadLatestArtifacts(ReadLatestArtifactsRequest readLatestArtifactsRequest = default(ReadLatestArtifactsRequest));

        /// <summary>
        /// Read Latest Artifacts
        /// </summary>
        /// <remarks>
        /// Retrieve artifacts from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readLatestArtifactsRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ArtifactCollection&gt;</returns>
        ApiResponse<List<ArtifactCollection>> ReadLatestArtifactsWithHttpInfo(ReadLatestArtifactsRequest readLatestArtifactsRequest = default(ReadLatestArtifactsRequest));
        /// <summary>
        /// Update Artifact
        /// </summary>
        /// <remarks>
        /// Update an artifact in the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to update.</param>
        /// <param name="artifactUpdate"></param>
        /// <returns></returns>
        void UpdateArtifact(Guid id, ArtifactUpdate artifactUpdate);

        /// <summary>
        /// Update Artifact
        /// </summary>
        /// <remarks>
        /// Update an artifact in the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to update.</param>
        /// <param name="artifactUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateArtifactWithHttpInfo(Guid id, ArtifactUpdate artifactUpdate);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArtifactsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Count Artifacts
        /// </summary>
        /// <remarks>
        /// Count artifacts from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countArtifactsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> CountArtifactsAsync(CountArtifactsRequest countArtifactsRequest = default(CountArtifactsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Count Artifacts
        /// </summary>
        /// <remarks>
        /// Count artifacts from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countArtifactsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> CountArtifactsWithHttpInfoAsync(CountArtifactsRequest countArtifactsRequest = default(CountArtifactsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Count Latest Artifacts
        /// </summary>
        /// <remarks>
        /// Count artifacts from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countLatestArtifactsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> CountLatestArtifactsAsync(CountLatestArtifactsRequest countLatestArtifactsRequest = default(CountLatestArtifactsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Count Latest Artifacts
        /// </summary>
        /// <remarks>
        /// Count artifacts from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countLatestArtifactsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> CountLatestArtifactsWithHttpInfoAsync(CountLatestArtifactsRequest countLatestArtifactsRequest = default(CountLatestArtifactsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Artifact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artifactCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Artifact</returns>
        System.Threading.Tasks.Task<Artifact> CreateArtifactAsync(ArtifactCreate artifactCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Artifact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artifactCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Artifact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Artifact>> CreateArtifactWithHttpInfoAsync(ArtifactCreate artifactCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Artifact
        /// </summary>
        /// <remarks>
        /// Delete an artifact from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteArtifactAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Artifact
        /// </summary>
        /// <remarks>
        /// Delete an artifact from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteArtifactWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Artifact
        /// </summary>
        /// <remarks>
        /// Retrieve an artifact from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Artifact</returns>
        System.Threading.Tasks.Task<Artifact> ReadArtifactAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Artifact
        /// </summary>
        /// <remarks>
        /// Retrieve an artifact from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Artifact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Artifact>> ReadArtifactWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Artifacts
        /// </summary>
        /// <remarks>
        /// Retrieve artifacts from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readArtifactsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Artifact&gt;</returns>
        System.Threading.Tasks.Task<List<Artifact>> ReadArtifactsAsync(ReadArtifactsRequest readArtifactsRequest = default(ReadArtifactsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Artifacts
        /// </summary>
        /// <remarks>
        /// Retrieve artifacts from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readArtifactsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Artifact&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Artifact>>> ReadArtifactsWithHttpInfoAsync(ReadArtifactsRequest readArtifactsRequest = default(ReadArtifactsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Latest Artifact
        /// </summary>
        /// <remarks>
        /// Retrieve the latest artifact from the artifact table.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the artifact to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Artifact</returns>
        System.Threading.Tasks.Task<Artifact> ReadLatestArtifactAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Latest Artifact
        /// </summary>
        /// <remarks>
        /// Retrieve the latest artifact from the artifact table.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the artifact to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Artifact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Artifact>> ReadLatestArtifactWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Latest Artifacts
        /// </summary>
        /// <remarks>
        /// Retrieve artifacts from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readLatestArtifactsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArtifactCollection&gt;</returns>
        System.Threading.Tasks.Task<List<ArtifactCollection>> ReadLatestArtifactsAsync(ReadLatestArtifactsRequest readLatestArtifactsRequest = default(ReadLatestArtifactsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Latest Artifacts
        /// </summary>
        /// <remarks>
        /// Retrieve artifacts from the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readLatestArtifactsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArtifactCollection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArtifactCollection>>> ReadLatestArtifactsWithHttpInfoAsync(ReadLatestArtifactsRequest readLatestArtifactsRequest = default(ReadLatestArtifactsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Artifact
        /// </summary>
        /// <remarks>
        /// Update an artifact in the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to update.</param>
        /// <param name="artifactUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateArtifactAsync(Guid id, ArtifactUpdate artifactUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Artifact
        /// </summary>
        /// <remarks>
        /// Update an artifact in the database.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to update.</param>
        /// <param name="artifactUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateArtifactWithHttpInfoAsync(Guid id, ArtifactUpdate artifactUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArtifactsApi : IArtifactsApiSync, IArtifactsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ArtifactsApi : IDisposable, IArtifactsApi
    {
        private PrefectClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ArtifactsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ArtifactsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArtifactsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ArtifactsApi(string basePath)
        {
            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArtifactsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ArtifactsApi(PrefectClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArtifactsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ArtifactsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArtifactsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ArtifactsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArtifactsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ArtifactsApi(HttpClient client, PrefectClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArtifactsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ArtifactsApi(PrefectClient.Client.ISynchronousClient client, PrefectClient.Client.IAsynchronousClient asyncClient, PrefectClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public PrefectClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PrefectClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PrefectClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PrefectClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PrefectClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Count Artifacts Count artifacts from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countArtifactsRequest"> (optional)</param>
        /// <returns>int</returns>
        public int CountArtifacts(CountArtifactsRequest countArtifactsRequest = default(CountArtifactsRequest))
        {
            PrefectClient.Client.ApiResponse<int> localVarResponse = CountArtifactsWithHttpInfo(countArtifactsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count Artifacts Count artifacts from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countArtifactsRequest"> (optional)</param>
        /// <returns>ApiResponse of int</returns>
        public PrefectClient.Client.ApiResponse<int> CountArtifactsWithHttpInfo(CountArtifactsRequest countArtifactsRequest = default(CountArtifactsRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = countArtifactsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<int>("/artifacts/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountArtifacts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Count Artifacts Count artifacts from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countArtifactsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> CountArtifactsAsync(CountArtifactsRequest countArtifactsRequest = default(CountArtifactsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<int> localVarResponse = await CountArtifactsWithHttpInfoAsync(countArtifactsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count Artifacts Count artifacts from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countArtifactsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<int>> CountArtifactsWithHttpInfoAsync(CountArtifactsRequest countArtifactsRequest = default(CountArtifactsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = countArtifactsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<int>("/artifacts/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountArtifacts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Count Latest Artifacts Count artifacts from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countLatestArtifactsRequest"> (optional)</param>
        /// <returns>int</returns>
        public int CountLatestArtifacts(CountLatestArtifactsRequest countLatestArtifactsRequest = default(CountLatestArtifactsRequest))
        {
            PrefectClient.Client.ApiResponse<int> localVarResponse = CountLatestArtifactsWithHttpInfo(countLatestArtifactsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count Latest Artifacts Count artifacts from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countLatestArtifactsRequest"> (optional)</param>
        /// <returns>ApiResponse of int</returns>
        public PrefectClient.Client.ApiResponse<int> CountLatestArtifactsWithHttpInfo(CountLatestArtifactsRequest countLatestArtifactsRequest = default(CountLatestArtifactsRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = countLatestArtifactsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<int>("/artifacts/latest/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountLatestArtifacts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Count Latest Artifacts Count artifacts from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countLatestArtifactsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> CountLatestArtifactsAsync(CountLatestArtifactsRequest countLatestArtifactsRequest = default(CountLatestArtifactsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<int> localVarResponse = await CountLatestArtifactsWithHttpInfoAsync(countLatestArtifactsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count Latest Artifacts Count artifacts from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countLatestArtifactsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<int>> CountLatestArtifactsWithHttpInfoAsync(CountLatestArtifactsRequest countLatestArtifactsRequest = default(CountLatestArtifactsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = countLatestArtifactsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<int>("/artifacts/latest/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountLatestArtifacts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Artifact 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artifactCreate"></param>
        /// <returns>Artifact</returns>
        public Artifact CreateArtifact(ArtifactCreate artifactCreate)
        {
            PrefectClient.Client.ApiResponse<Artifact> localVarResponse = CreateArtifactWithHttpInfo(artifactCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Artifact 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artifactCreate"></param>
        /// <returns>ApiResponse of Artifact</returns>
        public PrefectClient.Client.ApiResponse<Artifact> CreateArtifactWithHttpInfo(ArtifactCreate artifactCreate)
        {
            // verify the required parameter 'artifactCreate' is set
            if (artifactCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'artifactCreate' when calling ArtifactsApi->CreateArtifact");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = artifactCreate;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Artifact>("/artifacts/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateArtifact", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Artifact 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artifactCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Artifact</returns>
        public async System.Threading.Tasks.Task<Artifact> CreateArtifactAsync(ArtifactCreate artifactCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<Artifact> localVarResponse = await CreateArtifactWithHttpInfoAsync(artifactCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Artifact 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artifactCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Artifact)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Artifact>> CreateArtifactWithHttpInfoAsync(ArtifactCreate artifactCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'artifactCreate' is set
            if (artifactCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'artifactCreate' when calling ArtifactsApi->CreateArtifact");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = artifactCreate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Artifact>("/artifacts/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateArtifact", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Artifact Delete an artifact from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to delete.</param>
        /// <returns></returns>
        public void DeleteArtifact(Guid id)
        {
            DeleteArtifactWithHttpInfo(id);
        }

        /// <summary>
        /// Delete Artifact Delete an artifact from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> DeleteArtifactWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/artifacts/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteArtifact", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Artifact Delete an artifact from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteArtifactAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteArtifactWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Artifact Delete an artifact from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> DeleteArtifactWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/artifacts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteArtifact", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Artifact Retrieve an artifact from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to retrieve.</param>
        /// <returns>Artifact</returns>
        public Artifact ReadArtifact(Guid id)
        {
            PrefectClient.Client.ApiResponse<Artifact> localVarResponse = ReadArtifactWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Artifact Retrieve an artifact from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to retrieve.</param>
        /// <returns>ApiResponse of Artifact</returns>
        public PrefectClient.Client.ApiResponse<Artifact> ReadArtifactWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Artifact>("/artifacts/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadArtifact", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Artifact Retrieve an artifact from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Artifact</returns>
        public async System.Threading.Tasks.Task<Artifact> ReadArtifactAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<Artifact> localVarResponse = await ReadArtifactWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Artifact Retrieve an artifact from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Artifact)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Artifact>> ReadArtifactWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Artifact>("/artifacts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadArtifact", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Artifacts Retrieve artifacts from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readArtifactsRequest"> (optional)</param>
        /// <returns>List&lt;Artifact&gt;</returns>
        public List<Artifact> ReadArtifacts(ReadArtifactsRequest readArtifactsRequest = default(ReadArtifactsRequest))
        {
            PrefectClient.Client.ApiResponse<List<Artifact>> localVarResponse = ReadArtifactsWithHttpInfo(readArtifactsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Artifacts Retrieve artifacts from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readArtifactsRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Artifact&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<Artifact>> ReadArtifactsWithHttpInfo(ReadArtifactsRequest readArtifactsRequest = default(ReadArtifactsRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readArtifactsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Artifact>>("/artifacts/filter", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadArtifacts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Artifacts Retrieve artifacts from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readArtifactsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Artifact&gt;</returns>
        public async System.Threading.Tasks.Task<List<Artifact>> ReadArtifactsAsync(ReadArtifactsRequest readArtifactsRequest = default(ReadArtifactsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<Artifact>> localVarResponse = await ReadArtifactsWithHttpInfoAsync(readArtifactsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Artifacts Retrieve artifacts from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readArtifactsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Artifact&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<Artifact>>> ReadArtifactsWithHttpInfoAsync(ReadArtifactsRequest readArtifactsRequest = default(ReadArtifactsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readArtifactsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Artifact>>("/artifacts/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadArtifacts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Latest Artifact Retrieve the latest artifact from the artifact table.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the artifact to retrieve.</param>
        /// <returns>Artifact</returns>
        public Artifact ReadLatestArtifact(string key)
        {
            PrefectClient.Client.ApiResponse<Artifact> localVarResponse = ReadLatestArtifactWithHttpInfo(key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Latest Artifact Retrieve the latest artifact from the artifact table.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the artifact to retrieve.</param>
        /// <returns>ApiResponse of Artifact</returns>
        public PrefectClient.Client.ApiResponse<Artifact> ReadLatestArtifactWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'key' when calling ArtifactsApi->ReadLatestArtifact");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", PrefectClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Artifact>("/artifacts/{key}/latest", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadLatestArtifact", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Latest Artifact Retrieve the latest artifact from the artifact table.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the artifact to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Artifact</returns>
        public async System.Threading.Tasks.Task<Artifact> ReadLatestArtifactAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<Artifact> localVarResponse = await ReadLatestArtifactWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Latest Artifact Retrieve the latest artifact from the artifact table.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the artifact to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Artifact)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Artifact>> ReadLatestArtifactWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'key' when calling ArtifactsApi->ReadLatestArtifact");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", PrefectClient.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Artifact>("/artifacts/{key}/latest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadLatestArtifact", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Latest Artifacts Retrieve artifacts from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readLatestArtifactsRequest"> (optional)</param>
        /// <returns>List&lt;ArtifactCollection&gt;</returns>
        public List<ArtifactCollection> ReadLatestArtifacts(ReadLatestArtifactsRequest readLatestArtifactsRequest = default(ReadLatestArtifactsRequest))
        {
            PrefectClient.Client.ApiResponse<List<ArtifactCollection>> localVarResponse = ReadLatestArtifactsWithHttpInfo(readLatestArtifactsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Latest Artifacts Retrieve artifacts from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readLatestArtifactsRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ArtifactCollection&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<ArtifactCollection>> ReadLatestArtifactsWithHttpInfo(ReadLatestArtifactsRequest readLatestArtifactsRequest = default(ReadLatestArtifactsRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readLatestArtifactsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ArtifactCollection>>("/artifacts/latest/filter", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadLatestArtifacts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Latest Artifacts Retrieve artifacts from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readLatestArtifactsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArtifactCollection&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArtifactCollection>> ReadLatestArtifactsAsync(ReadLatestArtifactsRequest readLatestArtifactsRequest = default(ReadLatestArtifactsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<ArtifactCollection>> localVarResponse = await ReadLatestArtifactsWithHttpInfoAsync(readLatestArtifactsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Latest Artifacts Retrieve artifacts from the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readLatestArtifactsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArtifactCollection&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<ArtifactCollection>>> ReadLatestArtifactsWithHttpInfoAsync(ReadLatestArtifactsRequest readLatestArtifactsRequest = default(ReadLatestArtifactsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readLatestArtifactsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ArtifactCollection>>("/artifacts/latest/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadLatestArtifacts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Artifact Update an artifact in the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to update.</param>
        /// <param name="artifactUpdate"></param>
        /// <returns></returns>
        public void UpdateArtifact(Guid id, ArtifactUpdate artifactUpdate)
        {
            UpdateArtifactWithHttpInfo(id, artifactUpdate);
        }

        /// <summary>
        /// Update Artifact Update an artifact in the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to update.</param>
        /// <param name="artifactUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> UpdateArtifactWithHttpInfo(Guid id, ArtifactUpdate artifactUpdate)
        {
            // verify the required parameter 'artifactUpdate' is set
            if (artifactUpdate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'artifactUpdate' when calling ArtifactsApi->UpdateArtifact");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = artifactUpdate;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/artifacts/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateArtifact", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Artifact Update an artifact in the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to update.</param>
        /// <param name="artifactUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateArtifactAsync(Guid id, ArtifactUpdate artifactUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateArtifactWithHttpInfoAsync(id, artifactUpdate, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Artifact Update an artifact in the database.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the artifact to update.</param>
        /// <param name="artifactUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> UpdateArtifactWithHttpInfoAsync(Guid id, ArtifactUpdate artifactUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'artifactUpdate' is set
            if (artifactUpdate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'artifactUpdate' when calling ArtifactsApi->UpdateArtifact");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = artifactUpdate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/artifacts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateArtifact", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
