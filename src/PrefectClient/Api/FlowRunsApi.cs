/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using PrefectClient.Client;
using PrefectClient.Model;

namespace PrefectClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFlowRunsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Average Flow Run Lateness
        /// </summary>
        /// <remarks>
        /// Query for average flow-run lateness in seconds.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="averageFlowRunLatenessRequest"> (optional)</param>
        /// <returns>decimal</returns>
        decimal AverageFlowRunLateness(AverageFlowRunLatenessRequest averageFlowRunLatenessRequest = default(AverageFlowRunLatenessRequest));

        /// <summary>
        /// Average Flow Run Lateness
        /// </summary>
        /// <remarks>
        /// Query for average flow-run lateness in seconds.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="averageFlowRunLatenessRequest"> (optional)</param>
        /// <returns>ApiResponse of decimal</returns>
        ApiResponse<decimal> AverageFlowRunLatenessWithHttpInfo(AverageFlowRunLatenessRequest averageFlowRunLatenessRequest = default(AverageFlowRunLatenessRequest));
        /// <summary>
        /// Count Flow Runs
        /// </summary>
        /// <remarks>
        /// Query for flow runs.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countFlowRunsRequest"> (optional)</param>
        /// <returns>int</returns>
        int CountFlowRuns(CountFlowRunsRequest countFlowRunsRequest = default(CountFlowRunsRequest));

        /// <summary>
        /// Count Flow Runs
        /// </summary>
        /// <remarks>
        /// Query for flow runs.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countFlowRunsRequest"> (optional)</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> CountFlowRunsWithHttpInfo(CountFlowRunsRequest countFlowRunsRequest = default(CountFlowRunsRequest));
        /// <summary>
        /// Create Flow Run
        /// </summary>
        /// <remarks>
        /// Create a flow run. If a flow run with the same flow_id and\\nidempotency key already exists, the existing flow run will be returned.\\n\\nIf no state is provided, the flow run will be created in a PENDING state.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowRunCreate"></param>
        /// <returns>FlowRunResponse</returns>
        FlowRunResponse CreateFlowRun(FlowRunCreate flowRunCreate);

        /// <summary>
        /// Create Flow Run
        /// </summary>
        /// <remarks>
        /// Create a flow run. If a flow run with the same flow_id and\\nidempotency key already exists, the existing flow run will be returned.\\n\\nIf no state is provided, the flow run will be created in a PENDING state.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowRunCreate"></param>
        /// <returns>ApiResponse of FlowRunResponse</returns>
        ApiResponse<FlowRunResponse> CreateFlowRunWithHttpInfo(FlowRunCreate flowRunCreate);
        /// <summary>
        /// Delete Flow Run
        /// </summary>
        /// <remarks>
        /// Delete a flow run by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <returns></returns>
        void DeleteFlowRun(Guid id);

        /// <summary>
        /// Delete Flow Run
        /// </summary>
        /// <remarks>
        /// Delete a flow run by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFlowRunWithHttpInfo(Guid id);
        /// <summary>
        /// Flow Run History
        /// </summary>
        /// <remarks>
        /// Query for flow run history data across a given range and interval.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowRunHistoryRequest"></param>
        /// <returns>List&lt;HistoryResponse&gt;</returns>
        List<HistoryResponse> FlowRunHistory(FlowRunHistoryRequest flowRunHistoryRequest);

        /// <summary>
        /// Flow Run History
        /// </summary>
        /// <remarks>
        /// Query for flow run history data across a given range and interval.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowRunHistoryRequest"></param>
        /// <returns>ApiResponse of List&lt;HistoryResponse&gt;</returns>
        ApiResponse<List<HistoryResponse>> FlowRunHistoryWithHttpInfo(FlowRunHistoryRequest flowRunHistoryRequest);
        /// <summary>
        /// Read Flow Run
        /// </summary>
        /// <remarks>
        /// Get a flow run by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <returns>FlowRunResponse</returns>
        FlowRunResponse ReadFlowRun(Guid id);

        /// <summary>
        /// Read Flow Run
        /// </summary>
        /// <remarks>
        /// Get a flow run by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <returns>ApiResponse of FlowRunResponse</returns>
        ApiResponse<FlowRunResponse> ReadFlowRunWithHttpInfo(Guid id);
        /// <summary>
        /// Read Flow Run Graph
        /// </summary>
        /// <remarks>
        /// Get a task run dependency map for a given flow run.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <returns>List&lt;DependencyResult&gt;</returns>
        List<DependencyResult> ReadFlowRunGraph(Guid id);

        /// <summary>
        /// Read Flow Run Graph
        /// </summary>
        /// <remarks>
        /// Get a task run dependency map for a given flow run.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <returns>ApiResponse of List&lt;DependencyResult&gt;</returns>
        ApiResponse<List<DependencyResult>> ReadFlowRunGraphWithHttpInfo(Guid id);
        /// <summary>
        /// Read Flow Run History
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readFlowRunHistoryRequest"> (optional)</param>
        /// <returns>List&lt;SimpleFlowRun&gt;</returns>
        List<SimpleFlowRun> ReadFlowRunHistory(ReadFlowRunHistoryRequest readFlowRunHistoryRequest = default(ReadFlowRunHistoryRequest));

        /// <summary>
        /// Read Flow Run History
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readFlowRunHistoryRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;SimpleFlowRun&gt;</returns>
        ApiResponse<List<SimpleFlowRun>> ReadFlowRunHistoryWithHttpInfo(ReadFlowRunHistoryRequest readFlowRunHistoryRequest = default(ReadFlowRunHistoryRequest));
        /// <summary>
        /// Read Flow Runs
        /// </summary>
        /// <remarks>
        /// Query for flow runs.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readFlowRunsRequest"> (optional)</param>
        /// <returns>List&lt;FlowRunResponse&gt;</returns>
        List<FlowRunResponse> ReadFlowRuns(ReadFlowRunsRequest readFlowRunsRequest = default(ReadFlowRunsRequest));

        /// <summary>
        /// Read Flow Runs
        /// </summary>
        /// <remarks>
        /// Query for flow runs.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readFlowRunsRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;FlowRunResponse&gt;</returns>
        ApiResponse<List<FlowRunResponse>> ReadFlowRunsWithHttpInfo(ReadFlowRunsRequest readFlowRunsRequest = default(ReadFlowRunsRequest));
        /// <summary>
        /// Resume Flow Run
        /// </summary>
        /// <remarks>
        /// Resume a paused flow run.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <returns>OrchestrationResult</returns>
        OrchestrationResult ResumeFlowRun(Guid id);

        /// <summary>
        /// Resume Flow Run
        /// </summary>
        /// <remarks>
        /// Resume a paused flow run.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <returns>ApiResponse of OrchestrationResult</returns>
        ApiResponse<OrchestrationResult> ResumeFlowRunWithHttpInfo(Guid id);
        /// <summary>
        /// Set Flow Run State
        /// </summary>
        /// <remarks>
        /// Set a flow run state, invoking any orchestration rules.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="setFlowRunStateRequest"></param>
        /// <returns>OrchestrationResult</returns>
        OrchestrationResult SetFlowRunState(Guid id, SetFlowRunStateRequest setFlowRunStateRequest);

        /// <summary>
        /// Set Flow Run State
        /// </summary>
        /// <remarks>
        /// Set a flow run state, invoking any orchestration rules.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="setFlowRunStateRequest"></param>
        /// <returns>ApiResponse of OrchestrationResult</returns>
        ApiResponse<OrchestrationResult> SetFlowRunStateWithHttpInfo(Guid id, SetFlowRunStateRequest setFlowRunStateRequest);
        /// <summary>
        /// Update Flow Run
        /// </summary>
        /// <remarks>
        /// Updates a flow run.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="flowRunUpdate"></param>
        /// <returns></returns>
        void UpdateFlowRun(Guid id, FlowRunUpdate flowRunUpdate);

        /// <summary>
        /// Update Flow Run
        /// </summary>
        /// <remarks>
        /// Updates a flow run.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="flowRunUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateFlowRunWithHttpInfo(Guid id, FlowRunUpdate flowRunUpdate);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFlowRunsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Average Flow Run Lateness
        /// </summary>
        /// <remarks>
        /// Query for average flow-run lateness in seconds.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="averageFlowRunLatenessRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of decimal</returns>
        System.Threading.Tasks.Task<decimal> AverageFlowRunLatenessAsync(AverageFlowRunLatenessRequest averageFlowRunLatenessRequest = default(AverageFlowRunLatenessRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Average Flow Run Lateness
        /// </summary>
        /// <remarks>
        /// Query for average flow-run lateness in seconds.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="averageFlowRunLatenessRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal>> AverageFlowRunLatenessWithHttpInfoAsync(AverageFlowRunLatenessRequest averageFlowRunLatenessRequest = default(AverageFlowRunLatenessRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Count Flow Runs
        /// </summary>
        /// <remarks>
        /// Query for flow runs.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countFlowRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> CountFlowRunsAsync(CountFlowRunsRequest countFlowRunsRequest = default(CountFlowRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Count Flow Runs
        /// </summary>
        /// <remarks>
        /// Query for flow runs.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countFlowRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> CountFlowRunsWithHttpInfoAsync(CountFlowRunsRequest countFlowRunsRequest = default(CountFlowRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Flow Run
        /// </summary>
        /// <remarks>
        /// Create a flow run. If a flow run with the same flow_id and\\nidempotency key already exists, the existing flow run will be returned.\\n\\nIf no state is provided, the flow run will be created in a PENDING state.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowRunCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FlowRunResponse</returns>
        System.Threading.Tasks.Task<FlowRunResponse> CreateFlowRunAsync(FlowRunCreate flowRunCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Flow Run
        /// </summary>
        /// <remarks>
        /// Create a flow run. If a flow run with the same flow_id and\\nidempotency key already exists, the existing flow run will be returned.\\n\\nIf no state is provided, the flow run will be created in a PENDING state.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowRunCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FlowRunResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowRunResponse>> CreateFlowRunWithHttpInfoAsync(FlowRunCreate flowRunCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Flow Run
        /// </summary>
        /// <remarks>
        /// Delete a flow run by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFlowRunAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Flow Run
        /// </summary>
        /// <remarks>
        /// Delete a flow run by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFlowRunWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Flow Run History
        /// </summary>
        /// <remarks>
        /// Query for flow run history data across a given range and interval.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowRunHistoryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoryResponse&gt;</returns>
        System.Threading.Tasks.Task<List<HistoryResponse>> FlowRunHistoryAsync(FlowRunHistoryRequest flowRunHistoryRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Flow Run History
        /// </summary>
        /// <remarks>
        /// Query for flow run history data across a given range and interval.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowRunHistoryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoryResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HistoryResponse>>> FlowRunHistoryWithHttpInfoAsync(FlowRunHistoryRequest flowRunHistoryRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Flow Run
        /// </summary>
        /// <remarks>
        /// Get a flow run by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FlowRunResponse</returns>
        System.Threading.Tasks.Task<FlowRunResponse> ReadFlowRunAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Flow Run
        /// </summary>
        /// <remarks>
        /// Get a flow run by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FlowRunResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowRunResponse>> ReadFlowRunWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Flow Run Graph
        /// </summary>
        /// <remarks>
        /// Get a task run dependency map for a given flow run.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DependencyResult&gt;</returns>
        System.Threading.Tasks.Task<List<DependencyResult>> ReadFlowRunGraphAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Flow Run Graph
        /// </summary>
        /// <remarks>
        /// Get a task run dependency map for a given flow run.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DependencyResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DependencyResult>>> ReadFlowRunGraphWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Flow Run History
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readFlowRunHistoryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SimpleFlowRun&gt;</returns>
        System.Threading.Tasks.Task<List<SimpleFlowRun>> ReadFlowRunHistoryAsync(ReadFlowRunHistoryRequest readFlowRunHistoryRequest = default(ReadFlowRunHistoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Flow Run History
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readFlowRunHistoryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SimpleFlowRun&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SimpleFlowRun>>> ReadFlowRunHistoryWithHttpInfoAsync(ReadFlowRunHistoryRequest readFlowRunHistoryRequest = default(ReadFlowRunHistoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Flow Runs
        /// </summary>
        /// <remarks>
        /// Query for flow runs.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readFlowRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FlowRunResponse&gt;</returns>
        System.Threading.Tasks.Task<List<FlowRunResponse>> ReadFlowRunsAsync(ReadFlowRunsRequest readFlowRunsRequest = default(ReadFlowRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Flow Runs
        /// </summary>
        /// <remarks>
        /// Query for flow runs.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readFlowRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FlowRunResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FlowRunResponse>>> ReadFlowRunsWithHttpInfoAsync(ReadFlowRunsRequest readFlowRunsRequest = default(ReadFlowRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resume Flow Run
        /// </summary>
        /// <remarks>
        /// Resume a paused flow run.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrchestrationResult</returns>
        System.Threading.Tasks.Task<OrchestrationResult> ResumeFlowRunAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resume Flow Run
        /// </summary>
        /// <remarks>
        /// Resume a paused flow run.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrchestrationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrchestrationResult>> ResumeFlowRunWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Flow Run State
        /// </summary>
        /// <remarks>
        /// Set a flow run state, invoking any orchestration rules.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="setFlowRunStateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrchestrationResult</returns>
        System.Threading.Tasks.Task<OrchestrationResult> SetFlowRunStateAsync(Guid id, SetFlowRunStateRequest setFlowRunStateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Flow Run State
        /// </summary>
        /// <remarks>
        /// Set a flow run state, invoking any orchestration rules.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="setFlowRunStateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrchestrationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrchestrationResult>> SetFlowRunStateWithHttpInfoAsync(Guid id, SetFlowRunStateRequest setFlowRunStateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Flow Run
        /// </summary>
        /// <remarks>
        /// Updates a flow run.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="flowRunUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateFlowRunAsync(Guid id, FlowRunUpdate flowRunUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Flow Run
        /// </summary>
        /// <remarks>
        /// Updates a flow run.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="flowRunUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFlowRunWithHttpInfoAsync(Guid id, FlowRunUpdate flowRunUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFlowRunsApi : IFlowRunsApiSync, IFlowRunsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FlowRunsApi : IDisposable, IFlowRunsApi
    {
        private PrefectClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FlowRunsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public FlowRunsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FlowRunsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public FlowRunsApi(string basePath)
        {
            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FlowRunsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public FlowRunsApi(PrefectClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FlowRunsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FlowRunsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FlowRunsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FlowRunsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FlowRunsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FlowRunsApi(HttpClient client, PrefectClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FlowRunsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public FlowRunsApi(PrefectClient.Client.ISynchronousClient client, PrefectClient.Client.IAsynchronousClient asyncClient, PrefectClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public PrefectClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PrefectClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PrefectClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PrefectClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PrefectClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Average Flow Run Lateness Query for average flow-run lateness in seconds.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="averageFlowRunLatenessRequest"> (optional)</param>
        /// <returns>decimal</returns>
        public decimal AverageFlowRunLateness(AverageFlowRunLatenessRequest averageFlowRunLatenessRequest = default(AverageFlowRunLatenessRequest))
        {
            PrefectClient.Client.ApiResponse<decimal> localVarResponse = AverageFlowRunLatenessWithHttpInfo(averageFlowRunLatenessRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Average Flow Run Lateness Query for average flow-run lateness in seconds.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="averageFlowRunLatenessRequest"> (optional)</param>
        /// <returns>ApiResponse of decimal</returns>
        public PrefectClient.Client.ApiResponse<decimal> AverageFlowRunLatenessWithHttpInfo(AverageFlowRunLatenessRequest averageFlowRunLatenessRequest = default(AverageFlowRunLatenessRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = averageFlowRunLatenessRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<decimal>("/flow_runs/lateness", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AverageFlowRunLateness", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Average Flow Run Lateness Query for average flow-run lateness in seconds.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="averageFlowRunLatenessRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of decimal</returns>
        public async System.Threading.Tasks.Task<decimal> AverageFlowRunLatenessAsync(AverageFlowRunLatenessRequest averageFlowRunLatenessRequest = default(AverageFlowRunLatenessRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<decimal> localVarResponse = await AverageFlowRunLatenessWithHttpInfoAsync(averageFlowRunLatenessRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Average Flow Run Lateness Query for average flow-run lateness in seconds.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="averageFlowRunLatenessRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<decimal>> AverageFlowRunLatenessWithHttpInfoAsync(AverageFlowRunLatenessRequest averageFlowRunLatenessRequest = default(AverageFlowRunLatenessRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = averageFlowRunLatenessRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<decimal>("/flow_runs/lateness", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AverageFlowRunLateness", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Count Flow Runs Query for flow runs.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countFlowRunsRequest"> (optional)</param>
        /// <returns>int</returns>
        public int CountFlowRuns(CountFlowRunsRequest countFlowRunsRequest = default(CountFlowRunsRequest))
        {
            PrefectClient.Client.ApiResponse<int> localVarResponse = CountFlowRunsWithHttpInfo(countFlowRunsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count Flow Runs Query for flow runs.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countFlowRunsRequest"> (optional)</param>
        /// <returns>ApiResponse of int</returns>
        public PrefectClient.Client.ApiResponse<int> CountFlowRunsWithHttpInfo(CountFlowRunsRequest countFlowRunsRequest = default(CountFlowRunsRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = countFlowRunsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<int>("/flow_runs/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountFlowRuns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Count Flow Runs Query for flow runs.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countFlowRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> CountFlowRunsAsync(CountFlowRunsRequest countFlowRunsRequest = default(CountFlowRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<int> localVarResponse = await CountFlowRunsWithHttpInfoAsync(countFlowRunsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count Flow Runs Query for flow runs.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countFlowRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<int>> CountFlowRunsWithHttpInfoAsync(CountFlowRunsRequest countFlowRunsRequest = default(CountFlowRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = countFlowRunsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<int>("/flow_runs/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountFlowRuns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Flow Run Create a flow run. If a flow run with the same flow_id and\\nidempotency key already exists, the existing flow run will be returned.\\n\\nIf no state is provided, the flow run will be created in a PENDING state.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowRunCreate"></param>
        /// <returns>FlowRunResponse</returns>
        public FlowRunResponse CreateFlowRun(FlowRunCreate flowRunCreate)
        {
            PrefectClient.Client.ApiResponse<FlowRunResponse> localVarResponse = CreateFlowRunWithHttpInfo(flowRunCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Flow Run Create a flow run. If a flow run with the same flow_id and\\nidempotency key already exists, the existing flow run will be returned.\\n\\nIf no state is provided, the flow run will be created in a PENDING state.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowRunCreate"></param>
        /// <returns>ApiResponse of FlowRunResponse</returns>
        public PrefectClient.Client.ApiResponse<FlowRunResponse> CreateFlowRunWithHttpInfo(FlowRunCreate flowRunCreate)
        {
            // verify the required parameter 'flowRunCreate' is set
            if (flowRunCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'flowRunCreate' when calling FlowRunsApi->CreateFlowRun");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = flowRunCreate;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FlowRunResponse>("/flow_runs/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFlowRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Flow Run Create a flow run. If a flow run with the same flow_id and\\nidempotency key already exists, the existing flow run will be returned.\\n\\nIf no state is provided, the flow run will be created in a PENDING state.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowRunCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FlowRunResponse</returns>
        public async System.Threading.Tasks.Task<FlowRunResponse> CreateFlowRunAsync(FlowRunCreate flowRunCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<FlowRunResponse> localVarResponse = await CreateFlowRunWithHttpInfoAsync(flowRunCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Flow Run Create a flow run. If a flow run with the same flow_id and\\nidempotency key already exists, the existing flow run will be returned.\\n\\nIf no state is provided, the flow run will be created in a PENDING state.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowRunCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FlowRunResponse)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<FlowRunResponse>> CreateFlowRunWithHttpInfoAsync(FlowRunCreate flowRunCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'flowRunCreate' is set
            if (flowRunCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'flowRunCreate' when calling FlowRunsApi->CreateFlowRun");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = flowRunCreate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FlowRunResponse>("/flow_runs/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFlowRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Flow Run Delete a flow run by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <returns></returns>
        public void DeleteFlowRun(Guid id)
        {
            DeleteFlowRunWithHttpInfo(id);
        }

        /// <summary>
        /// Delete Flow Run Delete a flow run by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> DeleteFlowRunWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/flow_runs/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFlowRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Flow Run Delete a flow run by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFlowRunAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteFlowRunWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Flow Run Delete a flow run by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> DeleteFlowRunWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/flow_runs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFlowRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Flow Run History Query for flow run history data across a given range and interval.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowRunHistoryRequest"></param>
        /// <returns>List&lt;HistoryResponse&gt;</returns>
        public List<HistoryResponse> FlowRunHistory(FlowRunHistoryRequest flowRunHistoryRequest)
        {
            PrefectClient.Client.ApiResponse<List<HistoryResponse>> localVarResponse = FlowRunHistoryWithHttpInfo(flowRunHistoryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Flow Run History Query for flow run history data across a given range and interval.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowRunHistoryRequest"></param>
        /// <returns>ApiResponse of List&lt;HistoryResponse&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<HistoryResponse>> FlowRunHistoryWithHttpInfo(FlowRunHistoryRequest flowRunHistoryRequest)
        {
            // verify the required parameter 'flowRunHistoryRequest' is set
            if (flowRunHistoryRequest == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'flowRunHistoryRequest' when calling FlowRunsApi->FlowRunHistory");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = flowRunHistoryRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<HistoryResponse>>("/flow_runs/history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FlowRunHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Flow Run History Query for flow run history data across a given range and interval.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowRunHistoryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoryResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<HistoryResponse>> FlowRunHistoryAsync(FlowRunHistoryRequest flowRunHistoryRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<HistoryResponse>> localVarResponse = await FlowRunHistoryWithHttpInfoAsync(flowRunHistoryRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Flow Run History Query for flow run history data across a given range and interval.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowRunHistoryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoryResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<HistoryResponse>>> FlowRunHistoryWithHttpInfoAsync(FlowRunHistoryRequest flowRunHistoryRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'flowRunHistoryRequest' is set
            if (flowRunHistoryRequest == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'flowRunHistoryRequest' when calling FlowRunsApi->FlowRunHistory");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = flowRunHistoryRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<HistoryResponse>>("/flow_runs/history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FlowRunHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Flow Run Get a flow run by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <returns>FlowRunResponse</returns>
        public FlowRunResponse ReadFlowRun(Guid id)
        {
            PrefectClient.Client.ApiResponse<FlowRunResponse> localVarResponse = ReadFlowRunWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Flow Run Get a flow run by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <returns>ApiResponse of FlowRunResponse</returns>
        public PrefectClient.Client.ApiResponse<FlowRunResponse> ReadFlowRunWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FlowRunResponse>("/flow_runs/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadFlowRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Flow Run Get a flow run by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FlowRunResponse</returns>
        public async System.Threading.Tasks.Task<FlowRunResponse> ReadFlowRunAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<FlowRunResponse> localVarResponse = await ReadFlowRunWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Flow Run Get a flow run by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FlowRunResponse)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<FlowRunResponse>> ReadFlowRunWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FlowRunResponse>("/flow_runs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadFlowRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Flow Run Graph Get a task run dependency map for a given flow run.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <returns>List&lt;DependencyResult&gt;</returns>
        public List<DependencyResult> ReadFlowRunGraph(Guid id)
        {
            PrefectClient.Client.ApiResponse<List<DependencyResult>> localVarResponse = ReadFlowRunGraphWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Flow Run Graph Get a task run dependency map for a given flow run.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <returns>ApiResponse of List&lt;DependencyResult&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<DependencyResult>> ReadFlowRunGraphWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DependencyResult>>("/flow_runs/{id}/graph", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadFlowRunGraph", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Flow Run Graph Get a task run dependency map for a given flow run.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DependencyResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<DependencyResult>> ReadFlowRunGraphAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<DependencyResult>> localVarResponse = await ReadFlowRunGraphWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Flow Run Graph Get a task run dependency map for a given flow run.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DependencyResult&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<DependencyResult>>> ReadFlowRunGraphWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DependencyResult>>("/flow_runs/{id}/graph", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadFlowRunGraph", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Flow Run History 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readFlowRunHistoryRequest"> (optional)</param>
        /// <returns>List&lt;SimpleFlowRun&gt;</returns>
        public List<SimpleFlowRun> ReadFlowRunHistory(ReadFlowRunHistoryRequest readFlowRunHistoryRequest = default(ReadFlowRunHistoryRequest))
        {
            PrefectClient.Client.ApiResponse<List<SimpleFlowRun>> localVarResponse = ReadFlowRunHistoryWithHttpInfo(readFlowRunHistoryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Flow Run History 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readFlowRunHistoryRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;SimpleFlowRun&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<SimpleFlowRun>> ReadFlowRunHistoryWithHttpInfo(ReadFlowRunHistoryRequest readFlowRunHistoryRequest = default(ReadFlowRunHistoryRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readFlowRunHistoryRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SimpleFlowRun>>("/ui/flow_runs/history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadFlowRunHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Flow Run History 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readFlowRunHistoryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SimpleFlowRun&gt;</returns>
        public async System.Threading.Tasks.Task<List<SimpleFlowRun>> ReadFlowRunHistoryAsync(ReadFlowRunHistoryRequest readFlowRunHistoryRequest = default(ReadFlowRunHistoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<SimpleFlowRun>> localVarResponse = await ReadFlowRunHistoryWithHttpInfoAsync(readFlowRunHistoryRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Flow Run History 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readFlowRunHistoryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SimpleFlowRun&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<SimpleFlowRun>>> ReadFlowRunHistoryWithHttpInfoAsync(ReadFlowRunHistoryRequest readFlowRunHistoryRequest = default(ReadFlowRunHistoryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readFlowRunHistoryRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SimpleFlowRun>>("/ui/flow_runs/history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadFlowRunHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Flow Runs Query for flow runs.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readFlowRunsRequest"> (optional)</param>
        /// <returns>List&lt;FlowRunResponse&gt;</returns>
        public List<FlowRunResponse> ReadFlowRuns(ReadFlowRunsRequest readFlowRunsRequest = default(ReadFlowRunsRequest))
        {
            PrefectClient.Client.ApiResponse<List<FlowRunResponse>> localVarResponse = ReadFlowRunsWithHttpInfo(readFlowRunsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Flow Runs Query for flow runs.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readFlowRunsRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;FlowRunResponse&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<FlowRunResponse>> ReadFlowRunsWithHttpInfo(ReadFlowRunsRequest readFlowRunsRequest = default(ReadFlowRunsRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readFlowRunsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<FlowRunResponse>>("/flow_runs/filter", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadFlowRuns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Flow Runs Query for flow runs.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readFlowRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FlowRunResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<FlowRunResponse>> ReadFlowRunsAsync(ReadFlowRunsRequest readFlowRunsRequest = default(ReadFlowRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<FlowRunResponse>> localVarResponse = await ReadFlowRunsWithHttpInfoAsync(readFlowRunsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Flow Runs Query for flow runs.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readFlowRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FlowRunResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<FlowRunResponse>>> ReadFlowRunsWithHttpInfoAsync(ReadFlowRunsRequest readFlowRunsRequest = default(ReadFlowRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readFlowRunsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<FlowRunResponse>>("/flow_runs/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadFlowRuns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resume Flow Run Resume a paused flow run.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <returns>OrchestrationResult</returns>
        public OrchestrationResult ResumeFlowRun(Guid id)
        {
            PrefectClient.Client.ApiResponse<OrchestrationResult> localVarResponse = ResumeFlowRunWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resume Flow Run Resume a paused flow run.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <returns>ApiResponse of OrchestrationResult</returns>
        public PrefectClient.Client.ApiResponse<OrchestrationResult> ResumeFlowRunWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrchestrationResult>("/flow_runs/{id}/resume", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeFlowRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resume Flow Run Resume a paused flow run.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrchestrationResult</returns>
        public async System.Threading.Tasks.Task<OrchestrationResult> ResumeFlowRunAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<OrchestrationResult> localVarResponse = await ResumeFlowRunWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resume Flow Run Resume a paused flow run.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrchestrationResult)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<OrchestrationResult>> ResumeFlowRunWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrchestrationResult>("/flow_runs/{id}/resume", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeFlowRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Flow Run State Set a flow run state, invoking any orchestration rules.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="setFlowRunStateRequest"></param>
        /// <returns>OrchestrationResult</returns>
        public OrchestrationResult SetFlowRunState(Guid id, SetFlowRunStateRequest setFlowRunStateRequest)
        {
            PrefectClient.Client.ApiResponse<OrchestrationResult> localVarResponse = SetFlowRunStateWithHttpInfo(id, setFlowRunStateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Flow Run State Set a flow run state, invoking any orchestration rules.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="setFlowRunStateRequest"></param>
        /// <returns>ApiResponse of OrchestrationResult</returns>
        public PrefectClient.Client.ApiResponse<OrchestrationResult> SetFlowRunStateWithHttpInfo(Guid id, SetFlowRunStateRequest setFlowRunStateRequest)
        {
            // verify the required parameter 'setFlowRunStateRequest' is set
            if (setFlowRunStateRequest == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'setFlowRunStateRequest' when calling FlowRunsApi->SetFlowRunState");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = setFlowRunStateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrchestrationResult>("/flow_runs/{id}/set_state", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetFlowRunState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Flow Run State Set a flow run state, invoking any orchestration rules.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="setFlowRunStateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrchestrationResult</returns>
        public async System.Threading.Tasks.Task<OrchestrationResult> SetFlowRunStateAsync(Guid id, SetFlowRunStateRequest setFlowRunStateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<OrchestrationResult> localVarResponse = await SetFlowRunStateWithHttpInfoAsync(id, setFlowRunStateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Flow Run State Set a flow run state, invoking any orchestration rules.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="setFlowRunStateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrchestrationResult)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<OrchestrationResult>> SetFlowRunStateWithHttpInfoAsync(Guid id, SetFlowRunStateRequest setFlowRunStateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setFlowRunStateRequest' is set
            if (setFlowRunStateRequest == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'setFlowRunStateRequest' when calling FlowRunsApi->SetFlowRunState");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = setFlowRunStateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrchestrationResult>("/flow_runs/{id}/set_state", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetFlowRunState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Flow Run Updates a flow run.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="flowRunUpdate"></param>
        /// <returns></returns>
        public void UpdateFlowRun(Guid id, FlowRunUpdate flowRunUpdate)
        {
            UpdateFlowRunWithHttpInfo(id, flowRunUpdate);
        }

        /// <summary>
        /// Update Flow Run Updates a flow run.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="flowRunUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> UpdateFlowRunWithHttpInfo(Guid id, FlowRunUpdate flowRunUpdate)
        {
            // verify the required parameter 'flowRunUpdate' is set
            if (flowRunUpdate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'flowRunUpdate' when calling FlowRunsApi->UpdateFlowRun");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = flowRunUpdate;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/flow_runs/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFlowRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Flow Run Updates a flow run.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="flowRunUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateFlowRunAsync(Guid id, FlowRunUpdate flowRunUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateFlowRunWithHttpInfoAsync(id, flowRunUpdate, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Flow Run Updates a flow run.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The flow run id</param>
        /// <param name="flowRunUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> UpdateFlowRunWithHttpInfoAsync(Guid id, FlowRunUpdate flowRunUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'flowRunUpdate' is set
            if (flowRunUpdate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'flowRunUpdate' when calling FlowRunsApi->UpdateFlowRun");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = flowRunUpdate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/flow_runs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFlowRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
