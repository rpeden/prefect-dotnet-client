/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using PrefectClient.Client;
using PrefectClient.Model;

namespace PrefectClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Clear Database
        /// </summary>
        /// <remarks>
        /// Clear all database tables without dropping them.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearDatabaseRequest"> (optional)</param>
        /// <returns></returns>
        void ClearDatabase(ClearDatabaseRequest clearDatabaseRequest = default(ClearDatabaseRequest));

        /// <summary>
        /// Clear Database
        /// </summary>
        /// <remarks>
        /// Clear all database tables without dropping them.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearDatabaseRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClearDatabaseWithHttpInfo(ClearDatabaseRequest clearDatabaseRequest = default(ClearDatabaseRequest));
        /// <summary>
        /// Create Database
        /// </summary>
        /// <remarks>
        /// Create all database objects.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDatabaseRequest"> (optional)</param>
        /// <returns></returns>
        void CreateDatabase(CreateDatabaseRequest createDatabaseRequest = default(CreateDatabaseRequest));

        /// <summary>
        /// Create Database
        /// </summary>
        /// <remarks>
        /// Create all database objects.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDatabaseRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateDatabaseWithHttpInfo(CreateDatabaseRequest createDatabaseRequest = default(CreateDatabaseRequest));
        /// <summary>
        /// Drop Database
        /// </summary>
        /// <remarks>
        /// Drop all database objects.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dropDatabaseRequest"> (optional)</param>
        /// <returns></returns>
        void DropDatabase(DropDatabaseRequest dropDatabaseRequest = default(DropDatabaseRequest));

        /// <summary>
        /// Drop Database
        /// </summary>
        /// <remarks>
        /// Drop all database objects.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dropDatabaseRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DropDatabaseWithHttpInfo(DropDatabaseRequest dropDatabaseRequest = default(DropDatabaseRequest));
        /// <summary>
        /// Read Settings
        /// </summary>
        /// <remarks>
        /// Get the current Prefect REST API settings.\\n\\nSecret setting values will be obfuscated.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Settings</returns>
        Settings ReadSettings();

        /// <summary>
        /// Read Settings
        /// </summary>
        /// <remarks>
        /// Get the current Prefect REST API settings.\\n\\nSecret setting values will be obfuscated.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Settings</returns>
        ApiResponse<Settings> ReadSettingsWithHttpInfo();
        /// <summary>
        /// Read Version
        /// </summary>
        /// <remarks>
        /// Returns the Prefect version number
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string ReadVersion();

        /// <summary>
        /// Read Version
        /// </summary>
        /// <remarks>
        /// Returns the Prefect version number
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReadVersionWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Clear Database
        /// </summary>
        /// <remarks>
        /// Clear all database tables without dropping them.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearDatabaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClearDatabaseAsync(ClearDatabaseRequest clearDatabaseRequest = default(ClearDatabaseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clear Database
        /// </summary>
        /// <remarks>
        /// Clear all database tables without dropping them.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearDatabaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearDatabaseWithHttpInfoAsync(ClearDatabaseRequest clearDatabaseRequest = default(ClearDatabaseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Database
        /// </summary>
        /// <remarks>
        /// Create all database objects.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDatabaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateDatabaseAsync(CreateDatabaseRequest createDatabaseRequest = default(CreateDatabaseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Database
        /// </summary>
        /// <remarks>
        /// Create all database objects.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDatabaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateDatabaseWithHttpInfoAsync(CreateDatabaseRequest createDatabaseRequest = default(CreateDatabaseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Drop Database
        /// </summary>
        /// <remarks>
        /// Drop all database objects.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dropDatabaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DropDatabaseAsync(DropDatabaseRequest dropDatabaseRequest = default(DropDatabaseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Drop Database
        /// </summary>
        /// <remarks>
        /// Drop all database objects.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dropDatabaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DropDatabaseWithHttpInfoAsync(DropDatabaseRequest dropDatabaseRequest = default(DropDatabaseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Settings
        /// </summary>
        /// <remarks>
        /// Get the current Prefect REST API settings.\\n\\nSecret setting values will be obfuscated.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Settings</returns>
        System.Threading.Tasks.Task<Settings> ReadSettingsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Settings
        /// </summary>
        /// <remarks>
        /// Get the current Prefect REST API settings.\\n\\nSecret setting values will be obfuscated.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Settings)</returns>
        System.Threading.Tasks.Task<ApiResponse<Settings>> ReadSettingsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Version
        /// </summary>
        /// <remarks>
        /// Returns the Prefect version number
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReadVersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Version
        /// </summary>
        /// <remarks>
        /// Returns the Prefect version number
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReadVersionWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminApi : IAdminApiSync, IAdminApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AdminApi : IDisposable, IAdminApi
    {
        private PrefectClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AdminApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AdminApi(string basePath)
        {
            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AdminApi(PrefectClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AdminApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AdminApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AdminApi(HttpClient client, PrefectClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AdminApi(PrefectClient.Client.ISynchronousClient client, PrefectClient.Client.IAsynchronousClient asyncClient, PrefectClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public PrefectClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PrefectClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PrefectClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PrefectClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PrefectClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Clear Database Clear all database tables without dropping them.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearDatabaseRequest"> (optional)</param>
        /// <returns></returns>
        public void ClearDatabase(ClearDatabaseRequest clearDatabaseRequest = default(ClearDatabaseRequest))
        {
            ClearDatabaseWithHttpInfo(clearDatabaseRequest);
        }

        /// <summary>
        /// Clear Database Clear all database tables without dropping them.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearDatabaseRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> ClearDatabaseWithHttpInfo(ClearDatabaseRequest clearDatabaseRequest = default(ClearDatabaseRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = clearDatabaseRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/admin/database/clear", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearDatabase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear Database Clear all database tables without dropping them.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearDatabaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClearDatabaseAsync(ClearDatabaseRequest clearDatabaseRequest = default(ClearDatabaseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ClearDatabaseWithHttpInfoAsync(clearDatabaseRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Clear Database Clear all database tables without dropping them.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearDatabaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> ClearDatabaseWithHttpInfoAsync(ClearDatabaseRequest clearDatabaseRequest = default(ClearDatabaseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = clearDatabaseRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/admin/database/clear", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearDatabase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Database Create all database objects.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDatabaseRequest"> (optional)</param>
        /// <returns></returns>
        public void CreateDatabase(CreateDatabaseRequest createDatabaseRequest = default(CreateDatabaseRequest))
        {
            CreateDatabaseWithHttpInfo(createDatabaseRequest);
        }

        /// <summary>
        /// Create Database Create all database objects.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDatabaseRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> CreateDatabaseWithHttpInfo(CreateDatabaseRequest createDatabaseRequest = default(CreateDatabaseRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createDatabaseRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/admin/database/create", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDatabase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Database Create all database objects.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDatabaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateDatabaseAsync(CreateDatabaseRequest createDatabaseRequest = default(CreateDatabaseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateDatabaseWithHttpInfoAsync(createDatabaseRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create Database Create all database objects.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDatabaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> CreateDatabaseWithHttpInfoAsync(CreateDatabaseRequest createDatabaseRequest = default(CreateDatabaseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createDatabaseRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/admin/database/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDatabase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Drop Database Drop all database objects.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dropDatabaseRequest"> (optional)</param>
        /// <returns></returns>
        public void DropDatabase(DropDatabaseRequest dropDatabaseRequest = default(DropDatabaseRequest))
        {
            DropDatabaseWithHttpInfo(dropDatabaseRequest);
        }

        /// <summary>
        /// Drop Database Drop all database objects.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dropDatabaseRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> DropDatabaseWithHttpInfo(DropDatabaseRequest dropDatabaseRequest = default(DropDatabaseRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = dropDatabaseRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/admin/database/drop", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DropDatabase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Drop Database Drop all database objects.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dropDatabaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DropDatabaseAsync(DropDatabaseRequest dropDatabaseRequest = default(DropDatabaseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DropDatabaseWithHttpInfoAsync(dropDatabaseRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Drop Database Drop all database objects.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dropDatabaseRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> DropDatabaseWithHttpInfoAsync(DropDatabaseRequest dropDatabaseRequest = default(DropDatabaseRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = dropDatabaseRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/admin/database/drop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DropDatabase", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Settings Get the current Prefect REST API settings.\\n\\nSecret setting values will be obfuscated.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Settings</returns>
        public Settings ReadSettings()
        {
            PrefectClient.Client.ApiResponse<Settings> localVarResponse = ReadSettingsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Settings Get the current Prefect REST API settings.\\n\\nSecret setting values will be obfuscated.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Settings</returns>
        public PrefectClient.Client.ApiResponse<Settings> ReadSettingsWithHttpInfo()
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Settings>("/admin/settings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Settings Get the current Prefect REST API settings.\\n\\nSecret setting values will be obfuscated.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Settings</returns>
        public async System.Threading.Tasks.Task<Settings> ReadSettingsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<Settings> localVarResponse = await ReadSettingsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Settings Get the current Prefect REST API settings.\\n\\nSecret setting values will be obfuscated.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Settings)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Settings>> ReadSettingsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Settings>("/admin/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Version Returns the Prefect version number
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string ReadVersion()
        {
            PrefectClient.Client.ApiResponse<string> localVarResponse = ReadVersionWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Version Returns the Prefect version number
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public PrefectClient.Client.ApiResponse<string> ReadVersionWithHttpInfo()
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/admin/version", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Version Returns the Prefect version number
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReadVersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<string> localVarResponse = await ReadVersionWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Version Returns the Prefect version number
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<string>> ReadVersionWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/admin/version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
