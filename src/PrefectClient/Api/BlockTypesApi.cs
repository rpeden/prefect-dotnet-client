/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using PrefectClient.Client;
using PrefectClient.Model;

namespace PrefectClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlockTypesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Block Type
        /// </summary>
        /// <remarks>
        /// Create a new block type
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockTypeCreate"></param>
        /// <returns>BlockType</returns>
        BlockType CreateBlockType(BlockTypeCreate blockTypeCreate);

        /// <summary>
        /// Create Block Type
        /// </summary>
        /// <remarks>
        /// Create a new block type
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockTypeCreate"></param>
        /// <returns>ApiResponse of BlockType</returns>
        ApiResponse<BlockType> CreateBlockTypeWithHttpInfo(BlockTypeCreate blockTypeCreate);
        /// <summary>
        /// Delete Block Type
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <returns></returns>
        void DeleteBlockType(Guid id);

        /// <summary>
        /// Delete Block Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBlockTypeWithHttpInfo(Guid id);
        /// <summary>
        /// Install System Block Types
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object InstallSystemBlockTypes();

        /// <summary>
        /// Install System Block Types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> InstallSystemBlockTypesWithHttpInfo();
        /// <summary>
        /// Read Block Document By Name For Block Type
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="blockDocumentName">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <returns>BlockDocument</returns>
        BlockDocument ReadBlockDocumentByNameForBlockType(string slug, string blockDocumentName, bool? includeSecrets = default(bool?));

        /// <summary>
        /// Read Block Document By Name For Block Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="blockDocumentName">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <returns>ApiResponse of BlockDocument</returns>
        ApiResponse<BlockDocument> ReadBlockDocumentByNameForBlockTypeWithHttpInfo(string slug, string blockDocumentName, bool? includeSecrets = default(bool?));
        /// <summary>
        /// Read Block Document By Name For Block Type
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="blockDocumentName">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <returns>BlockDocument</returns>
        BlockDocument ReadBlockDocumentByNameForBlockType_0(string slug, string blockDocumentName, bool? includeSecrets = default(bool?));

        /// <summary>
        /// Read Block Document By Name For Block Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="blockDocumentName">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <returns>ApiResponse of BlockDocument</returns>
        ApiResponse<BlockDocument> ReadBlockDocumentByNameForBlockType_0WithHttpInfo(string slug, string blockDocumentName, bool? includeSecrets = default(bool?));
        /// <summary>
        /// Read Block Documents For Block Type
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <returns>List&lt;BlockDocument&gt;</returns>
        List<BlockDocument> ReadBlockDocumentsForBlockType(string slug, bool? includeSecrets = default(bool?));

        /// <summary>
        /// Read Block Documents For Block Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;BlockDocument&gt;</returns>
        ApiResponse<List<BlockDocument>> ReadBlockDocumentsForBlockTypeWithHttpInfo(string slug, bool? includeSecrets = default(bool?));
        /// <summary>
        /// Read Block Documents For Block Type
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <returns>List&lt;BlockDocument&gt;</returns>
        List<BlockDocument> ReadBlockDocumentsForBlockType_0(string slug, bool? includeSecrets = default(bool?));

        /// <summary>
        /// Read Block Documents For Block Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;BlockDocument&gt;</returns>
        ApiResponse<List<BlockDocument>> ReadBlockDocumentsForBlockType_0WithHttpInfo(string slug, bool? includeSecrets = default(bool?));
        /// <summary>
        /// Read Block Type By Id
        /// </summary>
        /// <remarks>
        /// Get a block type by ID.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <returns>BlockType</returns>
        BlockType ReadBlockTypeById(Guid id);

        /// <summary>
        /// Read Block Type By Id
        /// </summary>
        /// <remarks>
        /// Get a block type by ID.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <returns>ApiResponse of BlockType</returns>
        ApiResponse<BlockType> ReadBlockTypeByIdWithHttpInfo(Guid id);
        /// <summary>
        /// Read Block Type By Slug
        /// </summary>
        /// <remarks>
        /// Get a block type by name.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <returns>BlockType</returns>
        BlockType ReadBlockTypeBySlug(string slug);

        /// <summary>
        /// Read Block Type By Slug
        /// </summary>
        /// <remarks>
        /// Get a block type by name.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <returns>ApiResponse of BlockType</returns>
        ApiResponse<BlockType> ReadBlockTypeBySlugWithHttpInfo(string slug);
        /// <summary>
        /// Read Block Types
        /// </summary>
        /// <remarks>
        /// Gets all block types. Optionally limit return with limit and offset.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBlockTypesRequest"> (optional)</param>
        /// <returns>List&lt;BlockType&gt;</returns>
        List<BlockType> ReadBlockTypes(ReadBlockTypesRequest readBlockTypesRequest = default(ReadBlockTypesRequest));

        /// <summary>
        /// Read Block Types
        /// </summary>
        /// <remarks>
        /// Gets all block types. Optionally limit return with limit and offset.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBlockTypesRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;BlockType&gt;</returns>
        ApiResponse<List<BlockType>> ReadBlockTypesWithHttpInfo(ReadBlockTypesRequest readBlockTypesRequest = default(ReadBlockTypesRequest));
        /// <summary>
        /// Update Block Type
        /// </summary>
        /// <remarks>
        /// Update a block type.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <param name="blockTypeUpdate"></param>
        /// <returns></returns>
        void UpdateBlockType(Guid id, BlockTypeUpdate blockTypeUpdate);

        /// <summary>
        /// Update Block Type
        /// </summary>
        /// <remarks>
        /// Update a block type.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <param name="blockTypeUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateBlockTypeWithHttpInfo(Guid id, BlockTypeUpdate blockTypeUpdate);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlockTypesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Block Type
        /// </summary>
        /// <remarks>
        /// Create a new block type
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockTypeCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockType</returns>
        System.Threading.Tasks.Task<BlockType> CreateBlockTypeAsync(BlockTypeCreate blockTypeCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Block Type
        /// </summary>
        /// <remarks>
        /// Create a new block type
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockTypeCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockType)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockType>> CreateBlockTypeWithHttpInfoAsync(BlockTypeCreate blockTypeCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Block Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBlockTypeAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Block Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBlockTypeWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Install System Block Types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> InstallSystemBlockTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Install System Block Types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InstallSystemBlockTypesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Block Document By Name For Block Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="blockDocumentName">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockDocument</returns>
        System.Threading.Tasks.Task<BlockDocument> ReadBlockDocumentByNameForBlockTypeAsync(string slug, string blockDocumentName, bool? includeSecrets = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Block Document By Name For Block Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="blockDocumentName">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockDocument>> ReadBlockDocumentByNameForBlockTypeWithHttpInfoAsync(string slug, string blockDocumentName, bool? includeSecrets = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Block Document By Name For Block Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="blockDocumentName">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockDocument</returns>
        System.Threading.Tasks.Task<BlockDocument> ReadBlockDocumentByNameForBlockType_0Async(string slug, string blockDocumentName, bool? includeSecrets = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Block Document By Name For Block Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="blockDocumentName">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockDocument>> ReadBlockDocumentByNameForBlockType_0WithHttpInfoAsync(string slug, string blockDocumentName, bool? includeSecrets = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Block Documents For Block Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BlockDocument&gt;</returns>
        System.Threading.Tasks.Task<List<BlockDocument>> ReadBlockDocumentsForBlockTypeAsync(string slug, bool? includeSecrets = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Block Documents For Block Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BlockDocument&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BlockDocument>>> ReadBlockDocumentsForBlockTypeWithHttpInfoAsync(string slug, bool? includeSecrets = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Block Documents For Block Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BlockDocument&gt;</returns>
        System.Threading.Tasks.Task<List<BlockDocument>> ReadBlockDocumentsForBlockType_0Async(string slug, bool? includeSecrets = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Block Documents For Block Type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BlockDocument&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BlockDocument>>> ReadBlockDocumentsForBlockType_0WithHttpInfoAsync(string slug, bool? includeSecrets = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Block Type By Id
        /// </summary>
        /// <remarks>
        /// Get a block type by ID.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockType</returns>
        System.Threading.Tasks.Task<BlockType> ReadBlockTypeByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Block Type By Id
        /// </summary>
        /// <remarks>
        /// Get a block type by ID.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockType)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockType>> ReadBlockTypeByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Block Type By Slug
        /// </summary>
        /// <remarks>
        /// Get a block type by name.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockType</returns>
        System.Threading.Tasks.Task<BlockType> ReadBlockTypeBySlugAsync(string slug, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Block Type By Slug
        /// </summary>
        /// <remarks>
        /// Get a block type by name.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockType)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockType>> ReadBlockTypeBySlugWithHttpInfoAsync(string slug, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Block Types
        /// </summary>
        /// <remarks>
        /// Gets all block types. Optionally limit return with limit and offset.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBlockTypesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BlockType&gt;</returns>
        System.Threading.Tasks.Task<List<BlockType>> ReadBlockTypesAsync(ReadBlockTypesRequest readBlockTypesRequest = default(ReadBlockTypesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Block Types
        /// </summary>
        /// <remarks>
        /// Gets all block types. Optionally limit return with limit and offset.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBlockTypesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BlockType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BlockType>>> ReadBlockTypesWithHttpInfoAsync(ReadBlockTypesRequest readBlockTypesRequest = default(ReadBlockTypesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Block Type
        /// </summary>
        /// <remarks>
        /// Update a block type.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <param name="blockTypeUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateBlockTypeAsync(Guid id, BlockTypeUpdate blockTypeUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Block Type
        /// </summary>
        /// <remarks>
        /// Update a block type.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <param name="blockTypeUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBlockTypeWithHttpInfoAsync(Guid id, BlockTypeUpdate blockTypeUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlockTypesApi : IBlockTypesApiSync, IBlockTypesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BlockTypesApi : IDisposable, IBlockTypesApi
    {
        private PrefectClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockTypesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public BlockTypesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockTypesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public BlockTypesApi(string basePath)
        {
            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockTypesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public BlockTypesApi(PrefectClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockTypesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BlockTypesApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockTypesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BlockTypesApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockTypesApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BlockTypesApi(HttpClient client, PrefectClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockTypesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public BlockTypesApi(PrefectClient.Client.ISynchronousClient client, PrefectClient.Client.IAsynchronousClient asyncClient, PrefectClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public PrefectClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PrefectClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PrefectClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PrefectClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PrefectClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Block Type Create a new block type
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockTypeCreate"></param>
        /// <returns>BlockType</returns>
        public BlockType CreateBlockType(BlockTypeCreate blockTypeCreate)
        {
            PrefectClient.Client.ApiResponse<BlockType> localVarResponse = CreateBlockTypeWithHttpInfo(blockTypeCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Block Type Create a new block type
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockTypeCreate"></param>
        /// <returns>ApiResponse of BlockType</returns>
        public PrefectClient.Client.ApiResponse<BlockType> CreateBlockTypeWithHttpInfo(BlockTypeCreate blockTypeCreate)
        {
            // verify the required parameter 'blockTypeCreate' is set
            if (blockTypeCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'blockTypeCreate' when calling BlockTypesApi->CreateBlockType");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = blockTypeCreate;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BlockType>("/block_types/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBlockType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Block Type Create a new block type
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockTypeCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockType</returns>
        public async System.Threading.Tasks.Task<BlockType> CreateBlockTypeAsync(BlockTypeCreate blockTypeCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<BlockType> localVarResponse = await CreateBlockTypeWithHttpInfoAsync(blockTypeCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Block Type Create a new block type
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockTypeCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockType)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<BlockType>> CreateBlockTypeWithHttpInfoAsync(BlockTypeCreate blockTypeCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockTypeCreate' is set
            if (blockTypeCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'blockTypeCreate' when calling BlockTypesApi->CreateBlockType");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = blockTypeCreate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<BlockType>("/block_types/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBlockType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <returns></returns>
        public void DeleteBlockType(Guid id)
        {
            DeleteBlockTypeWithHttpInfo(id);
        }

        /// <summary>
        /// Delete Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> DeleteBlockTypeWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/block_types/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBlockType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBlockTypeAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteBlockTypeWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> DeleteBlockTypeWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/block_types/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBlockType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Install System Block Types 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object InstallSystemBlockTypes()
        {
            PrefectClient.Client.ApiResponse<Object> localVarResponse = InstallSystemBlockTypesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Install System Block Types 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public PrefectClient.Client.ApiResponse<Object> InstallSystemBlockTypesWithHttpInfo()
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/block_types/install_system_block_types", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstallSystemBlockTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Install System Block Types 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> InstallSystemBlockTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<Object> localVarResponse = await InstallSystemBlockTypesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Install System Block Types 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> InstallSystemBlockTypesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/block_types/install_system_block_types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstallSystemBlockTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Document By Name For Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="blockDocumentName">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <returns>BlockDocument</returns>
        public BlockDocument ReadBlockDocumentByNameForBlockType(string slug, string blockDocumentName, bool? includeSecrets = default(bool?))
        {
            PrefectClient.Client.ApiResponse<BlockDocument> localVarResponse = ReadBlockDocumentByNameForBlockTypeWithHttpInfo(slug, blockDocumentName, includeSecrets);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Document By Name For Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="blockDocumentName">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <returns>ApiResponse of BlockDocument</returns>
        public PrefectClient.Client.ApiResponse<BlockDocument> ReadBlockDocumentByNameForBlockTypeWithHttpInfo(string slug, string blockDocumentName, bool? includeSecrets = default(bool?))
        {
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'slug' when calling BlockTypesApi->ReadBlockDocumentByNameForBlockType");

            // verify the required parameter 'blockDocumentName' is set
            if (blockDocumentName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'blockDocumentName' when calling BlockTypesApi->ReadBlockDocumentByNameForBlockType");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("slug", PrefectClient.Client.ClientUtils.ParameterToString(slug)); // path parameter
            localVarRequestOptions.PathParameters.Add("block_document_name", PrefectClient.Client.ClientUtils.ParameterToString(blockDocumentName)); // path parameter
            if (includeSecrets != null)
            {
                localVarRequestOptions.QueryParameters.Add(PrefectClient.Client.ClientUtils.ParameterToMultiMap("", "include_secrets", includeSecrets));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BlockDocument>("/block_types/slug/{slug}/block_documents/name/{block_document_name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockDocumentByNameForBlockType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Document By Name For Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="blockDocumentName">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockDocument</returns>
        public async System.Threading.Tasks.Task<BlockDocument> ReadBlockDocumentByNameForBlockTypeAsync(string slug, string blockDocumentName, bool? includeSecrets = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<BlockDocument> localVarResponse = await ReadBlockDocumentByNameForBlockTypeWithHttpInfoAsync(slug, blockDocumentName, includeSecrets, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Document By Name For Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="blockDocumentName">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockDocument)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<BlockDocument>> ReadBlockDocumentByNameForBlockTypeWithHttpInfoAsync(string slug, string blockDocumentName, bool? includeSecrets = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'slug' when calling BlockTypesApi->ReadBlockDocumentByNameForBlockType");

            // verify the required parameter 'blockDocumentName' is set
            if (blockDocumentName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'blockDocumentName' when calling BlockTypesApi->ReadBlockDocumentByNameForBlockType");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("slug", PrefectClient.Client.ClientUtils.ParameterToString(slug)); // path parameter
            localVarRequestOptions.PathParameters.Add("block_document_name", PrefectClient.Client.ClientUtils.ParameterToString(blockDocumentName)); // path parameter
            if (includeSecrets != null)
            {
                localVarRequestOptions.QueryParameters.Add(PrefectClient.Client.ClientUtils.ParameterToMultiMap("", "include_secrets", includeSecrets));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BlockDocument>("/block_types/slug/{slug}/block_documents/name/{block_document_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockDocumentByNameForBlockType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Document By Name For Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="blockDocumentName">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <returns>BlockDocument</returns>
        public BlockDocument ReadBlockDocumentByNameForBlockType_0(string slug, string blockDocumentName, bool? includeSecrets = default(bool?))
        {
            PrefectClient.Client.ApiResponse<BlockDocument> localVarResponse = ReadBlockDocumentByNameForBlockType_0WithHttpInfo(slug, blockDocumentName, includeSecrets);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Document By Name For Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="blockDocumentName">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <returns>ApiResponse of BlockDocument</returns>
        public PrefectClient.Client.ApiResponse<BlockDocument> ReadBlockDocumentByNameForBlockType_0WithHttpInfo(string slug, string blockDocumentName, bool? includeSecrets = default(bool?))
        {
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'slug' when calling BlockTypesApi->ReadBlockDocumentByNameForBlockType_0");

            // verify the required parameter 'blockDocumentName' is set
            if (blockDocumentName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'blockDocumentName' when calling BlockTypesApi->ReadBlockDocumentByNameForBlockType_0");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("slug", PrefectClient.Client.ClientUtils.ParameterToString(slug)); // path parameter
            localVarRequestOptions.PathParameters.Add("block_document_name", PrefectClient.Client.ClientUtils.ParameterToString(blockDocumentName)); // path parameter
            if (includeSecrets != null)
            {
                localVarRequestOptions.QueryParameters.Add(PrefectClient.Client.ClientUtils.ParameterToMultiMap("", "include_secrets", includeSecrets));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BlockDocument>("/block_types/slug/{slug}/block_documents/name/{block_document_name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockDocumentByNameForBlockType_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Document By Name For Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="blockDocumentName">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockDocument</returns>
        public async System.Threading.Tasks.Task<BlockDocument> ReadBlockDocumentByNameForBlockType_0Async(string slug, string blockDocumentName, bool? includeSecrets = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<BlockDocument> localVarResponse = await ReadBlockDocumentByNameForBlockType_0WithHttpInfoAsync(slug, blockDocumentName, includeSecrets, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Document By Name For Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="blockDocumentName">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockDocument)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<BlockDocument>> ReadBlockDocumentByNameForBlockType_0WithHttpInfoAsync(string slug, string blockDocumentName, bool? includeSecrets = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'slug' when calling BlockTypesApi->ReadBlockDocumentByNameForBlockType_0");

            // verify the required parameter 'blockDocumentName' is set
            if (blockDocumentName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'blockDocumentName' when calling BlockTypesApi->ReadBlockDocumentByNameForBlockType_0");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("slug", PrefectClient.Client.ClientUtils.ParameterToString(slug)); // path parameter
            localVarRequestOptions.PathParameters.Add("block_document_name", PrefectClient.Client.ClientUtils.ParameterToString(blockDocumentName)); // path parameter
            if (includeSecrets != null)
            {
                localVarRequestOptions.QueryParameters.Add(PrefectClient.Client.ClientUtils.ParameterToMultiMap("", "include_secrets", includeSecrets));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BlockDocument>("/block_types/slug/{slug}/block_documents/name/{block_document_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockDocumentByNameForBlockType_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Documents For Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <returns>List&lt;BlockDocument&gt;</returns>
        public List<BlockDocument> ReadBlockDocumentsForBlockType(string slug, bool? includeSecrets = default(bool?))
        {
            PrefectClient.Client.ApiResponse<List<BlockDocument>> localVarResponse = ReadBlockDocumentsForBlockTypeWithHttpInfo(slug, includeSecrets);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Documents For Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;BlockDocument&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<BlockDocument>> ReadBlockDocumentsForBlockTypeWithHttpInfo(string slug, bool? includeSecrets = default(bool?))
        {
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'slug' when calling BlockTypesApi->ReadBlockDocumentsForBlockType");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("slug", PrefectClient.Client.ClientUtils.ParameterToString(slug)); // path parameter
            if (includeSecrets != null)
            {
                localVarRequestOptions.QueryParameters.Add(PrefectClient.Client.ClientUtils.ParameterToMultiMap("", "include_secrets", includeSecrets));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<BlockDocument>>("/block_types/slug/{slug}/block_documents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockDocumentsForBlockType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Documents For Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BlockDocument&gt;</returns>
        public async System.Threading.Tasks.Task<List<BlockDocument>> ReadBlockDocumentsForBlockTypeAsync(string slug, bool? includeSecrets = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<BlockDocument>> localVarResponse = await ReadBlockDocumentsForBlockTypeWithHttpInfoAsync(slug, includeSecrets, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Documents For Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BlockDocument&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<BlockDocument>>> ReadBlockDocumentsForBlockTypeWithHttpInfoAsync(string slug, bool? includeSecrets = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'slug' when calling BlockTypesApi->ReadBlockDocumentsForBlockType");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("slug", PrefectClient.Client.ClientUtils.ParameterToString(slug)); // path parameter
            if (includeSecrets != null)
            {
                localVarRequestOptions.QueryParameters.Add(PrefectClient.Client.ClientUtils.ParameterToMultiMap("", "include_secrets", includeSecrets));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<BlockDocument>>("/block_types/slug/{slug}/block_documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockDocumentsForBlockType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Documents For Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <returns>List&lt;BlockDocument&gt;</returns>
        public List<BlockDocument> ReadBlockDocumentsForBlockType_0(string slug, bool? includeSecrets = default(bool?))
        {
            PrefectClient.Client.ApiResponse<List<BlockDocument>> localVarResponse = ReadBlockDocumentsForBlockType_0WithHttpInfo(slug, includeSecrets);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Documents For Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;BlockDocument&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<BlockDocument>> ReadBlockDocumentsForBlockType_0WithHttpInfo(string slug, bool? includeSecrets = default(bool?))
        {
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'slug' when calling BlockTypesApi->ReadBlockDocumentsForBlockType_0");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("slug", PrefectClient.Client.ClientUtils.ParameterToString(slug)); // path parameter
            if (includeSecrets != null)
            {
                localVarRequestOptions.QueryParameters.Add(PrefectClient.Client.ClientUtils.ParameterToMultiMap("", "include_secrets", includeSecrets));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<BlockDocument>>("/block_types/slug/{slug}/block_documents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockDocumentsForBlockType_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Documents For Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BlockDocument&gt;</returns>
        public async System.Threading.Tasks.Task<List<BlockDocument>> ReadBlockDocumentsForBlockType_0Async(string slug, bool? includeSecrets = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<BlockDocument>> localVarResponse = await ReadBlockDocumentsForBlockType_0WithHttpInfoAsync(slug, includeSecrets, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Documents For Block Type 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="includeSecrets">Whether to include sensitive values in the block document. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BlockDocument&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<BlockDocument>>> ReadBlockDocumentsForBlockType_0WithHttpInfoAsync(string slug, bool? includeSecrets = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'slug' when calling BlockTypesApi->ReadBlockDocumentsForBlockType_0");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("slug", PrefectClient.Client.ClientUtils.ParameterToString(slug)); // path parameter
            if (includeSecrets != null)
            {
                localVarRequestOptions.QueryParameters.Add(PrefectClient.Client.ClientUtils.ParameterToMultiMap("", "include_secrets", includeSecrets));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<BlockDocument>>("/block_types/slug/{slug}/block_documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockDocumentsForBlockType_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Type By Id Get a block type by ID.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <returns>BlockType</returns>
        public BlockType ReadBlockTypeById(Guid id)
        {
            PrefectClient.Client.ApiResponse<BlockType> localVarResponse = ReadBlockTypeByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Type By Id Get a block type by ID.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <returns>ApiResponse of BlockType</returns>
        public PrefectClient.Client.ApiResponse<BlockType> ReadBlockTypeByIdWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<BlockType>("/block_types/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockTypeById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Type By Id Get a block type by ID.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockType</returns>
        public async System.Threading.Tasks.Task<BlockType> ReadBlockTypeByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<BlockType> localVarResponse = await ReadBlockTypeByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Type By Id Get a block type by ID.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockType)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<BlockType>> ReadBlockTypeByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BlockType>("/block_types/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockTypeById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Type By Slug Get a block type by name.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <returns>BlockType</returns>
        public BlockType ReadBlockTypeBySlug(string slug)
        {
            PrefectClient.Client.ApiResponse<BlockType> localVarResponse = ReadBlockTypeBySlugWithHttpInfo(slug);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Type By Slug Get a block type by name.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <returns>ApiResponse of BlockType</returns>
        public PrefectClient.Client.ApiResponse<BlockType> ReadBlockTypeBySlugWithHttpInfo(string slug)
        {
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'slug' when calling BlockTypesApi->ReadBlockTypeBySlug");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("slug", PrefectClient.Client.ClientUtils.ParameterToString(slug)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<BlockType>("/block_types/slug/{slug}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockTypeBySlug", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Type By Slug Get a block type by name.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockType</returns>
        public async System.Threading.Tasks.Task<BlockType> ReadBlockTypeBySlugAsync(string slug, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<BlockType> localVarResponse = await ReadBlockTypeBySlugWithHttpInfoAsync(slug, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Type By Slug Get a block type by name.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="slug">The block type name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockType)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<BlockType>> ReadBlockTypeBySlugWithHttpInfoAsync(string slug, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'slug' is set
            if (slug == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'slug' when calling BlockTypesApi->ReadBlockTypeBySlug");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("slug", PrefectClient.Client.ClientUtils.ParameterToString(slug)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BlockType>("/block_types/slug/{slug}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockTypeBySlug", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Types Gets all block types. Optionally limit return with limit and offset.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBlockTypesRequest"> (optional)</param>
        /// <returns>List&lt;BlockType&gt;</returns>
        public List<BlockType> ReadBlockTypes(ReadBlockTypesRequest readBlockTypesRequest = default(ReadBlockTypesRequest))
        {
            PrefectClient.Client.ApiResponse<List<BlockType>> localVarResponse = ReadBlockTypesWithHttpInfo(readBlockTypesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Types Gets all block types. Optionally limit return with limit and offset.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBlockTypesRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;BlockType&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<BlockType>> ReadBlockTypesWithHttpInfo(ReadBlockTypesRequest readBlockTypesRequest = default(ReadBlockTypesRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readBlockTypesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<BlockType>>("/block_types/filter", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Types Gets all block types. Optionally limit return with limit and offset.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBlockTypesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BlockType&gt;</returns>
        public async System.Threading.Tasks.Task<List<BlockType>> ReadBlockTypesAsync(ReadBlockTypesRequest readBlockTypesRequest = default(ReadBlockTypesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<BlockType>> localVarResponse = await ReadBlockTypesWithHttpInfoAsync(readBlockTypesRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Types Gets all block types. Optionally limit return with limit and offset.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBlockTypesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BlockType&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<BlockType>>> ReadBlockTypesWithHttpInfoAsync(ReadBlockTypesRequest readBlockTypesRequest = default(ReadBlockTypesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readBlockTypesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<BlockType>>("/block_types/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Block Type Update a block type.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <param name="blockTypeUpdate"></param>
        /// <returns></returns>
        public void UpdateBlockType(Guid id, BlockTypeUpdate blockTypeUpdate)
        {
            UpdateBlockTypeWithHttpInfo(id, blockTypeUpdate);
        }

        /// <summary>
        /// Update Block Type Update a block type.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <param name="blockTypeUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> UpdateBlockTypeWithHttpInfo(Guid id, BlockTypeUpdate blockTypeUpdate)
        {
            // verify the required parameter 'blockTypeUpdate' is set
            if (blockTypeUpdate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'blockTypeUpdate' when calling BlockTypesApi->UpdateBlockType");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = blockTypeUpdate;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/block_types/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBlockType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Block Type Update a block type.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <param name="blockTypeUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateBlockTypeAsync(Guid id, BlockTypeUpdate blockTypeUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateBlockTypeWithHttpInfoAsync(id, blockTypeUpdate, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Block Type Update a block type.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block type ID</param>
        /// <param name="blockTypeUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> UpdateBlockTypeWithHttpInfoAsync(Guid id, BlockTypeUpdate blockTypeUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockTypeUpdate' is set
            if (blockTypeUpdate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'blockTypeUpdate' when calling BlockTypesApi->UpdateBlockType");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = blockTypeUpdate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/block_types/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBlockType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
