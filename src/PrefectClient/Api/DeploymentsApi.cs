/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using PrefectClient.Client;
using PrefectClient.Model;

namespace PrefectClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeploymentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Count Deployments
        /// </summary>
        /// <remarks>
        /// Count deployments.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countDeploymentsRequest"> (optional)</param>
        /// <returns>int</returns>
        int CountDeployments(CountDeploymentsRequest countDeploymentsRequest = default(CountDeploymentsRequest));

        /// <summary>
        /// Count Deployments
        /// </summary>
        /// <remarks>
        /// Count deployments.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countDeploymentsRequest"> (optional)</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> CountDeploymentsWithHttpInfo(CountDeploymentsRequest countDeploymentsRequest = default(CountDeploymentsRequest));
        /// <summary>
        /// Create Deployment
        /// </summary>
        /// <remarks>
        /// Gracefully creates a new deployment from the provided schema. If a deployment with\\nthe same name and flow_id already exists, the deployment is updated.\\n\\nIf the deployment has an active schedule, flow runs will be scheduled.\\nWhen upserting, any scheduled runs from the existing deployment will be deleted.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentCreate"></param>
        /// <returns>DeploymentResponse</returns>
        DeploymentResponse CreateDeployment(DeploymentCreate deploymentCreate);

        /// <summary>
        /// Create Deployment
        /// </summary>
        /// <remarks>
        /// Gracefully creates a new deployment from the provided schema. If a deployment with\\nthe same name and flow_id already exists, the deployment is updated.\\n\\nIf the deployment has an active schedule, flow runs will be scheduled.\\nWhen upserting, any scheduled runs from the existing deployment will be deleted.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentCreate"></param>
        /// <returns>ApiResponse of DeploymentResponse</returns>
        ApiResponse<DeploymentResponse> CreateDeploymentWithHttpInfo(DeploymentCreate deploymentCreate);
        /// <summary>
        /// Create Flow Run From Deployment
        /// </summary>
        /// <remarks>
        /// Create a flow run from a deployment.\\n\\nAny parameters not provided will be inferred from the deployment parameters.\\nIf tags are not provided, the deployment tags will be used.\\n\\nIf no state is provided, the flow run will be created in a SCHEDULED state.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="deploymentFlowRunCreate"></param>
        /// <returns>FlowRunResponse</returns>
        FlowRunResponse CreateFlowRunFromDeployment(Guid id, DeploymentFlowRunCreate deploymentFlowRunCreate);

        /// <summary>
        /// Create Flow Run From Deployment
        /// </summary>
        /// <remarks>
        /// Create a flow run from a deployment.\\n\\nAny parameters not provided will be inferred from the deployment parameters.\\nIf tags are not provided, the deployment tags will be used.\\n\\nIf no state is provided, the flow run will be created in a SCHEDULED state.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="deploymentFlowRunCreate"></param>
        /// <returns>ApiResponse of FlowRunResponse</returns>
        ApiResponse<FlowRunResponse> CreateFlowRunFromDeploymentWithHttpInfo(Guid id, DeploymentFlowRunCreate deploymentFlowRunCreate);
        /// <summary>
        /// Delete Deployment
        /// </summary>
        /// <remarks>
        /// Delete a deployment by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns></returns>
        void DeleteDeployment(Guid id);

        /// <summary>
        /// Delete Deployment
        /// </summary>
        /// <remarks>
        /// Delete a deployment by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDeploymentWithHttpInfo(Guid id);
        /// <summary>
        /// Read Deployment
        /// </summary>
        /// <remarks>
        /// Get a deployment by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns>DeploymentResponse</returns>
        DeploymentResponse ReadDeployment(Guid id);

        /// <summary>
        /// Read Deployment
        /// </summary>
        /// <remarks>
        /// Get a deployment by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns>ApiResponse of DeploymentResponse</returns>
        ApiResponse<DeploymentResponse> ReadDeploymentWithHttpInfo(Guid id);
        /// <summary>
        /// Read Deployment By Name
        /// </summary>
        /// <remarks>
        /// Get a deployment using the name of the flow and the deployment.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowName">The name of the flow</param>
        /// <param name="deploymentName">The name of the deployment</param>
        /// <returns>DeploymentResponse</returns>
        DeploymentResponse ReadDeploymentByName(string flowName, string deploymentName);

        /// <summary>
        /// Read Deployment By Name
        /// </summary>
        /// <remarks>
        /// Get a deployment using the name of the flow and the deployment.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowName">The name of the flow</param>
        /// <param name="deploymentName">The name of the deployment</param>
        /// <returns>ApiResponse of DeploymentResponse</returns>
        ApiResponse<DeploymentResponse> ReadDeploymentByNameWithHttpInfo(string flowName, string deploymentName);
        /// <summary>
        /// Read Deployments
        /// </summary>
        /// <remarks>
        /// Query for deployments.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readDeploymentsRequest"> (optional)</param>
        /// <returns>List&lt;DeploymentResponse&gt;</returns>
        List<DeploymentResponse> ReadDeployments(ReadDeploymentsRequest readDeploymentsRequest = default(ReadDeploymentsRequest));

        /// <summary>
        /// Read Deployments
        /// </summary>
        /// <remarks>
        /// Query for deployments.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readDeploymentsRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DeploymentResponse&gt;</returns>
        ApiResponse<List<DeploymentResponse>> ReadDeploymentsWithHttpInfo(ReadDeploymentsRequest readDeploymentsRequest = default(ReadDeploymentsRequest));
        /// <summary>
        /// Schedule Deployment
        /// </summary>
        /// <remarks>
        /// Schedule runs for a deployment. For backfills, provide start/end times in the past.\\n\\nThis function will generate the minimum number of runs that satisfy the min\\nand max times, and the min and max counts. Specifically, the following order\\nwill be respected.\\n\\n    - Runs will be generated starting on or after the &#x60;start_time&#x60;\\n    - No more than &#x60;max_runs&#x60; runs will be generated\\n    - No runs will be generated after &#x60;end_time&#x60; is reached\\n    - At least &#x60;min_runs&#x60; runs will be generated\\n    - Runs will be generated until at least &#x60;start_time + min_time&#x60; is reached
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="scheduleDeploymentRequest"> (optional)</param>
        /// <returns>Object</returns>
        Object ScheduleDeployment(Guid id, ScheduleDeploymentRequest scheduleDeploymentRequest = default(ScheduleDeploymentRequest));

        /// <summary>
        /// Schedule Deployment
        /// </summary>
        /// <remarks>
        /// Schedule runs for a deployment. For backfills, provide start/end times in the past.\\n\\nThis function will generate the minimum number of runs that satisfy the min\\nand max times, and the min and max counts. Specifically, the following order\\nwill be respected.\\n\\n    - Runs will be generated starting on or after the &#x60;start_time&#x60;\\n    - No more than &#x60;max_runs&#x60; runs will be generated\\n    - No runs will be generated after &#x60;end_time&#x60; is reached\\n    - At least &#x60;min_runs&#x60; runs will be generated\\n    - Runs will be generated until at least &#x60;start_time + min_time&#x60; is reached
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="scheduleDeploymentRequest"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ScheduleDeploymentWithHttpInfo(Guid id, ScheduleDeploymentRequest scheduleDeploymentRequest = default(ScheduleDeploymentRequest));
        /// <summary>
        /// Set Schedule Active
        /// </summary>
        /// <remarks>
        /// Set a deployment schedule to active. Runs will be scheduled immediately.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns>Object</returns>
        Object SetScheduleActive(Guid id);

        /// <summary>
        /// Set Schedule Active
        /// </summary>
        /// <remarks>
        /// Set a deployment schedule to active. Runs will be scheduled immediately.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SetScheduleActiveWithHttpInfo(Guid id);
        /// <summary>
        /// Set Schedule Inactive
        /// </summary>
        /// <remarks>
        /// Set a deployment schedule to inactive. Any auto-scheduled runs still in a Scheduled\\nstate will be deleted.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns>Object</returns>
        Object SetScheduleInactive(Guid id);

        /// <summary>
        /// Set Schedule Inactive
        /// </summary>
        /// <remarks>
        /// Set a deployment schedule to inactive. Any auto-scheduled runs still in a Scheduled\\nstate will be deleted.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SetScheduleInactiveWithHttpInfo(Guid id);
        /// <summary>
        /// Update Deployment
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="deploymentUpdate"></param>
        /// <returns></returns>
        void UpdateDeployment(string id, DeploymentUpdate deploymentUpdate);

        /// <summary>
        /// Update Deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="deploymentUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateDeploymentWithHttpInfo(string id, DeploymentUpdate deploymentUpdate);
        /// <summary>
        /// Work Queue Check For Deployment
        /// </summary>
        /// <remarks>
        /// Get list of work-queues that are able to pick up the specified deployment.\\n\\nThis endpoint is intended to be used by the UI to provide users warnings\\nabout deployments that are unable to be executed because there are no work\\nqueues that will pick up their runs, based on existing filter criteria. It\\nmay be deprecated in the future because there is not a strict relationship\\nbetween work queues and deployments.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns>List&lt;WorkQueue&gt;</returns>
        [Obsolete]
        List<WorkQueue> WorkQueueCheckForDeployment(Guid id);

        /// <summary>
        /// Work Queue Check For Deployment
        /// </summary>
        /// <remarks>
        /// Get list of work-queues that are able to pick up the specified deployment.\\n\\nThis endpoint is intended to be used by the UI to provide users warnings\\nabout deployments that are unable to be executed because there are no work\\nqueues that will pick up their runs, based on existing filter criteria. It\\nmay be deprecated in the future because there is not a strict relationship\\nbetween work queues and deployments.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns>ApiResponse of List&lt;WorkQueue&gt;</returns>
        [Obsolete]
        ApiResponse<List<WorkQueue>> WorkQueueCheckForDeploymentWithHttpInfo(Guid id);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeploymentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Count Deployments
        /// </summary>
        /// <remarks>
        /// Count deployments.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countDeploymentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> CountDeploymentsAsync(CountDeploymentsRequest countDeploymentsRequest = default(CountDeploymentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Count Deployments
        /// </summary>
        /// <remarks>
        /// Count deployments.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countDeploymentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> CountDeploymentsWithHttpInfoAsync(CountDeploymentsRequest countDeploymentsRequest = default(CountDeploymentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Deployment
        /// </summary>
        /// <remarks>
        /// Gracefully creates a new deployment from the provided schema. If a deployment with\\nthe same name and flow_id already exists, the deployment is updated.\\n\\nIf the deployment has an active schedule, flow runs will be scheduled.\\nWhen upserting, any scheduled runs from the existing deployment will be deleted.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeploymentResponse</returns>
        System.Threading.Tasks.Task<DeploymentResponse> CreateDeploymentAsync(DeploymentCreate deploymentCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Deployment
        /// </summary>
        /// <remarks>
        /// Gracefully creates a new deployment from the provided schema. If a deployment with\\nthe same name and flow_id already exists, the deployment is updated.\\n\\nIf the deployment has an active schedule, flow runs will be scheduled.\\nWhen upserting, any scheduled runs from the existing deployment will be deleted.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeploymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeploymentResponse>> CreateDeploymentWithHttpInfoAsync(DeploymentCreate deploymentCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Flow Run From Deployment
        /// </summary>
        /// <remarks>
        /// Create a flow run from a deployment.\\n\\nAny parameters not provided will be inferred from the deployment parameters.\\nIf tags are not provided, the deployment tags will be used.\\n\\nIf no state is provided, the flow run will be created in a SCHEDULED state.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="deploymentFlowRunCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FlowRunResponse</returns>
        System.Threading.Tasks.Task<FlowRunResponse> CreateFlowRunFromDeploymentAsync(Guid id, DeploymentFlowRunCreate deploymentFlowRunCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Flow Run From Deployment
        /// </summary>
        /// <remarks>
        /// Create a flow run from a deployment.\\n\\nAny parameters not provided will be inferred from the deployment parameters.\\nIf tags are not provided, the deployment tags will be used.\\n\\nIf no state is provided, the flow run will be created in a SCHEDULED state.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="deploymentFlowRunCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FlowRunResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowRunResponse>> CreateFlowRunFromDeploymentWithHttpInfoAsync(Guid id, DeploymentFlowRunCreate deploymentFlowRunCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Deployment
        /// </summary>
        /// <remarks>
        /// Delete a deployment by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDeploymentAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Deployment
        /// </summary>
        /// <remarks>
        /// Delete a deployment by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDeploymentWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Deployment
        /// </summary>
        /// <remarks>
        /// Get a deployment by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeploymentResponse</returns>
        System.Threading.Tasks.Task<DeploymentResponse> ReadDeploymentAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Deployment
        /// </summary>
        /// <remarks>
        /// Get a deployment by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeploymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeploymentResponse>> ReadDeploymentWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Deployment By Name
        /// </summary>
        /// <remarks>
        /// Get a deployment using the name of the flow and the deployment.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowName">The name of the flow</param>
        /// <param name="deploymentName">The name of the deployment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeploymentResponse</returns>
        System.Threading.Tasks.Task<DeploymentResponse> ReadDeploymentByNameAsync(string flowName, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Deployment By Name
        /// </summary>
        /// <remarks>
        /// Get a deployment using the name of the flow and the deployment.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowName">The name of the flow</param>
        /// <param name="deploymentName">The name of the deployment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeploymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeploymentResponse>> ReadDeploymentByNameWithHttpInfoAsync(string flowName, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Deployments
        /// </summary>
        /// <remarks>
        /// Query for deployments.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readDeploymentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DeploymentResponse&gt;</returns>
        System.Threading.Tasks.Task<List<DeploymentResponse>> ReadDeploymentsAsync(ReadDeploymentsRequest readDeploymentsRequest = default(ReadDeploymentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Deployments
        /// </summary>
        /// <remarks>
        /// Query for deployments.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readDeploymentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DeploymentResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeploymentResponse>>> ReadDeploymentsWithHttpInfoAsync(ReadDeploymentsRequest readDeploymentsRequest = default(ReadDeploymentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Schedule Deployment
        /// </summary>
        /// <remarks>
        /// Schedule runs for a deployment. For backfills, provide start/end times in the past.\\n\\nThis function will generate the minimum number of runs that satisfy the min\\nand max times, and the min and max counts. Specifically, the following order\\nwill be respected.\\n\\n    - Runs will be generated starting on or after the &#x60;start_time&#x60;\\n    - No more than &#x60;max_runs&#x60; runs will be generated\\n    - No runs will be generated after &#x60;end_time&#x60; is reached\\n    - At least &#x60;min_runs&#x60; runs will be generated\\n    - Runs will be generated until at least &#x60;start_time + min_time&#x60; is reached
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="scheduleDeploymentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ScheduleDeploymentAsync(Guid id, ScheduleDeploymentRequest scheduleDeploymentRequest = default(ScheduleDeploymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Schedule Deployment
        /// </summary>
        /// <remarks>
        /// Schedule runs for a deployment. For backfills, provide start/end times in the past.\\n\\nThis function will generate the minimum number of runs that satisfy the min\\nand max times, and the min and max counts. Specifically, the following order\\nwill be respected.\\n\\n    - Runs will be generated starting on or after the &#x60;start_time&#x60;\\n    - No more than &#x60;max_runs&#x60; runs will be generated\\n    - No runs will be generated after &#x60;end_time&#x60; is reached\\n    - At least &#x60;min_runs&#x60; runs will be generated\\n    - Runs will be generated until at least &#x60;start_time + min_time&#x60; is reached
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="scheduleDeploymentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScheduleDeploymentWithHttpInfoAsync(Guid id, ScheduleDeploymentRequest scheduleDeploymentRequest = default(ScheduleDeploymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Schedule Active
        /// </summary>
        /// <remarks>
        /// Set a deployment schedule to active. Runs will be scheduled immediately.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SetScheduleActiveAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Schedule Active
        /// </summary>
        /// <remarks>
        /// Set a deployment schedule to active. Runs will be scheduled immediately.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetScheduleActiveWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Schedule Inactive
        /// </summary>
        /// <remarks>
        /// Set a deployment schedule to inactive. Any auto-scheduled runs still in a Scheduled\\nstate will be deleted.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SetScheduleInactiveAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Schedule Inactive
        /// </summary>
        /// <remarks>
        /// Set a deployment schedule to inactive. Any auto-scheduled runs still in a Scheduled\\nstate will be deleted.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetScheduleInactiveWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="deploymentUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateDeploymentAsync(string id, DeploymentUpdate deploymentUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Deployment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="deploymentUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDeploymentWithHttpInfoAsync(string id, DeploymentUpdate deploymentUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Work Queue Check For Deployment
        /// </summary>
        /// <remarks>
        /// Get list of work-queues that are able to pick up the specified deployment.\\n\\nThis endpoint is intended to be used by the UI to provide users warnings\\nabout deployments that are unable to be executed because there are no work\\nqueues that will pick up their runs, based on existing filter criteria. It\\nmay be deprecated in the future because there is not a strict relationship\\nbetween work queues and deployments.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkQueue&gt;</returns>
        [Obsolete]
        System.Threading.Tasks.Task<List<WorkQueue>> WorkQueueCheckForDeploymentAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Work Queue Check For Deployment
        /// </summary>
        /// <remarks>
        /// Get list of work-queues that are able to pick up the specified deployment.\\n\\nThis endpoint is intended to be used by the UI to provide users warnings\\nabout deployments that are unable to be executed because there are no work\\nqueues that will pick up their runs, based on existing filter criteria. It\\nmay be deprecated in the future because there is not a strict relationship\\nbetween work queues and deployments.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkQueue&gt;)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<List<WorkQueue>>> WorkQueueCheckForDeploymentWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeploymentsApi : IDeploymentsApiSync, IDeploymentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeploymentsApi : IDisposable, IDeploymentsApi
    {
        private PrefectClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public DeploymentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public DeploymentsApi(string basePath)
        {
            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public DeploymentsApi(PrefectClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DeploymentsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DeploymentsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DeploymentsApi(HttpClient client, PrefectClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeploymentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public DeploymentsApi(PrefectClient.Client.ISynchronousClient client, PrefectClient.Client.IAsynchronousClient asyncClient, PrefectClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public PrefectClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PrefectClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PrefectClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PrefectClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PrefectClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Count Deployments Count deployments.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countDeploymentsRequest"> (optional)</param>
        /// <returns>int</returns>
        public int CountDeployments(CountDeploymentsRequest countDeploymentsRequest = default(CountDeploymentsRequest))
        {
            PrefectClient.Client.ApiResponse<int> localVarResponse = CountDeploymentsWithHttpInfo(countDeploymentsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count Deployments Count deployments.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countDeploymentsRequest"> (optional)</param>
        /// <returns>ApiResponse of int</returns>
        public PrefectClient.Client.ApiResponse<int> CountDeploymentsWithHttpInfo(CountDeploymentsRequest countDeploymentsRequest = default(CountDeploymentsRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = countDeploymentsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<int>("/deployments/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountDeployments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Count Deployments Count deployments.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countDeploymentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> CountDeploymentsAsync(CountDeploymentsRequest countDeploymentsRequest = default(CountDeploymentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<int> localVarResponse = await CountDeploymentsWithHttpInfoAsync(countDeploymentsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count Deployments Count deployments.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countDeploymentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<int>> CountDeploymentsWithHttpInfoAsync(CountDeploymentsRequest countDeploymentsRequest = default(CountDeploymentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = countDeploymentsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<int>("/deployments/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountDeployments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Deployment Gracefully creates a new deployment from the provided schema. If a deployment with\\nthe same name and flow_id already exists, the deployment is updated.\\n\\nIf the deployment has an active schedule, flow runs will be scheduled.\\nWhen upserting, any scheduled runs from the existing deployment will be deleted.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentCreate"></param>
        /// <returns>DeploymentResponse</returns>
        public DeploymentResponse CreateDeployment(DeploymentCreate deploymentCreate)
        {
            PrefectClient.Client.ApiResponse<DeploymentResponse> localVarResponse = CreateDeploymentWithHttpInfo(deploymentCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Deployment Gracefully creates a new deployment from the provided schema. If a deployment with\\nthe same name and flow_id already exists, the deployment is updated.\\n\\nIf the deployment has an active schedule, flow runs will be scheduled.\\nWhen upserting, any scheduled runs from the existing deployment will be deleted.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentCreate"></param>
        /// <returns>ApiResponse of DeploymentResponse</returns>
        public PrefectClient.Client.ApiResponse<DeploymentResponse> CreateDeploymentWithHttpInfo(DeploymentCreate deploymentCreate)
        {
            // verify the required parameter 'deploymentCreate' is set
            if (deploymentCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'deploymentCreate' when calling DeploymentsApi->CreateDeployment");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = deploymentCreate;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DeploymentResponse>("/deployments/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Deployment Gracefully creates a new deployment from the provided schema. If a deployment with\\nthe same name and flow_id already exists, the deployment is updated.\\n\\nIf the deployment has an active schedule, flow runs will be scheduled.\\nWhen upserting, any scheduled runs from the existing deployment will be deleted.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeploymentResponse</returns>
        public async System.Threading.Tasks.Task<DeploymentResponse> CreateDeploymentAsync(DeploymentCreate deploymentCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<DeploymentResponse> localVarResponse = await CreateDeploymentWithHttpInfoAsync(deploymentCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Deployment Gracefully creates a new deployment from the provided schema. If a deployment with\\nthe same name and flow_id already exists, the deployment is updated.\\n\\nIf the deployment has an active schedule, flow runs will be scheduled.\\nWhen upserting, any scheduled runs from the existing deployment will be deleted.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeploymentResponse)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<DeploymentResponse>> CreateDeploymentWithHttpInfoAsync(DeploymentCreate deploymentCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deploymentCreate' is set
            if (deploymentCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'deploymentCreate' when calling DeploymentsApi->CreateDeployment");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = deploymentCreate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DeploymentResponse>("/deployments/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Flow Run From Deployment Create a flow run from a deployment.\\n\\nAny parameters not provided will be inferred from the deployment parameters.\\nIf tags are not provided, the deployment tags will be used.\\n\\nIf no state is provided, the flow run will be created in a SCHEDULED state.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="deploymentFlowRunCreate"></param>
        /// <returns>FlowRunResponse</returns>
        public FlowRunResponse CreateFlowRunFromDeployment(Guid id, DeploymentFlowRunCreate deploymentFlowRunCreate)
        {
            PrefectClient.Client.ApiResponse<FlowRunResponse> localVarResponse = CreateFlowRunFromDeploymentWithHttpInfo(id, deploymentFlowRunCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Flow Run From Deployment Create a flow run from a deployment.\\n\\nAny parameters not provided will be inferred from the deployment parameters.\\nIf tags are not provided, the deployment tags will be used.\\n\\nIf no state is provided, the flow run will be created in a SCHEDULED state.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="deploymentFlowRunCreate"></param>
        /// <returns>ApiResponse of FlowRunResponse</returns>
        public PrefectClient.Client.ApiResponse<FlowRunResponse> CreateFlowRunFromDeploymentWithHttpInfo(Guid id, DeploymentFlowRunCreate deploymentFlowRunCreate)
        {
            // verify the required parameter 'deploymentFlowRunCreate' is set
            if (deploymentFlowRunCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'deploymentFlowRunCreate' when calling DeploymentsApi->CreateFlowRunFromDeployment");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = deploymentFlowRunCreate;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FlowRunResponse>("/deployments/{id}/create_flow_run", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFlowRunFromDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Flow Run From Deployment Create a flow run from a deployment.\\n\\nAny parameters not provided will be inferred from the deployment parameters.\\nIf tags are not provided, the deployment tags will be used.\\n\\nIf no state is provided, the flow run will be created in a SCHEDULED state.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="deploymentFlowRunCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FlowRunResponse</returns>
        public async System.Threading.Tasks.Task<FlowRunResponse> CreateFlowRunFromDeploymentAsync(Guid id, DeploymentFlowRunCreate deploymentFlowRunCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<FlowRunResponse> localVarResponse = await CreateFlowRunFromDeploymentWithHttpInfoAsync(id, deploymentFlowRunCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Flow Run From Deployment Create a flow run from a deployment.\\n\\nAny parameters not provided will be inferred from the deployment parameters.\\nIf tags are not provided, the deployment tags will be used.\\n\\nIf no state is provided, the flow run will be created in a SCHEDULED state.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="deploymentFlowRunCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FlowRunResponse)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<FlowRunResponse>> CreateFlowRunFromDeploymentWithHttpInfoAsync(Guid id, DeploymentFlowRunCreate deploymentFlowRunCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deploymentFlowRunCreate' is set
            if (deploymentFlowRunCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'deploymentFlowRunCreate' when calling DeploymentsApi->CreateFlowRunFromDeployment");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = deploymentFlowRunCreate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FlowRunResponse>("/deployments/{id}/create_flow_run", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFlowRunFromDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Deployment Delete a deployment by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns></returns>
        public void DeleteDeployment(Guid id)
        {
            DeleteDeploymentWithHttpInfo(id);
        }

        /// <summary>
        /// Delete Deployment Delete a deployment by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> DeleteDeploymentWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/deployments/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Deployment Delete a deployment by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDeploymentAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteDeploymentWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Deployment Delete a deployment by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> DeleteDeploymentWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/deployments/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Deployment Get a deployment by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns>DeploymentResponse</returns>
        public DeploymentResponse ReadDeployment(Guid id)
        {
            PrefectClient.Client.ApiResponse<DeploymentResponse> localVarResponse = ReadDeploymentWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Deployment Get a deployment by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns>ApiResponse of DeploymentResponse</returns>
        public PrefectClient.Client.ApiResponse<DeploymentResponse> ReadDeploymentWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DeploymentResponse>("/deployments/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Deployment Get a deployment by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeploymentResponse</returns>
        public async System.Threading.Tasks.Task<DeploymentResponse> ReadDeploymentAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<DeploymentResponse> localVarResponse = await ReadDeploymentWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Deployment Get a deployment by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeploymentResponse)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<DeploymentResponse>> ReadDeploymentWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DeploymentResponse>("/deployments/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Deployment By Name Get a deployment using the name of the flow and the deployment.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowName">The name of the flow</param>
        /// <param name="deploymentName">The name of the deployment</param>
        /// <returns>DeploymentResponse</returns>
        public DeploymentResponse ReadDeploymentByName(string flowName, string deploymentName)
        {
            PrefectClient.Client.ApiResponse<DeploymentResponse> localVarResponse = ReadDeploymentByNameWithHttpInfo(flowName, deploymentName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Deployment By Name Get a deployment using the name of the flow and the deployment.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowName">The name of the flow</param>
        /// <param name="deploymentName">The name of the deployment</param>
        /// <returns>ApiResponse of DeploymentResponse</returns>
        public PrefectClient.Client.ApiResponse<DeploymentResponse> ReadDeploymentByNameWithHttpInfo(string flowName, string deploymentName)
        {
            // verify the required parameter 'flowName' is set
            if (flowName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'flowName' when calling DeploymentsApi->ReadDeploymentByName");

            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'deploymentName' when calling DeploymentsApi->ReadDeploymentByName");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flow_name", PrefectClient.Client.ClientUtils.ParameterToString(flowName)); // path parameter
            localVarRequestOptions.PathParameters.Add("deployment_name", PrefectClient.Client.ClientUtils.ParameterToString(deploymentName)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DeploymentResponse>("/deployments/name/{flow_name}/{deployment_name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadDeploymentByName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Deployment By Name Get a deployment using the name of the flow and the deployment.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowName">The name of the flow</param>
        /// <param name="deploymentName">The name of the deployment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeploymentResponse</returns>
        public async System.Threading.Tasks.Task<DeploymentResponse> ReadDeploymentByNameAsync(string flowName, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<DeploymentResponse> localVarResponse = await ReadDeploymentByNameWithHttpInfoAsync(flowName, deploymentName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Deployment By Name Get a deployment using the name of the flow and the deployment.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="flowName">The name of the flow</param>
        /// <param name="deploymentName">The name of the deployment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeploymentResponse)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<DeploymentResponse>> ReadDeploymentByNameWithHttpInfoAsync(string flowName, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'flowName' is set
            if (flowName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'flowName' when calling DeploymentsApi->ReadDeploymentByName");

            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'deploymentName' when calling DeploymentsApi->ReadDeploymentByName");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("flow_name", PrefectClient.Client.ClientUtils.ParameterToString(flowName)); // path parameter
            localVarRequestOptions.PathParameters.Add("deployment_name", PrefectClient.Client.ClientUtils.ParameterToString(deploymentName)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DeploymentResponse>("/deployments/name/{flow_name}/{deployment_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadDeploymentByName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Deployments Query for deployments.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readDeploymentsRequest"> (optional)</param>
        /// <returns>List&lt;DeploymentResponse&gt;</returns>
        public List<DeploymentResponse> ReadDeployments(ReadDeploymentsRequest readDeploymentsRequest = default(ReadDeploymentsRequest))
        {
            PrefectClient.Client.ApiResponse<List<DeploymentResponse>> localVarResponse = ReadDeploymentsWithHttpInfo(readDeploymentsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Deployments Query for deployments.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readDeploymentsRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DeploymentResponse&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<DeploymentResponse>> ReadDeploymentsWithHttpInfo(ReadDeploymentsRequest readDeploymentsRequest = default(ReadDeploymentsRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readDeploymentsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<DeploymentResponse>>("/deployments/filter", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadDeployments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Deployments Query for deployments.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readDeploymentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DeploymentResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeploymentResponse>> ReadDeploymentsAsync(ReadDeploymentsRequest readDeploymentsRequest = default(ReadDeploymentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<DeploymentResponse>> localVarResponse = await ReadDeploymentsWithHttpInfoAsync(readDeploymentsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Deployments Query for deployments.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readDeploymentsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DeploymentResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<DeploymentResponse>>> ReadDeploymentsWithHttpInfoAsync(ReadDeploymentsRequest readDeploymentsRequest = default(ReadDeploymentsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readDeploymentsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<DeploymentResponse>>("/deployments/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadDeployments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Schedule Deployment Schedule runs for a deployment. For backfills, provide start/end times in the past.\\n\\nThis function will generate the minimum number of runs that satisfy the min\\nand max times, and the min and max counts. Specifically, the following order\\nwill be respected.\\n\\n    - Runs will be generated starting on or after the &#x60;start_time&#x60;\\n    - No more than &#x60;max_runs&#x60; runs will be generated\\n    - No runs will be generated after &#x60;end_time&#x60; is reached\\n    - At least &#x60;min_runs&#x60; runs will be generated\\n    - Runs will be generated until at least &#x60;start_time + min_time&#x60; is reached
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="scheduleDeploymentRequest"> (optional)</param>
        /// <returns>Object</returns>
        public Object ScheduleDeployment(Guid id, ScheduleDeploymentRequest scheduleDeploymentRequest = default(ScheduleDeploymentRequest))
        {
            PrefectClient.Client.ApiResponse<Object> localVarResponse = ScheduleDeploymentWithHttpInfo(id, scheduleDeploymentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Schedule Deployment Schedule runs for a deployment. For backfills, provide start/end times in the past.\\n\\nThis function will generate the minimum number of runs that satisfy the min\\nand max times, and the min and max counts. Specifically, the following order\\nwill be respected.\\n\\n    - Runs will be generated starting on or after the &#x60;start_time&#x60;\\n    - No more than &#x60;max_runs&#x60; runs will be generated\\n    - No runs will be generated after &#x60;end_time&#x60; is reached\\n    - At least &#x60;min_runs&#x60; runs will be generated\\n    - Runs will be generated until at least &#x60;start_time + min_time&#x60; is reached
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="scheduleDeploymentRequest"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public PrefectClient.Client.ApiResponse<Object> ScheduleDeploymentWithHttpInfo(Guid id, ScheduleDeploymentRequest scheduleDeploymentRequest = default(ScheduleDeploymentRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = scheduleDeploymentRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/deployments/{id}/schedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduleDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Schedule Deployment Schedule runs for a deployment. For backfills, provide start/end times in the past.\\n\\nThis function will generate the minimum number of runs that satisfy the min\\nand max times, and the min and max counts. Specifically, the following order\\nwill be respected.\\n\\n    - Runs will be generated starting on or after the &#x60;start_time&#x60;\\n    - No more than &#x60;max_runs&#x60; runs will be generated\\n    - No runs will be generated after &#x60;end_time&#x60; is reached\\n    - At least &#x60;min_runs&#x60; runs will be generated\\n    - Runs will be generated until at least &#x60;start_time + min_time&#x60; is reached
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="scheduleDeploymentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ScheduleDeploymentAsync(Guid id, ScheduleDeploymentRequest scheduleDeploymentRequest = default(ScheduleDeploymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<Object> localVarResponse = await ScheduleDeploymentWithHttpInfoAsync(id, scheduleDeploymentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Schedule Deployment Schedule runs for a deployment. For backfills, provide start/end times in the past.\\n\\nThis function will generate the minimum number of runs that satisfy the min\\nand max times, and the min and max counts. Specifically, the following order\\nwill be respected.\\n\\n    - Runs will be generated starting on or after the &#x60;start_time&#x60;\\n    - No more than &#x60;max_runs&#x60; runs will be generated\\n    - No runs will be generated after &#x60;end_time&#x60; is reached\\n    - At least &#x60;min_runs&#x60; runs will be generated\\n    - Runs will be generated until at least &#x60;start_time + min_time&#x60; is reached
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="scheduleDeploymentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> ScheduleDeploymentWithHttpInfoAsync(Guid id, ScheduleDeploymentRequest scheduleDeploymentRequest = default(ScheduleDeploymentRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = scheduleDeploymentRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/deployments/{id}/schedule", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduleDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Schedule Active Set a deployment schedule to active. Runs will be scheduled immediately.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns>Object</returns>
        public Object SetScheduleActive(Guid id)
        {
            PrefectClient.Client.ApiResponse<Object> localVarResponse = SetScheduleActiveWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Schedule Active Set a deployment schedule to active. Runs will be scheduled immediately.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns>ApiResponse of Object</returns>
        public PrefectClient.Client.ApiResponse<Object> SetScheduleActiveWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/deployments/{id}/set_schedule_active", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetScheduleActive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Schedule Active Set a deployment schedule to active. Runs will be scheduled immediately.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SetScheduleActiveAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<Object> localVarResponse = await SetScheduleActiveWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Schedule Active Set a deployment schedule to active. Runs will be scheduled immediately.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> SetScheduleActiveWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/deployments/{id}/set_schedule_active", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetScheduleActive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Schedule Inactive Set a deployment schedule to inactive. Any auto-scheduled runs still in a Scheduled\\nstate will be deleted.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns>Object</returns>
        public Object SetScheduleInactive(Guid id)
        {
            PrefectClient.Client.ApiResponse<Object> localVarResponse = SetScheduleInactiveWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Schedule Inactive Set a deployment schedule to inactive. Any auto-scheduled runs still in a Scheduled\\nstate will be deleted.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns>ApiResponse of Object</returns>
        public PrefectClient.Client.ApiResponse<Object> SetScheduleInactiveWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/deployments/{id}/set_schedule_inactive", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetScheduleInactive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Schedule Inactive Set a deployment schedule to inactive. Any auto-scheduled runs still in a Scheduled\\nstate will be deleted.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SetScheduleInactiveAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<Object> localVarResponse = await SetScheduleInactiveWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Schedule Inactive Set a deployment schedule to inactive. Any auto-scheduled runs still in a Scheduled\\nstate will be deleted.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> SetScheduleInactiveWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/deployments/{id}/set_schedule_inactive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetScheduleInactive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Deployment 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="deploymentUpdate"></param>
        /// <returns></returns>
        public void UpdateDeployment(string id, DeploymentUpdate deploymentUpdate)
        {
            UpdateDeploymentWithHttpInfo(id, deploymentUpdate);
        }

        /// <summary>
        /// Update Deployment 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="deploymentUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> UpdateDeploymentWithHttpInfo(string id, DeploymentUpdate deploymentUpdate)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'id' when calling DeploymentsApi->UpdateDeployment");

            // verify the required parameter 'deploymentUpdate' is set
            if (deploymentUpdate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'deploymentUpdate' when calling DeploymentsApi->UpdateDeployment");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = deploymentUpdate;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/deployments/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Deployment 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="deploymentUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateDeploymentAsync(string id, DeploymentUpdate deploymentUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateDeploymentWithHttpInfoAsync(id, deploymentUpdate, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Deployment 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="deploymentUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> UpdateDeploymentWithHttpInfoAsync(string id, DeploymentUpdate deploymentUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'id' when calling DeploymentsApi->UpdateDeployment");

            // verify the required parameter 'deploymentUpdate' is set
            if (deploymentUpdate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'deploymentUpdate' when calling DeploymentsApi->UpdateDeployment");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = deploymentUpdate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/deployments/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Work Queue Check For Deployment Get list of work-queues that are able to pick up the specified deployment.\\n\\nThis endpoint is intended to be used by the UI to provide users warnings\\nabout deployments that are unable to be executed because there are no work\\nqueues that will pick up their runs, based on existing filter criteria. It\\nmay be deprecated in the future because there is not a strict relationship\\nbetween work queues and deployments.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns>List&lt;WorkQueue&gt;</returns>
        [Obsolete]
        public List<WorkQueue> WorkQueueCheckForDeployment(Guid id)
        {
            PrefectClient.Client.ApiResponse<List<WorkQueue>> localVarResponse = WorkQueueCheckForDeploymentWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Work Queue Check For Deployment Get list of work-queues that are able to pick up the specified deployment.\\n\\nThis endpoint is intended to be used by the UI to provide users warnings\\nabout deployments that are unable to be executed because there are no work\\nqueues that will pick up their runs, based on existing filter criteria. It\\nmay be deprecated in the future because there is not a strict relationship\\nbetween work queues and deployments.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <returns>ApiResponse of List&lt;WorkQueue&gt;</returns>
        [Obsolete]
        public PrefectClient.Client.ApiResponse<List<WorkQueue>> WorkQueueCheckForDeploymentWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WorkQueue>>("/deployments/{id}/work_queue_check", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkQueueCheckForDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Work Queue Check For Deployment Get list of work-queues that are able to pick up the specified deployment.\\n\\nThis endpoint is intended to be used by the UI to provide users warnings\\nabout deployments that are unable to be executed because there are no work\\nqueues that will pick up their runs, based on existing filter criteria. It\\nmay be deprecated in the future because there is not a strict relationship\\nbetween work queues and deployments.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkQueue&gt;</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<List<WorkQueue>> WorkQueueCheckForDeploymentAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<WorkQueue>> localVarResponse = await WorkQueueCheckForDeploymentWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Work Queue Check For Deployment Get list of work-queues that are able to pick up the specified deployment.\\n\\nThis endpoint is intended to be used by the UI to provide users warnings\\nabout deployments that are unable to be executed because there are no work\\nqueues that will pick up their runs, based on existing filter criteria. It\\nmay be deprecated in the future because there is not a strict relationship\\nbetween work queues and deployments.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The deployment id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkQueue&gt;)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<WorkQueue>>> WorkQueueCheckForDeploymentWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WorkQueue>>("/deployments/{id}/work_queue_check", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkQueueCheckForDeployment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
