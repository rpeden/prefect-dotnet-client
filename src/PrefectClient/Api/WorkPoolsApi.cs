/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using PrefectClient.Client;
using PrefectClient.Model;

namespace PrefectClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkPoolsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Work Pool
        /// </summary>
        /// <remarks>
        /// Creates a new work pool. If a work pool with the same\\nname already exists, an error will be raised.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolCreate"></param>
        /// <returns>WorkPool</returns>
        WorkPool CreateWorkPool(WorkPoolCreate workPoolCreate);

        /// <summary>
        /// Create Work Pool
        /// </summary>
        /// <remarks>
        /// Creates a new work pool. If a work pool with the same\\nname already exists, an error will be raised.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolCreate"></param>
        /// <returns>ApiResponse of WorkPool</returns>
        ApiResponse<WorkPool> CreateWorkPoolWithHttpInfo(WorkPoolCreate workPoolCreate);
        /// <summary>
        /// Create Work Queue
        /// </summary>
        /// <remarks>
        /// Creates a new work pool queue. If a work pool queue with the same\\nname already exists, an error will be raised.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="workQueueCreate"></param>
        /// <returns>WorkQueueResponse</returns>
        WorkQueueResponse CreateWorkPoolWorkQueue(string workPoolName, WorkQueueCreate workQueueCreate);

        /// <summary>
        /// Create Work Queue
        /// </summary>
        /// <remarks>
        /// Creates a new work pool queue. If a work pool queue with the same\\nname already exists, an error will be raised.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="workQueueCreate"></param>
        /// <returns>ApiResponse of WorkQueueResponse</returns>
        ApiResponse<WorkQueueResponse> CreateWorkPoolWorkQueueWithHttpInfo(string workPoolName, WorkQueueCreate workQueueCreate);
        /// <summary>
        /// Delete Work Pool
        /// </summary>
        /// <remarks>
        /// Delete a work pool
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <returns></returns>
        void DeleteWorkPool(string name);

        /// <summary>
        /// Delete Work Pool
        /// </summary>
        /// <remarks>
        /// Delete a work pool
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWorkPoolWithHttpInfo(string name);
        /// <summary>
        /// Delete Work Queue
        /// </summary>
        /// <remarks>
        /// Delete a work pool queue
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <returns></returns>
        void DeleteWorkPoolWorkQueue(string workPoolName, string name);

        /// <summary>
        /// Delete Work Queue
        /// </summary>
        /// <remarks>
        /// Delete a work pool queue
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWorkPoolWorkQueueWithHttpInfo(string workPoolName, string name);
        /// <summary>
        /// Get Scheduled Flow Runs
        /// </summary>
        /// <remarks>
        /// Load scheduled runs for a worker
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="getScheduledFlowRunsRequest"> (optional)</param>
        /// <returns>List&lt;WorkerFlowRunResponse&gt;</returns>
        List<WorkerFlowRunResponse> GetScheduledFlowRuns(string name, GetScheduledFlowRunsRequest getScheduledFlowRunsRequest = default(GetScheduledFlowRunsRequest));

        /// <summary>
        /// Get Scheduled Flow Runs
        /// </summary>
        /// <remarks>
        /// Load scheduled runs for a worker
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="getScheduledFlowRunsRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkerFlowRunResponse&gt;</returns>
        ApiResponse<List<WorkerFlowRunResponse>> GetScheduledFlowRunsWithHttpInfo(string name, GetScheduledFlowRunsRequest getScheduledFlowRunsRequest = default(GetScheduledFlowRunsRequest));
        /// <summary>
        /// Read Work Pool
        /// </summary>
        /// <remarks>
        /// Read a work pool by name
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <returns>WorkPool</returns>
        WorkPool ReadWorkPool(string name);

        /// <summary>
        /// Read Work Pool
        /// </summary>
        /// <remarks>
        /// Read a work pool by name
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <returns>ApiResponse of WorkPool</returns>
        ApiResponse<WorkPool> ReadWorkPoolWithHttpInfo(string name);
        /// <summary>
        /// Read Work Queue
        /// </summary>
        /// <remarks>
        /// Read a work pool queue
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <returns>WorkQueueResponse</returns>
        WorkQueueResponse ReadWorkPoolWorkQueue(string workPoolName, string name);

        /// <summary>
        /// Read Work Queue
        /// </summary>
        /// <remarks>
        /// Read a work pool queue
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <returns>ApiResponse of WorkQueueResponse</returns>
        ApiResponse<WorkQueueResponse> ReadWorkPoolWorkQueueWithHttpInfo(string workPoolName, string name);
        /// <summary>
        /// Read Work Queues
        /// </summary>
        /// <remarks>
        /// Read all work pool queues
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="readWorkQueuesRequest"> (optional)</param>
        /// <returns>List&lt;WorkQueueResponse&gt;</returns>
        List<WorkQueueResponse> ReadWorkPoolWorkQueues(string workPoolName, ReadWorkQueuesRequest readWorkQueuesRequest = default(ReadWorkQueuesRequest));

        /// <summary>
        /// Read Work Queues
        /// </summary>
        /// <remarks>
        /// Read all work pool queues
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="readWorkQueuesRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkQueueResponse&gt;</returns>
        ApiResponse<List<WorkQueueResponse>> ReadWorkPoolWorkQueuesWithHttpInfo(string workPoolName, ReadWorkQueuesRequest readWorkQueuesRequest = default(ReadWorkQueuesRequest));
        /// <summary>
        /// Read Work Pools
        /// </summary>
        /// <remarks>
        /// Read multiple work pools
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readWorkPoolsRequest"> (optional)</param>
        /// <returns>List&lt;WorkPool&gt;</returns>
        List<WorkPool> ReadWorkPools(ReadWorkPoolsRequest readWorkPoolsRequest = default(ReadWorkPoolsRequest));

        /// <summary>
        /// Read Work Pools
        /// </summary>
        /// <remarks>
        /// Read multiple work pools
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readWorkPoolsRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkPool&gt;</returns>
        ApiResponse<List<WorkPool>> ReadWorkPoolsWithHttpInfo(ReadWorkPoolsRequest readWorkPoolsRequest = default(ReadWorkPoolsRequest));
        /// <summary>
        /// Read Workers
        /// </summary>
        /// <remarks>
        /// Read all worker processes
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="readWorkersRequest"> (optional)</param>
        /// <returns>List&lt;Worker&gt;</returns>
        List<Worker> ReadWorkers(string workPoolName, ReadWorkersRequest readWorkersRequest = default(ReadWorkersRequest));

        /// <summary>
        /// Read Workers
        /// </summary>
        /// <remarks>
        /// Read all worker processes
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="readWorkersRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Worker&gt;</returns>
        ApiResponse<List<Worker>> ReadWorkersWithHttpInfo(string workPoolName, ReadWorkersRequest readWorkersRequest = default(ReadWorkersRequest));
        /// <summary>
        /// Update Work Pool
        /// </summary>
        /// <remarks>
        /// Update a work pool
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="workPoolUpdate"></param>
        /// <returns></returns>
        void UpdateWorkPool(string name, WorkPoolUpdate workPoolUpdate);

        /// <summary>
        /// Update Work Pool
        /// </summary>
        /// <remarks>
        /// Update a work pool
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="workPoolUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateWorkPoolWithHttpInfo(string name, WorkPoolUpdate workPoolUpdate);
        /// <summary>
        /// Update Work Queue
        /// </summary>
        /// <remarks>
        /// Update a work pool queue
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <param name="workQueueUpdate"></param>
        /// <returns></returns>
        void UpdateWorkPoolWorkQueue(string workPoolName, string name, WorkQueueUpdate workQueueUpdate);

        /// <summary>
        /// Update Work Queue
        /// </summary>
        /// <remarks>
        /// Update a work pool queue
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <param name="workQueueUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateWorkPoolWorkQueueWithHttpInfo(string workPoolName, string name, WorkQueueUpdate workQueueUpdate);
        /// <summary>
        /// Worker Heartbeat
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="workerHeartbeatRequest"></param>
        /// <returns></returns>
        void WorkerHeartbeat(string workPoolName, WorkerHeartbeatRequest workerHeartbeatRequest);

        /// <summary>
        /// Worker Heartbeat
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="workerHeartbeatRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkerHeartbeatWithHttpInfo(string workPoolName, WorkerHeartbeatRequest workerHeartbeatRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkPoolsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Work Pool
        /// </summary>
        /// <remarks>
        /// Creates a new work pool. If a work pool with the same\\nname already exists, an error will be raised.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkPool</returns>
        System.Threading.Tasks.Task<WorkPool> CreateWorkPoolAsync(WorkPoolCreate workPoolCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Work Pool
        /// </summary>
        /// <remarks>
        /// Creates a new work pool. If a work pool with the same\\nname already exists, an error will be raised.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkPool)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkPool>> CreateWorkPoolWithHttpInfoAsync(WorkPoolCreate workPoolCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Work Queue
        /// </summary>
        /// <remarks>
        /// Creates a new work pool queue. If a work pool queue with the same\\nname already exists, an error will be raised.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="workQueueCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkQueueResponse</returns>
        System.Threading.Tasks.Task<WorkQueueResponse> CreateWorkPoolWorkQueueAsync(string workPoolName, WorkQueueCreate workQueueCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Work Queue
        /// </summary>
        /// <remarks>
        /// Creates a new work pool queue. If a work pool queue with the same\\nname already exists, an error will be raised.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="workQueueCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkQueueResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkQueueResponse>> CreateWorkPoolWorkQueueWithHttpInfoAsync(string workPoolName, WorkQueueCreate workQueueCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Work Pool
        /// </summary>
        /// <remarks>
        /// Delete a work pool
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWorkPoolAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Work Pool
        /// </summary>
        /// <remarks>
        /// Delete a work pool
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorkPoolWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Work Queue
        /// </summary>
        /// <remarks>
        /// Delete a work pool queue
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWorkPoolWorkQueueAsync(string workPoolName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Work Queue
        /// </summary>
        /// <remarks>
        /// Delete a work pool queue
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWorkPoolWorkQueueWithHttpInfoAsync(string workPoolName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Scheduled Flow Runs
        /// </summary>
        /// <remarks>
        /// Load scheduled runs for a worker
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="getScheduledFlowRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkerFlowRunResponse&gt;</returns>
        System.Threading.Tasks.Task<List<WorkerFlowRunResponse>> GetScheduledFlowRunsAsync(string name, GetScheduledFlowRunsRequest getScheduledFlowRunsRequest = default(GetScheduledFlowRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Scheduled Flow Runs
        /// </summary>
        /// <remarks>
        /// Load scheduled runs for a worker
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="getScheduledFlowRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkerFlowRunResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkerFlowRunResponse>>> GetScheduledFlowRunsWithHttpInfoAsync(string name, GetScheduledFlowRunsRequest getScheduledFlowRunsRequest = default(GetScheduledFlowRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Work Pool
        /// </summary>
        /// <remarks>
        /// Read a work pool by name
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkPool</returns>
        System.Threading.Tasks.Task<WorkPool> ReadWorkPoolAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Work Pool
        /// </summary>
        /// <remarks>
        /// Read a work pool by name
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkPool)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkPool>> ReadWorkPoolWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Work Queue
        /// </summary>
        /// <remarks>
        /// Read a work pool queue
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkQueueResponse</returns>
        System.Threading.Tasks.Task<WorkQueueResponse> ReadWorkPoolWorkQueueAsync(string workPoolName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Work Queue
        /// </summary>
        /// <remarks>
        /// Read a work pool queue
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkQueueResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkQueueResponse>> ReadWorkPoolWorkQueueWithHttpInfoAsync(string workPoolName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Work Queues
        /// </summary>
        /// <remarks>
        /// Read all work pool queues
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="readWorkQueuesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkQueueResponse&gt;</returns>
        System.Threading.Tasks.Task<List<WorkQueueResponse>> ReadWorkPoolWorkQueuesAsync(string workPoolName, ReadWorkQueuesRequest readWorkQueuesRequest = default(ReadWorkQueuesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Work Queues
        /// </summary>
        /// <remarks>
        /// Read all work pool queues
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="readWorkQueuesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkQueueResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkQueueResponse>>> ReadWorkPoolWorkQueuesWithHttpInfoAsync(string workPoolName, ReadWorkQueuesRequest readWorkQueuesRequest = default(ReadWorkQueuesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Work Pools
        /// </summary>
        /// <remarks>
        /// Read multiple work pools
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readWorkPoolsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkPool&gt;</returns>
        System.Threading.Tasks.Task<List<WorkPool>> ReadWorkPoolsAsync(ReadWorkPoolsRequest readWorkPoolsRequest = default(ReadWorkPoolsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Work Pools
        /// </summary>
        /// <remarks>
        /// Read multiple work pools
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readWorkPoolsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkPool&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkPool>>> ReadWorkPoolsWithHttpInfoAsync(ReadWorkPoolsRequest readWorkPoolsRequest = default(ReadWorkPoolsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Workers
        /// </summary>
        /// <remarks>
        /// Read all worker processes
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="readWorkersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Worker&gt;</returns>
        System.Threading.Tasks.Task<List<Worker>> ReadWorkersAsync(string workPoolName, ReadWorkersRequest readWorkersRequest = default(ReadWorkersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Workers
        /// </summary>
        /// <remarks>
        /// Read all worker processes
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="readWorkersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Worker&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Worker>>> ReadWorkersWithHttpInfoAsync(string workPoolName, ReadWorkersRequest readWorkersRequest = default(ReadWorkersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Work Pool
        /// </summary>
        /// <remarks>
        /// Update a work pool
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="workPoolUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateWorkPoolAsync(string name, WorkPoolUpdate workPoolUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Work Pool
        /// </summary>
        /// <remarks>
        /// Update a work pool
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="workPoolUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateWorkPoolWithHttpInfoAsync(string name, WorkPoolUpdate workPoolUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Work Queue
        /// </summary>
        /// <remarks>
        /// Update a work pool queue
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <param name="workQueueUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateWorkPoolWorkQueueAsync(string workPoolName, string name, WorkQueueUpdate workQueueUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Work Queue
        /// </summary>
        /// <remarks>
        /// Update a work pool queue
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <param name="workQueueUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateWorkPoolWorkQueueWithHttpInfoAsync(string workPoolName, string name, WorkQueueUpdate workQueueUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Worker Heartbeat
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="workerHeartbeatRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkerHeartbeatAsync(string workPoolName, WorkerHeartbeatRequest workerHeartbeatRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Worker Heartbeat
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="workerHeartbeatRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkerHeartbeatWithHttpInfoAsync(string workPoolName, WorkerHeartbeatRequest workerHeartbeatRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkPoolsApi : IWorkPoolsApiSync, IWorkPoolsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkPoolsApi : IDisposable, IWorkPoolsApi
    {
        private PrefectClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkPoolsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public WorkPoolsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkPoolsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public WorkPoolsApi(string basePath)
        {
            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkPoolsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public WorkPoolsApi(PrefectClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkPoolsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public WorkPoolsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkPoolsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public WorkPoolsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkPoolsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public WorkPoolsApi(HttpClient client, PrefectClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkPoolsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public WorkPoolsApi(PrefectClient.Client.ISynchronousClient client, PrefectClient.Client.IAsynchronousClient asyncClient, PrefectClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public PrefectClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PrefectClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PrefectClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PrefectClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PrefectClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Work Pool Creates a new work pool. If a work pool with the same\\nname already exists, an error will be raised.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolCreate"></param>
        /// <returns>WorkPool</returns>
        public WorkPool CreateWorkPool(WorkPoolCreate workPoolCreate)
        {
            PrefectClient.Client.ApiResponse<WorkPool> localVarResponse = CreateWorkPoolWithHttpInfo(workPoolCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Work Pool Creates a new work pool. If a work pool with the same\\nname already exists, an error will be raised.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolCreate"></param>
        /// <returns>ApiResponse of WorkPool</returns>
        public PrefectClient.Client.ApiResponse<WorkPool> CreateWorkPoolWithHttpInfo(WorkPoolCreate workPoolCreate)
        {
            // verify the required parameter 'workPoolCreate' is set
            if (workPoolCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workPoolCreate' when calling WorkPoolsApi->CreateWorkPool");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = workPoolCreate;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkPool>("/work_pools/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWorkPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Work Pool Creates a new work pool. If a work pool with the same\\nname already exists, an error will be raised.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkPool</returns>
        public async System.Threading.Tasks.Task<WorkPool> CreateWorkPoolAsync(WorkPoolCreate workPoolCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<WorkPool> localVarResponse = await CreateWorkPoolWithHttpInfoAsync(workPoolCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Work Pool Creates a new work pool. If a work pool with the same\\nname already exists, an error will be raised.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkPool)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<WorkPool>> CreateWorkPoolWithHttpInfoAsync(WorkPoolCreate workPoolCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workPoolCreate' is set
            if (workPoolCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workPoolCreate' when calling WorkPoolsApi->CreateWorkPool");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = workPoolCreate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkPool>("/work_pools/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWorkPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Work Queue Creates a new work pool queue. If a work pool queue with the same\\nname already exists, an error will be raised.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="workQueueCreate"></param>
        /// <returns>WorkQueueResponse</returns>
        public WorkQueueResponse CreateWorkPoolWorkQueue(string workPoolName, WorkQueueCreate workQueueCreate)
        {
            PrefectClient.Client.ApiResponse<WorkQueueResponse> localVarResponse = CreateWorkPoolWorkQueueWithHttpInfo(workPoolName, workQueueCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Work Queue Creates a new work pool queue. If a work pool queue with the same\\nname already exists, an error will be raised.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="workQueueCreate"></param>
        /// <returns>ApiResponse of WorkQueueResponse</returns>
        public PrefectClient.Client.ApiResponse<WorkQueueResponse> CreateWorkPoolWorkQueueWithHttpInfo(string workPoolName, WorkQueueCreate workQueueCreate)
        {
            // verify the required parameter 'workPoolName' is set
            if (workPoolName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workPoolName' when calling WorkPoolsApi->CreateWorkPoolWorkQueue");

            // verify the required parameter 'workQueueCreate' is set
            if (workQueueCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workQueueCreate' when calling WorkPoolsApi->CreateWorkPoolWorkQueue");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("work_pool_name", PrefectClient.Client.ClientUtils.ParameterToString(workPoolName)); // path parameter
            localVarRequestOptions.Data = workQueueCreate;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkQueueResponse>("/work_pools/{work_pool_name}/queues", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWorkPoolWorkQueue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Work Queue Creates a new work pool queue. If a work pool queue with the same\\nname already exists, an error will be raised.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="workQueueCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkQueueResponse</returns>
        public async System.Threading.Tasks.Task<WorkQueueResponse> CreateWorkPoolWorkQueueAsync(string workPoolName, WorkQueueCreate workQueueCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<WorkQueueResponse> localVarResponse = await CreateWorkPoolWorkQueueWithHttpInfoAsync(workPoolName, workQueueCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Work Queue Creates a new work pool queue. If a work pool queue with the same\\nname already exists, an error will be raised.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="workQueueCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkQueueResponse)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<WorkQueueResponse>> CreateWorkPoolWorkQueueWithHttpInfoAsync(string workPoolName, WorkQueueCreate workQueueCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workPoolName' is set
            if (workPoolName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workPoolName' when calling WorkPoolsApi->CreateWorkPoolWorkQueue");

            // verify the required parameter 'workQueueCreate' is set
            if (workQueueCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workQueueCreate' when calling WorkPoolsApi->CreateWorkPoolWorkQueue");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("work_pool_name", PrefectClient.Client.ClientUtils.ParameterToString(workPoolName)); // path parameter
            localVarRequestOptions.Data = workQueueCreate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkQueueResponse>("/work_pools/{work_pool_name}/queues", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWorkPoolWorkQueue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Work Pool Delete a work pool
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <returns></returns>
        public void DeleteWorkPool(string name)
        {
            DeleteWorkPoolWithHttpInfo(name);
        }

        /// <summary>
        /// Delete Work Pool Delete a work pool
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> DeleteWorkPoolWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkPoolsApi->DeleteWorkPool");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", PrefectClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/work_pools/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWorkPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Work Pool Delete a work pool
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWorkPoolAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWorkPoolWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Work Pool Delete a work pool
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> DeleteWorkPoolWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkPoolsApi->DeleteWorkPool");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", PrefectClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/work_pools/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWorkPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Work Queue Delete a work pool queue
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <returns></returns>
        public void DeleteWorkPoolWorkQueue(string workPoolName, string name)
        {
            DeleteWorkPoolWorkQueueWithHttpInfo(workPoolName, name);
        }

        /// <summary>
        /// Delete Work Queue Delete a work pool queue
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> DeleteWorkPoolWorkQueueWithHttpInfo(string workPoolName, string name)
        {
            // verify the required parameter 'workPoolName' is set
            if (workPoolName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workPoolName' when calling WorkPoolsApi->DeleteWorkPoolWorkQueue");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkPoolsApi->DeleteWorkPoolWorkQueue");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("work_pool_name", PrefectClient.Client.ClientUtils.ParameterToString(workPoolName)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", PrefectClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/work_pools/{work_pool_name}/queues/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWorkPoolWorkQueue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Work Queue Delete a work pool queue
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWorkPoolWorkQueueAsync(string workPoolName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWorkPoolWorkQueueWithHttpInfoAsync(workPoolName, name, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Work Queue Delete a work pool queue
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> DeleteWorkPoolWorkQueueWithHttpInfoAsync(string workPoolName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workPoolName' is set
            if (workPoolName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workPoolName' when calling WorkPoolsApi->DeleteWorkPoolWorkQueue");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkPoolsApi->DeleteWorkPoolWorkQueue");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("work_pool_name", PrefectClient.Client.ClientUtils.ParameterToString(workPoolName)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", PrefectClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/work_pools/{work_pool_name}/queues/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWorkPoolWorkQueue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Scheduled Flow Runs Load scheduled runs for a worker
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="getScheduledFlowRunsRequest"> (optional)</param>
        /// <returns>List&lt;WorkerFlowRunResponse&gt;</returns>
        public List<WorkerFlowRunResponse> GetScheduledFlowRuns(string name, GetScheduledFlowRunsRequest getScheduledFlowRunsRequest = default(GetScheduledFlowRunsRequest))
        {
            PrefectClient.Client.ApiResponse<List<WorkerFlowRunResponse>> localVarResponse = GetScheduledFlowRunsWithHttpInfo(name, getScheduledFlowRunsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scheduled Flow Runs Load scheduled runs for a worker
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="getScheduledFlowRunsRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkerFlowRunResponse&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<WorkerFlowRunResponse>> GetScheduledFlowRunsWithHttpInfo(string name, GetScheduledFlowRunsRequest getScheduledFlowRunsRequest = default(GetScheduledFlowRunsRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkPoolsApi->GetScheduledFlowRuns");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", PrefectClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = getScheduledFlowRunsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<WorkerFlowRunResponse>>("/work_pools/{name}/get_scheduled_flow_runs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScheduledFlowRuns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Scheduled Flow Runs Load scheduled runs for a worker
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="getScheduledFlowRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkerFlowRunResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkerFlowRunResponse>> GetScheduledFlowRunsAsync(string name, GetScheduledFlowRunsRequest getScheduledFlowRunsRequest = default(GetScheduledFlowRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<WorkerFlowRunResponse>> localVarResponse = await GetScheduledFlowRunsWithHttpInfoAsync(name, getScheduledFlowRunsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Scheduled Flow Runs Load scheduled runs for a worker
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="getScheduledFlowRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkerFlowRunResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<WorkerFlowRunResponse>>> GetScheduledFlowRunsWithHttpInfoAsync(string name, GetScheduledFlowRunsRequest getScheduledFlowRunsRequest = default(GetScheduledFlowRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkPoolsApi->GetScheduledFlowRuns");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", PrefectClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = getScheduledFlowRunsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<WorkerFlowRunResponse>>("/work_pools/{name}/get_scheduled_flow_runs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScheduledFlowRuns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Work Pool Read a work pool by name
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <returns>WorkPool</returns>
        public WorkPool ReadWorkPool(string name)
        {
            PrefectClient.Client.ApiResponse<WorkPool> localVarResponse = ReadWorkPoolWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Work Pool Read a work pool by name
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <returns>ApiResponse of WorkPool</returns>
        public PrefectClient.Client.ApiResponse<WorkPool> ReadWorkPoolWithHttpInfo(string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkPoolsApi->ReadWorkPool");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", PrefectClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<WorkPool>("/work_pools/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Work Pool Read a work pool by name
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkPool</returns>
        public async System.Threading.Tasks.Task<WorkPool> ReadWorkPoolAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<WorkPool> localVarResponse = await ReadWorkPoolWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Work Pool Read a work pool by name
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkPool)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<WorkPool>> ReadWorkPoolWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkPoolsApi->ReadWorkPool");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", PrefectClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WorkPool>("/work_pools/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Work Queue Read a work pool queue
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <returns>WorkQueueResponse</returns>
        public WorkQueueResponse ReadWorkPoolWorkQueue(string workPoolName, string name)
        {
            PrefectClient.Client.ApiResponse<WorkQueueResponse> localVarResponse = ReadWorkPoolWorkQueueWithHttpInfo(workPoolName, name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Work Queue Read a work pool queue
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <returns>ApiResponse of WorkQueueResponse</returns>
        public PrefectClient.Client.ApiResponse<WorkQueueResponse> ReadWorkPoolWorkQueueWithHttpInfo(string workPoolName, string name)
        {
            // verify the required parameter 'workPoolName' is set
            if (workPoolName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workPoolName' when calling WorkPoolsApi->ReadWorkPoolWorkQueue");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkPoolsApi->ReadWorkPoolWorkQueue");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("work_pool_name", PrefectClient.Client.ClientUtils.ParameterToString(workPoolName)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", PrefectClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<WorkQueueResponse>("/work_pools/{work_pool_name}/queues/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkPoolWorkQueue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Work Queue Read a work pool queue
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkQueueResponse</returns>
        public async System.Threading.Tasks.Task<WorkQueueResponse> ReadWorkPoolWorkQueueAsync(string workPoolName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<WorkQueueResponse> localVarResponse = await ReadWorkPoolWorkQueueWithHttpInfoAsync(workPoolName, name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Work Queue Read a work pool queue
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkQueueResponse)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<WorkQueueResponse>> ReadWorkPoolWorkQueueWithHttpInfoAsync(string workPoolName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workPoolName' is set
            if (workPoolName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workPoolName' when calling WorkPoolsApi->ReadWorkPoolWorkQueue");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkPoolsApi->ReadWorkPoolWorkQueue");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("work_pool_name", PrefectClient.Client.ClientUtils.ParameterToString(workPoolName)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", PrefectClient.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<WorkQueueResponse>("/work_pools/{work_pool_name}/queues/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkPoolWorkQueue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Work Queues Read all work pool queues
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="readWorkQueuesRequest"> (optional)</param>
        /// <returns>List&lt;WorkQueueResponse&gt;</returns>
        public List<WorkQueueResponse> ReadWorkPoolWorkQueues(string workPoolName, ReadWorkQueuesRequest readWorkQueuesRequest = default(ReadWorkQueuesRequest))
        {
            PrefectClient.Client.ApiResponse<List<WorkQueueResponse>> localVarResponse = ReadWorkPoolWorkQueuesWithHttpInfo(workPoolName, readWorkQueuesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Work Queues Read all work pool queues
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="readWorkQueuesRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkQueueResponse&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<WorkQueueResponse>> ReadWorkPoolWorkQueuesWithHttpInfo(string workPoolName, ReadWorkQueuesRequest readWorkQueuesRequest = default(ReadWorkQueuesRequest))
        {
            // verify the required parameter 'workPoolName' is set
            if (workPoolName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workPoolName' when calling WorkPoolsApi->ReadWorkPoolWorkQueues");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("work_pool_name", PrefectClient.Client.ClientUtils.ParameterToString(workPoolName)); // path parameter
            localVarRequestOptions.Data = readWorkQueuesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<WorkQueueResponse>>("/work_pools/{work_pool_name}/queues/filter", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkPoolWorkQueues", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Work Queues Read all work pool queues
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="readWorkQueuesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkQueueResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkQueueResponse>> ReadWorkPoolWorkQueuesAsync(string workPoolName, ReadWorkQueuesRequest readWorkQueuesRequest = default(ReadWorkQueuesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<WorkQueueResponse>> localVarResponse = await ReadWorkPoolWorkQueuesWithHttpInfoAsync(workPoolName, readWorkQueuesRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Work Queues Read all work pool queues
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="readWorkQueuesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkQueueResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<WorkQueueResponse>>> ReadWorkPoolWorkQueuesWithHttpInfoAsync(string workPoolName, ReadWorkQueuesRequest readWorkQueuesRequest = default(ReadWorkQueuesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workPoolName' is set
            if (workPoolName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workPoolName' when calling WorkPoolsApi->ReadWorkPoolWorkQueues");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("work_pool_name", PrefectClient.Client.ClientUtils.ParameterToString(workPoolName)); // path parameter
            localVarRequestOptions.Data = readWorkQueuesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<WorkQueueResponse>>("/work_pools/{work_pool_name}/queues/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkPoolWorkQueues", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Work Pools Read multiple work pools
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readWorkPoolsRequest"> (optional)</param>
        /// <returns>List&lt;WorkPool&gt;</returns>
        public List<WorkPool> ReadWorkPools(ReadWorkPoolsRequest readWorkPoolsRequest = default(ReadWorkPoolsRequest))
        {
            PrefectClient.Client.ApiResponse<List<WorkPool>> localVarResponse = ReadWorkPoolsWithHttpInfo(readWorkPoolsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Work Pools Read multiple work pools
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readWorkPoolsRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WorkPool&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<WorkPool>> ReadWorkPoolsWithHttpInfo(ReadWorkPoolsRequest readWorkPoolsRequest = default(ReadWorkPoolsRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readWorkPoolsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<WorkPool>>("/work_pools/filter", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkPools", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Work Pools Read multiple work pools
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readWorkPoolsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WorkPool&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkPool>> ReadWorkPoolsAsync(ReadWorkPoolsRequest readWorkPoolsRequest = default(ReadWorkPoolsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<WorkPool>> localVarResponse = await ReadWorkPoolsWithHttpInfoAsync(readWorkPoolsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Work Pools Read multiple work pools
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readWorkPoolsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WorkPool&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<WorkPool>>> ReadWorkPoolsWithHttpInfoAsync(ReadWorkPoolsRequest readWorkPoolsRequest = default(ReadWorkPoolsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readWorkPoolsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<WorkPool>>("/work_pools/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkPools", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Workers Read all worker processes
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="readWorkersRequest"> (optional)</param>
        /// <returns>List&lt;Worker&gt;</returns>
        public List<Worker> ReadWorkers(string workPoolName, ReadWorkersRequest readWorkersRequest = default(ReadWorkersRequest))
        {
            PrefectClient.Client.ApiResponse<List<Worker>> localVarResponse = ReadWorkersWithHttpInfo(workPoolName, readWorkersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Workers Read all worker processes
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="readWorkersRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Worker&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<Worker>> ReadWorkersWithHttpInfo(string workPoolName, ReadWorkersRequest readWorkersRequest = default(ReadWorkersRequest))
        {
            // verify the required parameter 'workPoolName' is set
            if (workPoolName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workPoolName' when calling WorkPoolsApi->ReadWorkers");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("work_pool_name", PrefectClient.Client.ClientUtils.ParameterToString(workPoolName)); // path parameter
            localVarRequestOptions.Data = readWorkersRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Worker>>("/work_pools/{work_pool_name}/workers/filter", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Workers Read all worker processes
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="readWorkersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Worker&gt;</returns>
        public async System.Threading.Tasks.Task<List<Worker>> ReadWorkersAsync(string workPoolName, ReadWorkersRequest readWorkersRequest = default(ReadWorkersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<Worker>> localVarResponse = await ReadWorkersWithHttpInfoAsync(workPoolName, readWorkersRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Workers Read all worker processes
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="readWorkersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Worker&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<Worker>>> ReadWorkersWithHttpInfoAsync(string workPoolName, ReadWorkersRequest readWorkersRequest = default(ReadWorkersRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workPoolName' is set
            if (workPoolName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workPoolName' when calling WorkPoolsApi->ReadWorkers");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("work_pool_name", PrefectClient.Client.ClientUtils.ParameterToString(workPoolName)); // path parameter
            localVarRequestOptions.Data = readWorkersRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Worker>>("/work_pools/{work_pool_name}/workers/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadWorkers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work Pool Update a work pool
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="workPoolUpdate"></param>
        /// <returns></returns>
        public void UpdateWorkPool(string name, WorkPoolUpdate workPoolUpdate)
        {
            UpdateWorkPoolWithHttpInfo(name, workPoolUpdate);
        }

        /// <summary>
        /// Update Work Pool Update a work pool
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="workPoolUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> UpdateWorkPoolWithHttpInfo(string name, WorkPoolUpdate workPoolUpdate)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkPoolsApi->UpdateWorkPool");

            // verify the required parameter 'workPoolUpdate' is set
            if (workPoolUpdate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workPoolUpdate' when calling WorkPoolsApi->UpdateWorkPool");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", PrefectClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = workPoolUpdate;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/work_pools/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWorkPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work Pool Update a work pool
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="workPoolUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateWorkPoolAsync(string name, WorkPoolUpdate workPoolUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateWorkPoolWithHttpInfoAsync(name, workPoolUpdate, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Work Pool Update a work pool
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The work pool name</param>
        /// <param name="workPoolUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> UpdateWorkPoolWithHttpInfoAsync(string name, WorkPoolUpdate workPoolUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkPoolsApi->UpdateWorkPool");

            // verify the required parameter 'workPoolUpdate' is set
            if (workPoolUpdate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workPoolUpdate' when calling WorkPoolsApi->UpdateWorkPool");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", PrefectClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = workPoolUpdate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/work_pools/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWorkPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work Queue Update a work pool queue
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <param name="workQueueUpdate"></param>
        /// <returns></returns>
        public void UpdateWorkPoolWorkQueue(string workPoolName, string name, WorkQueueUpdate workQueueUpdate)
        {
            UpdateWorkPoolWorkQueueWithHttpInfo(workPoolName, name, workQueueUpdate);
        }

        /// <summary>
        /// Update Work Queue Update a work pool queue
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <param name="workQueueUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> UpdateWorkPoolWorkQueueWithHttpInfo(string workPoolName, string name, WorkQueueUpdate workQueueUpdate)
        {
            // verify the required parameter 'workPoolName' is set
            if (workPoolName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workPoolName' when calling WorkPoolsApi->UpdateWorkPoolWorkQueue");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkPoolsApi->UpdateWorkPoolWorkQueue");

            // verify the required parameter 'workQueueUpdate' is set
            if (workQueueUpdate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workQueueUpdate' when calling WorkPoolsApi->UpdateWorkPoolWorkQueue");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("work_pool_name", PrefectClient.Client.ClientUtils.ParameterToString(workPoolName)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", PrefectClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = workQueueUpdate;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/work_pools/{work_pool_name}/queues/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWorkPoolWorkQueue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Work Queue Update a work pool queue
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <param name="workQueueUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateWorkPoolWorkQueueAsync(string workPoolName, string name, WorkQueueUpdate workQueueUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateWorkPoolWorkQueueWithHttpInfoAsync(workPoolName, name, workQueueUpdate, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Work Queue Update a work pool queue
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="name">The work pool queue name</param>
        /// <param name="workQueueUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> UpdateWorkPoolWorkQueueWithHttpInfoAsync(string workPoolName, string name, WorkQueueUpdate workQueueUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workPoolName' is set
            if (workPoolName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workPoolName' when calling WorkPoolsApi->UpdateWorkPoolWorkQueue");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'name' when calling WorkPoolsApi->UpdateWorkPoolWorkQueue");

            // verify the required parameter 'workQueueUpdate' is set
            if (workQueueUpdate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workQueueUpdate' when calling WorkPoolsApi->UpdateWorkPoolWorkQueue");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("work_pool_name", PrefectClient.Client.ClientUtils.ParameterToString(workPoolName)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", PrefectClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = workQueueUpdate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/work_pools/{work_pool_name}/queues/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWorkPoolWorkQueue", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Worker Heartbeat 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="workerHeartbeatRequest"></param>
        /// <returns></returns>
        public void WorkerHeartbeat(string workPoolName, WorkerHeartbeatRequest workerHeartbeatRequest)
        {
            WorkerHeartbeatWithHttpInfo(workPoolName, workerHeartbeatRequest);
        }

        /// <summary>
        /// Worker Heartbeat 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="workerHeartbeatRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> WorkerHeartbeatWithHttpInfo(string workPoolName, WorkerHeartbeatRequest workerHeartbeatRequest)
        {
            // verify the required parameter 'workPoolName' is set
            if (workPoolName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workPoolName' when calling WorkPoolsApi->WorkerHeartbeat");

            // verify the required parameter 'workerHeartbeatRequest' is set
            if (workerHeartbeatRequest == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workerHeartbeatRequest' when calling WorkPoolsApi->WorkerHeartbeat");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("work_pool_name", PrefectClient.Client.ClientUtils.ParameterToString(workPoolName)); // path parameter
            localVarRequestOptions.Data = workerHeartbeatRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/work_pools/{work_pool_name}/workers/heartbeat", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkerHeartbeat", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Worker Heartbeat 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="workerHeartbeatRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkerHeartbeatAsync(string workPoolName, WorkerHeartbeatRequest workerHeartbeatRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await WorkerHeartbeatWithHttpInfoAsync(workPoolName, workerHeartbeatRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Worker Heartbeat 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workPoolName">The work pool name</param>
        /// <param name="workerHeartbeatRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> WorkerHeartbeatWithHttpInfoAsync(string workPoolName, WorkerHeartbeatRequest workerHeartbeatRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'workPoolName' is set
            if (workPoolName == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workPoolName' when calling WorkPoolsApi->WorkerHeartbeat");

            // verify the required parameter 'workerHeartbeatRequest' is set
            if (workerHeartbeatRequest == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'workerHeartbeatRequest' when calling WorkPoolsApi->WorkerHeartbeat");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("work_pool_name", PrefectClient.Client.ClientUtils.ParameterToString(workPoolName)); // path parameter
            localVarRequestOptions.Data = workerHeartbeatRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/work_pools/{work_pool_name}/workers/heartbeat", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorkerHeartbeat", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
