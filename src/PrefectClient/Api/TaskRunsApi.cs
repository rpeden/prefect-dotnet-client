/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using PrefectClient.Client;
using PrefectClient.Model;

namespace PrefectClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskRunsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Count Task Runs
        /// </summary>
        /// <remarks>
        /// Count task runs.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countTaskRunsRequest"> (optional)</param>
        /// <returns>int</returns>
        int CountTaskRuns(CountTaskRunsRequest countTaskRunsRequest = default(CountTaskRunsRequest));

        /// <summary>
        /// Count Task Runs
        /// </summary>
        /// <remarks>
        /// Count task runs.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countTaskRunsRequest"> (optional)</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> CountTaskRunsWithHttpInfo(CountTaskRunsRequest countTaskRunsRequest = default(CountTaskRunsRequest));
        /// <summary>
        /// Create Task Run
        /// </summary>
        /// <remarks>
        /// Create a task run. If a task run with the same flow_run_id,\\ntask_key, and dynamic_key already exists, the existing task\\nrun will be returned.\\n\\nIf no state is provided, the task run will be created in a PENDING state.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskRunCreate"></param>
        /// <returns>TaskRun</returns>
        TaskRun CreateTaskRun(TaskRunCreate taskRunCreate);

        /// <summary>
        /// Create Task Run
        /// </summary>
        /// <remarks>
        /// Create a task run. If a task run with the same flow_run_id,\\ntask_key, and dynamic_key already exists, the existing task\\nrun will be returned.\\n\\nIf no state is provided, the task run will be created in a PENDING state.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskRunCreate"></param>
        /// <returns>ApiResponse of TaskRun</returns>
        ApiResponse<TaskRun> CreateTaskRunWithHttpInfo(TaskRunCreate taskRunCreate);
        /// <summary>
        /// Delete Task Run
        /// </summary>
        /// <remarks>
        /// Delete a task run by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <returns></returns>
        void DeleteTaskRun(Guid id);

        /// <summary>
        /// Delete Task Run
        /// </summary>
        /// <remarks>
        /// Delete a task run by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaskRunWithHttpInfo(Guid id);
        /// <summary>
        /// Read Dashboard Task Run Counts
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readDashboardTaskRunCountsRequest"></param>
        /// <returns>List&lt;TaskRunCount&gt;</returns>
        List<TaskRunCount> ReadDashboardTaskRunCounts(ReadDashboardTaskRunCountsRequest readDashboardTaskRunCountsRequest);

        /// <summary>
        /// Read Dashboard Task Run Counts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readDashboardTaskRunCountsRequest"></param>
        /// <returns>ApiResponse of List&lt;TaskRunCount&gt;</returns>
        ApiResponse<List<TaskRunCount>> ReadDashboardTaskRunCountsWithHttpInfo(ReadDashboardTaskRunCountsRequest readDashboardTaskRunCountsRequest);
        /// <summary>
        /// Read Task Run
        /// </summary>
        /// <remarks>
        /// Get a task run by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <returns>TaskRun</returns>
        TaskRun ReadTaskRun(Guid id);

        /// <summary>
        /// Read Task Run
        /// </summary>
        /// <remarks>
        /// Get a task run by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <returns>ApiResponse of TaskRun</returns>
        ApiResponse<TaskRun> ReadTaskRunWithHttpInfo(Guid id);
        /// <summary>
        /// Read Task Runs
        /// </summary>
        /// <remarks>
        /// Query for task runs.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readTaskRunsRequest"> (optional)</param>
        /// <returns>List&lt;TaskRun&gt;</returns>
        List<TaskRun> ReadTaskRuns(ReadTaskRunsRequest readTaskRunsRequest = default(ReadTaskRunsRequest));

        /// <summary>
        /// Read Task Runs
        /// </summary>
        /// <remarks>
        /// Query for task runs.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readTaskRunsRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskRun&gt;</returns>
        ApiResponse<List<TaskRun>> ReadTaskRunsWithHttpInfo(ReadTaskRunsRequest readTaskRunsRequest = default(ReadTaskRunsRequest));
        /// <summary>
        /// Set Task Run State
        /// </summary>
        /// <remarks>
        /// Set a task run state, invoking any orchestration rules.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="setTaskRunStateRequest"></param>
        /// <returns>OrchestrationResult</returns>
        OrchestrationResult SetTaskRunState(Guid id, SetTaskRunStateRequest setTaskRunStateRequest);

        /// <summary>
        /// Set Task Run State
        /// </summary>
        /// <remarks>
        /// Set a task run state, invoking any orchestration rules.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="setTaskRunStateRequest"></param>
        /// <returns>ApiResponse of OrchestrationResult</returns>
        ApiResponse<OrchestrationResult> SetTaskRunStateWithHttpInfo(Guid id, SetTaskRunStateRequest setTaskRunStateRequest);
        /// <summary>
        /// Task Run History
        /// </summary>
        /// <remarks>
        /// Query for task run history data across a given range and interval.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskRunHistoryRequest"></param>
        /// <returns>List&lt;HistoryResponse&gt;</returns>
        List<HistoryResponse> TaskRunHistory(TaskRunHistoryRequest taskRunHistoryRequest);

        /// <summary>
        /// Task Run History
        /// </summary>
        /// <remarks>
        /// Query for task run history data across a given range and interval.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskRunHistoryRequest"></param>
        /// <returns>ApiResponse of List&lt;HistoryResponse&gt;</returns>
        ApiResponse<List<HistoryResponse>> TaskRunHistoryWithHttpInfo(TaskRunHistoryRequest taskRunHistoryRequest);
        /// <summary>
        /// Update Task Run
        /// </summary>
        /// <remarks>
        /// Updates a task run.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="taskRunUpdate"></param>
        /// <returns></returns>
        void UpdateTaskRun(Guid id, TaskRunUpdate taskRunUpdate);

        /// <summary>
        /// Update Task Run
        /// </summary>
        /// <remarks>
        /// Updates a task run.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="taskRunUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTaskRunWithHttpInfo(Guid id, TaskRunUpdate taskRunUpdate);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskRunsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Count Task Runs
        /// </summary>
        /// <remarks>
        /// Count task runs.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countTaskRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> CountTaskRunsAsync(CountTaskRunsRequest countTaskRunsRequest = default(CountTaskRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Count Task Runs
        /// </summary>
        /// <remarks>
        /// Count task runs.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countTaskRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> CountTaskRunsWithHttpInfoAsync(CountTaskRunsRequest countTaskRunsRequest = default(CountTaskRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Task Run
        /// </summary>
        /// <remarks>
        /// Create a task run. If a task run with the same flow_run_id,\\ntask_key, and dynamic_key already exists, the existing task\\nrun will be returned.\\n\\nIf no state is provided, the task run will be created in a PENDING state.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskRunCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskRun</returns>
        System.Threading.Tasks.Task<TaskRun> CreateTaskRunAsync(TaskRunCreate taskRunCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Task Run
        /// </summary>
        /// <remarks>
        /// Create a task run. If a task run with the same flow_run_id,\\ntask_key, and dynamic_key already exists, the existing task\\nrun will be returned.\\n\\nIf no state is provided, the task run will be created in a PENDING state.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskRunCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskRun)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskRun>> CreateTaskRunWithHttpInfoAsync(TaskRunCreate taskRunCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Task Run
        /// </summary>
        /// <remarks>
        /// Delete a task run by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaskRunAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Task Run
        /// </summary>
        /// <remarks>
        /// Delete a task run by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskRunWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Dashboard Task Run Counts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readDashboardTaskRunCountsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskRunCount&gt;</returns>
        System.Threading.Tasks.Task<List<TaskRunCount>> ReadDashboardTaskRunCountsAsync(ReadDashboardTaskRunCountsRequest readDashboardTaskRunCountsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Dashboard Task Run Counts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readDashboardTaskRunCountsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskRunCount&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskRunCount>>> ReadDashboardTaskRunCountsWithHttpInfoAsync(ReadDashboardTaskRunCountsRequest readDashboardTaskRunCountsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Task Run
        /// </summary>
        /// <remarks>
        /// Get a task run by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskRun</returns>
        System.Threading.Tasks.Task<TaskRun> ReadTaskRunAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Task Run
        /// </summary>
        /// <remarks>
        /// Get a task run by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskRun)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskRun>> ReadTaskRunWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Task Runs
        /// </summary>
        /// <remarks>
        /// Query for task runs.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readTaskRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskRun&gt;</returns>
        System.Threading.Tasks.Task<List<TaskRun>> ReadTaskRunsAsync(ReadTaskRunsRequest readTaskRunsRequest = default(ReadTaskRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Task Runs
        /// </summary>
        /// <remarks>
        /// Query for task runs.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readTaskRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskRun&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TaskRun>>> ReadTaskRunsWithHttpInfoAsync(ReadTaskRunsRequest readTaskRunsRequest = default(ReadTaskRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Task Run State
        /// </summary>
        /// <remarks>
        /// Set a task run state, invoking any orchestration rules.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="setTaskRunStateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrchestrationResult</returns>
        System.Threading.Tasks.Task<OrchestrationResult> SetTaskRunStateAsync(Guid id, SetTaskRunStateRequest setTaskRunStateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Task Run State
        /// </summary>
        /// <remarks>
        /// Set a task run state, invoking any orchestration rules.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="setTaskRunStateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrchestrationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrchestrationResult>> SetTaskRunStateWithHttpInfoAsync(Guid id, SetTaskRunStateRequest setTaskRunStateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Task Run History
        /// </summary>
        /// <remarks>
        /// Query for task run history data across a given range and interval.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskRunHistoryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoryResponse&gt;</returns>
        System.Threading.Tasks.Task<List<HistoryResponse>> TaskRunHistoryAsync(TaskRunHistoryRequest taskRunHistoryRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Task Run History
        /// </summary>
        /// <remarks>
        /// Query for task run history data across a given range and interval.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskRunHistoryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoryResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HistoryResponse>>> TaskRunHistoryWithHttpInfoAsync(TaskRunHistoryRequest taskRunHistoryRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Task Run
        /// </summary>
        /// <remarks>
        /// Updates a task run.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="taskRunUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTaskRunAsync(Guid id, TaskRunUpdate taskRunUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Task Run
        /// </summary>
        /// <remarks>
        /// Updates a task run.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="taskRunUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTaskRunWithHttpInfoAsync(Guid id, TaskRunUpdate taskRunUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskRunsApi : ITaskRunsApiSync, ITaskRunsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaskRunsApi : IDisposable, ITaskRunsApi
    {
        private PrefectClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskRunsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public TaskRunsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskRunsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public TaskRunsApi(string basePath)
        {
            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskRunsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public TaskRunsApi(PrefectClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskRunsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TaskRunsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskRunsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TaskRunsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskRunsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TaskRunsApi(HttpClient client, PrefectClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskRunsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public TaskRunsApi(PrefectClient.Client.ISynchronousClient client, PrefectClient.Client.IAsynchronousClient asyncClient, PrefectClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public PrefectClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PrefectClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PrefectClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PrefectClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PrefectClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Count Task Runs Count task runs.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countTaskRunsRequest"> (optional)</param>
        /// <returns>int</returns>
        public int CountTaskRuns(CountTaskRunsRequest countTaskRunsRequest = default(CountTaskRunsRequest))
        {
            PrefectClient.Client.ApiResponse<int> localVarResponse = CountTaskRunsWithHttpInfo(countTaskRunsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count Task Runs Count task runs.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countTaskRunsRequest"> (optional)</param>
        /// <returns>ApiResponse of int</returns>
        public PrefectClient.Client.ApiResponse<int> CountTaskRunsWithHttpInfo(CountTaskRunsRequest countTaskRunsRequest = default(CountTaskRunsRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = countTaskRunsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<int>("/task_runs/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountTaskRuns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Count Task Runs Count task runs.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countTaskRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> CountTaskRunsAsync(CountTaskRunsRequest countTaskRunsRequest = default(CountTaskRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<int> localVarResponse = await CountTaskRunsWithHttpInfoAsync(countTaskRunsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Count Task Runs Count task runs.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countTaskRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<int>> CountTaskRunsWithHttpInfoAsync(CountTaskRunsRequest countTaskRunsRequest = default(CountTaskRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = countTaskRunsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<int>("/task_runs/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountTaskRuns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Task Run Create a task run. If a task run with the same flow_run_id,\\ntask_key, and dynamic_key already exists, the existing task\\nrun will be returned.\\n\\nIf no state is provided, the task run will be created in a PENDING state.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskRunCreate"></param>
        /// <returns>TaskRun</returns>
        public TaskRun CreateTaskRun(TaskRunCreate taskRunCreate)
        {
            PrefectClient.Client.ApiResponse<TaskRun> localVarResponse = CreateTaskRunWithHttpInfo(taskRunCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Task Run Create a task run. If a task run with the same flow_run_id,\\ntask_key, and dynamic_key already exists, the existing task\\nrun will be returned.\\n\\nIf no state is provided, the task run will be created in a PENDING state.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskRunCreate"></param>
        /// <returns>ApiResponse of TaskRun</returns>
        public PrefectClient.Client.ApiResponse<TaskRun> CreateTaskRunWithHttpInfo(TaskRunCreate taskRunCreate)
        {
            // verify the required parameter 'taskRunCreate' is set
            if (taskRunCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'taskRunCreate' when calling TaskRunsApi->CreateTaskRun");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = taskRunCreate;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TaskRun>("/task_runs/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaskRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Task Run Create a task run. If a task run with the same flow_run_id,\\ntask_key, and dynamic_key already exists, the existing task\\nrun will be returned.\\n\\nIf no state is provided, the task run will be created in a PENDING state.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskRunCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskRun</returns>
        public async System.Threading.Tasks.Task<TaskRun> CreateTaskRunAsync(TaskRunCreate taskRunCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<TaskRun> localVarResponse = await CreateTaskRunWithHttpInfoAsync(taskRunCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Task Run Create a task run. If a task run with the same flow_run_id,\\ntask_key, and dynamic_key already exists, the existing task\\nrun will be returned.\\n\\nIf no state is provided, the task run will be created in a PENDING state.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskRunCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskRun)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<TaskRun>> CreateTaskRunWithHttpInfoAsync(TaskRunCreate taskRunCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskRunCreate' is set
            if (taskRunCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'taskRunCreate' when calling TaskRunsApi->CreateTaskRun");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = taskRunCreate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskRun>("/task_runs/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaskRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Task Run Delete a task run by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <returns></returns>
        public void DeleteTaskRun(Guid id)
        {
            DeleteTaskRunWithHttpInfo(id);
        }

        /// <summary>
        /// Delete Task Run Delete a task run by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> DeleteTaskRunWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/task_runs/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTaskRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Task Run Delete a task run by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaskRunAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTaskRunWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Task Run Delete a task run by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> DeleteTaskRunWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/task_runs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTaskRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Dashboard Task Run Counts 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readDashboardTaskRunCountsRequest"></param>
        /// <returns>List&lt;TaskRunCount&gt;</returns>
        public List<TaskRunCount> ReadDashboardTaskRunCounts(ReadDashboardTaskRunCountsRequest readDashboardTaskRunCountsRequest)
        {
            PrefectClient.Client.ApiResponse<List<TaskRunCount>> localVarResponse = ReadDashboardTaskRunCountsWithHttpInfo(readDashboardTaskRunCountsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Dashboard Task Run Counts 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readDashboardTaskRunCountsRequest"></param>
        /// <returns>ApiResponse of List&lt;TaskRunCount&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<TaskRunCount>> ReadDashboardTaskRunCountsWithHttpInfo(ReadDashboardTaskRunCountsRequest readDashboardTaskRunCountsRequest)
        {
            // verify the required parameter 'readDashboardTaskRunCountsRequest' is set
            if (readDashboardTaskRunCountsRequest == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'readDashboardTaskRunCountsRequest' when calling TaskRunsApi->ReadDashboardTaskRunCounts");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readDashboardTaskRunCountsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<TaskRunCount>>("/ui/task_runs/dashboard/counts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadDashboardTaskRunCounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Dashboard Task Run Counts 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readDashboardTaskRunCountsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskRunCount&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskRunCount>> ReadDashboardTaskRunCountsAsync(ReadDashboardTaskRunCountsRequest readDashboardTaskRunCountsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<TaskRunCount>> localVarResponse = await ReadDashboardTaskRunCountsWithHttpInfoAsync(readDashboardTaskRunCountsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Dashboard Task Run Counts 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readDashboardTaskRunCountsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskRunCount&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<TaskRunCount>>> ReadDashboardTaskRunCountsWithHttpInfoAsync(ReadDashboardTaskRunCountsRequest readDashboardTaskRunCountsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'readDashboardTaskRunCountsRequest' is set
            if (readDashboardTaskRunCountsRequest == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'readDashboardTaskRunCountsRequest' when calling TaskRunsApi->ReadDashboardTaskRunCounts");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readDashboardTaskRunCountsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<TaskRunCount>>("/ui/task_runs/dashboard/counts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadDashboardTaskRunCounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Task Run Get a task run by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <returns>TaskRun</returns>
        public TaskRun ReadTaskRun(Guid id)
        {
            PrefectClient.Client.ApiResponse<TaskRun> localVarResponse = ReadTaskRunWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Task Run Get a task run by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <returns>ApiResponse of TaskRun</returns>
        public PrefectClient.Client.ApiResponse<TaskRun> ReadTaskRunWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<TaskRun>("/task_runs/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadTaskRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Task Run Get a task run by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaskRun</returns>
        public async System.Threading.Tasks.Task<TaskRun> ReadTaskRunAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<TaskRun> localVarResponse = await ReadTaskRunWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Task Run Get a task run by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaskRun)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<TaskRun>> ReadTaskRunWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskRun>("/task_runs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadTaskRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Task Runs Query for task runs.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readTaskRunsRequest"> (optional)</param>
        /// <returns>List&lt;TaskRun&gt;</returns>
        public List<TaskRun> ReadTaskRuns(ReadTaskRunsRequest readTaskRunsRequest = default(ReadTaskRunsRequest))
        {
            PrefectClient.Client.ApiResponse<List<TaskRun>> localVarResponse = ReadTaskRunsWithHttpInfo(readTaskRunsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Task Runs Query for task runs.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readTaskRunsRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TaskRun&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<TaskRun>> ReadTaskRunsWithHttpInfo(ReadTaskRunsRequest readTaskRunsRequest = default(ReadTaskRunsRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readTaskRunsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<TaskRun>>("/task_runs/filter", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadTaskRuns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Task Runs Query for task runs.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readTaskRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TaskRun&gt;</returns>
        public async System.Threading.Tasks.Task<List<TaskRun>> ReadTaskRunsAsync(ReadTaskRunsRequest readTaskRunsRequest = default(ReadTaskRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<TaskRun>> localVarResponse = await ReadTaskRunsWithHttpInfoAsync(readTaskRunsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Task Runs Query for task runs.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readTaskRunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TaskRun&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<TaskRun>>> ReadTaskRunsWithHttpInfoAsync(ReadTaskRunsRequest readTaskRunsRequest = default(ReadTaskRunsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readTaskRunsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<TaskRun>>("/task_runs/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadTaskRuns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Task Run State Set a task run state, invoking any orchestration rules.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="setTaskRunStateRequest"></param>
        /// <returns>OrchestrationResult</returns>
        public OrchestrationResult SetTaskRunState(Guid id, SetTaskRunStateRequest setTaskRunStateRequest)
        {
            PrefectClient.Client.ApiResponse<OrchestrationResult> localVarResponse = SetTaskRunStateWithHttpInfo(id, setTaskRunStateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Task Run State Set a task run state, invoking any orchestration rules.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="setTaskRunStateRequest"></param>
        /// <returns>ApiResponse of OrchestrationResult</returns>
        public PrefectClient.Client.ApiResponse<OrchestrationResult> SetTaskRunStateWithHttpInfo(Guid id, SetTaskRunStateRequest setTaskRunStateRequest)
        {
            // verify the required parameter 'setTaskRunStateRequest' is set
            if (setTaskRunStateRequest == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'setTaskRunStateRequest' when calling TaskRunsApi->SetTaskRunState");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = setTaskRunStateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrchestrationResult>("/task_runs/{id}/set_state", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetTaskRunState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Task Run State Set a task run state, invoking any orchestration rules.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="setTaskRunStateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrchestrationResult</returns>
        public async System.Threading.Tasks.Task<OrchestrationResult> SetTaskRunStateAsync(Guid id, SetTaskRunStateRequest setTaskRunStateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<OrchestrationResult> localVarResponse = await SetTaskRunStateWithHttpInfoAsync(id, setTaskRunStateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Task Run State Set a task run state, invoking any orchestration rules.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="setTaskRunStateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrchestrationResult)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<OrchestrationResult>> SetTaskRunStateWithHttpInfoAsync(Guid id, SetTaskRunStateRequest setTaskRunStateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setTaskRunStateRequest' is set
            if (setTaskRunStateRequest == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'setTaskRunStateRequest' when calling TaskRunsApi->SetTaskRunState");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = setTaskRunStateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrchestrationResult>("/task_runs/{id}/set_state", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetTaskRunState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Task Run History Query for task run history data across a given range and interval.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskRunHistoryRequest"></param>
        /// <returns>List&lt;HistoryResponse&gt;</returns>
        public List<HistoryResponse> TaskRunHistory(TaskRunHistoryRequest taskRunHistoryRequest)
        {
            PrefectClient.Client.ApiResponse<List<HistoryResponse>> localVarResponse = TaskRunHistoryWithHttpInfo(taskRunHistoryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Task Run History Query for task run history data across a given range and interval.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskRunHistoryRequest"></param>
        /// <returns>ApiResponse of List&lt;HistoryResponse&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<HistoryResponse>> TaskRunHistoryWithHttpInfo(TaskRunHistoryRequest taskRunHistoryRequest)
        {
            // verify the required parameter 'taskRunHistoryRequest' is set
            if (taskRunHistoryRequest == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'taskRunHistoryRequest' when calling TaskRunsApi->TaskRunHistory");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = taskRunHistoryRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<HistoryResponse>>("/task_runs/history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TaskRunHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Task Run History Query for task run history data across a given range and interval.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskRunHistoryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HistoryResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<HistoryResponse>> TaskRunHistoryAsync(TaskRunHistoryRequest taskRunHistoryRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<HistoryResponse>> localVarResponse = await TaskRunHistoryWithHttpInfoAsync(taskRunHistoryRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Task Run History Query for task run history data across a given range and interval.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskRunHistoryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HistoryResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<HistoryResponse>>> TaskRunHistoryWithHttpInfoAsync(TaskRunHistoryRequest taskRunHistoryRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskRunHistoryRequest' is set
            if (taskRunHistoryRequest == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'taskRunHistoryRequest' when calling TaskRunsApi->TaskRunHistory");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = taskRunHistoryRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<HistoryResponse>>("/task_runs/history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TaskRunHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Task Run Updates a task run.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="taskRunUpdate"></param>
        /// <returns></returns>
        public void UpdateTaskRun(Guid id, TaskRunUpdate taskRunUpdate)
        {
            UpdateTaskRunWithHttpInfo(id, taskRunUpdate);
        }

        /// <summary>
        /// Update Task Run Updates a task run.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="taskRunUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> UpdateTaskRunWithHttpInfo(Guid id, TaskRunUpdate taskRunUpdate)
        {
            // verify the required parameter 'taskRunUpdate' is set
            if (taskRunUpdate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'taskRunUpdate' when calling TaskRunsApi->UpdateTaskRun");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = taskRunUpdate;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/task_runs/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTaskRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Task Run Updates a task run.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="taskRunUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTaskRunAsync(Guid id, TaskRunUpdate taskRunUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateTaskRunWithHttpInfoAsync(id, taskRunUpdate, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Task Run Updates a task run.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The task run id</param>
        /// <param name="taskRunUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> UpdateTaskRunWithHttpInfoAsync(Guid id, TaskRunUpdate taskRunUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskRunUpdate' is set
            if (taskRunUpdate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'taskRunUpdate' when calling TaskRunsApi->UpdateTaskRun");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = taskRunUpdate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/task_runs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTaskRun", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
