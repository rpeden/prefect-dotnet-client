/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using PrefectClient.Client;
using PrefectClient.Model;

namespace PrefectClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlockSchemasApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Block Schema
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockSchemaCreate"></param>
        /// <returns>BlockSchema</returns>
        BlockSchema CreateBlockSchema(BlockSchemaCreate blockSchemaCreate);

        /// <summary>
        /// Create Block Schema
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockSchemaCreate"></param>
        /// <returns>ApiResponse of BlockSchema</returns>
        ApiResponse<BlockSchema> CreateBlockSchemaWithHttpInfo(BlockSchemaCreate blockSchemaCreate);
        /// <summary>
        /// Delete Block Schema
        /// </summary>
        /// <remarks>
        /// Delete a block schema by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block schema id</param>
        /// <returns></returns>
        void DeleteBlockSchema(Guid id);

        /// <summary>
        /// Delete Block Schema
        /// </summary>
        /// <remarks>
        /// Delete a block schema by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block schema id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBlockSchemaWithHttpInfo(Guid id);
        /// <summary>
        /// Read Block Schema By Checksum
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checksum">The block schema checksum</param>
        /// <param name="varVersion">Version of block schema. If not provided the most recently created block schema with the matching checksum will be returned. (optional)</param>
        /// <returns>BlockSchema</returns>
        BlockSchema ReadBlockSchemaByChecksum(string checksum, string varVersion = default(string));

        /// <summary>
        /// Read Block Schema By Checksum
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checksum">The block schema checksum</param>
        /// <param name="varVersion">Version of block schema. If not provided the most recently created block schema with the matching checksum will be returned. (optional)</param>
        /// <returns>ApiResponse of BlockSchema</returns>
        ApiResponse<BlockSchema> ReadBlockSchemaByChecksumWithHttpInfo(string checksum, string varVersion = default(string));
        /// <summary>
        /// Read Block Schema By Id
        /// </summary>
        /// <remarks>
        /// Get a block schema by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block schema id</param>
        /// <returns>BlockSchema</returns>
        BlockSchema ReadBlockSchemaById(Guid id);

        /// <summary>
        /// Read Block Schema By Id
        /// </summary>
        /// <remarks>
        /// Get a block schema by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block schema id</param>
        /// <returns>ApiResponse of BlockSchema</returns>
        ApiResponse<BlockSchema> ReadBlockSchemaByIdWithHttpInfo(Guid id);
        /// <summary>
        /// Read Block Schemas
        /// </summary>
        /// <remarks>
        /// Read all block schemas, optionally filtered by type
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBlockSchemasRequest"> (optional)</param>
        /// <returns>List&lt;BlockSchema&gt;</returns>
        List<BlockSchema> ReadBlockSchemas(ReadBlockSchemasRequest readBlockSchemasRequest = default(ReadBlockSchemasRequest));

        /// <summary>
        /// Read Block Schemas
        /// </summary>
        /// <remarks>
        /// Read all block schemas, optionally filtered by type
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBlockSchemasRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;BlockSchema&gt;</returns>
        ApiResponse<List<BlockSchema>> ReadBlockSchemasWithHttpInfo(ReadBlockSchemasRequest readBlockSchemasRequest = default(ReadBlockSchemasRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlockSchemasApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Block Schema
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockSchemaCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockSchema</returns>
        System.Threading.Tasks.Task<BlockSchema> CreateBlockSchemaAsync(BlockSchemaCreate blockSchemaCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Block Schema
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockSchemaCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockSchema>> CreateBlockSchemaWithHttpInfoAsync(BlockSchemaCreate blockSchemaCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Block Schema
        /// </summary>
        /// <remarks>
        /// Delete a block schema by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block schema id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBlockSchemaAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Block Schema
        /// </summary>
        /// <remarks>
        /// Delete a block schema by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block schema id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBlockSchemaWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Block Schema By Checksum
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checksum">The block schema checksum</param>
        /// <param name="varVersion">Version of block schema. If not provided the most recently created block schema with the matching checksum will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockSchema</returns>
        System.Threading.Tasks.Task<BlockSchema> ReadBlockSchemaByChecksumAsync(string checksum, string varVersion = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Block Schema By Checksum
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checksum">The block schema checksum</param>
        /// <param name="varVersion">Version of block schema. If not provided the most recently created block schema with the matching checksum will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockSchema>> ReadBlockSchemaByChecksumWithHttpInfoAsync(string checksum, string varVersion = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Block Schema By Id
        /// </summary>
        /// <remarks>
        /// Get a block schema by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block schema id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockSchema</returns>
        System.Threading.Tasks.Task<BlockSchema> ReadBlockSchemaByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Block Schema By Id
        /// </summary>
        /// <remarks>
        /// Get a block schema by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block schema id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockSchema>> ReadBlockSchemaByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Block Schemas
        /// </summary>
        /// <remarks>
        /// Read all block schemas, optionally filtered by type
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBlockSchemasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BlockSchema&gt;</returns>
        System.Threading.Tasks.Task<List<BlockSchema>> ReadBlockSchemasAsync(ReadBlockSchemasRequest readBlockSchemasRequest = default(ReadBlockSchemasRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Block Schemas
        /// </summary>
        /// <remarks>
        /// Read all block schemas, optionally filtered by type
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBlockSchemasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BlockSchema&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BlockSchema>>> ReadBlockSchemasWithHttpInfoAsync(ReadBlockSchemasRequest readBlockSchemasRequest = default(ReadBlockSchemasRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlockSchemasApi : IBlockSchemasApiSync, IBlockSchemasApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BlockSchemasApi : IDisposable, IBlockSchemasApi
    {
        private PrefectClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockSchemasApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public BlockSchemasApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockSchemasApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public BlockSchemasApi(string basePath)
        {
            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockSchemasApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public BlockSchemasApi(PrefectClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockSchemasApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BlockSchemasApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockSchemasApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BlockSchemasApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockSchemasApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BlockSchemasApi(HttpClient client, PrefectClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockSchemasApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public BlockSchemasApi(PrefectClient.Client.ISynchronousClient client, PrefectClient.Client.IAsynchronousClient asyncClient, PrefectClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public PrefectClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PrefectClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PrefectClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PrefectClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PrefectClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Block Schema 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockSchemaCreate"></param>
        /// <returns>BlockSchema</returns>
        public BlockSchema CreateBlockSchema(BlockSchemaCreate blockSchemaCreate)
        {
            PrefectClient.Client.ApiResponse<BlockSchema> localVarResponse = CreateBlockSchemaWithHttpInfo(blockSchemaCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Block Schema 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockSchemaCreate"></param>
        /// <returns>ApiResponse of BlockSchema</returns>
        public PrefectClient.Client.ApiResponse<BlockSchema> CreateBlockSchemaWithHttpInfo(BlockSchemaCreate blockSchemaCreate)
        {
            // verify the required parameter 'blockSchemaCreate' is set
            if (blockSchemaCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'blockSchemaCreate' when calling BlockSchemasApi->CreateBlockSchema");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = blockSchemaCreate;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BlockSchema>("/block_schemas/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBlockSchema", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Block Schema 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockSchemaCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockSchema</returns>
        public async System.Threading.Tasks.Task<BlockSchema> CreateBlockSchemaAsync(BlockSchemaCreate blockSchemaCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<BlockSchema> localVarResponse = await CreateBlockSchemaWithHttpInfoAsync(blockSchemaCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Block Schema 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockSchemaCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockSchema)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<BlockSchema>> CreateBlockSchemaWithHttpInfoAsync(BlockSchemaCreate blockSchemaCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockSchemaCreate' is set
            if (blockSchemaCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'blockSchemaCreate' when calling BlockSchemasApi->CreateBlockSchema");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = blockSchemaCreate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<BlockSchema>("/block_schemas/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBlockSchema", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Block Schema Delete a block schema by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block schema id</param>
        /// <returns></returns>
        public void DeleteBlockSchema(Guid id)
        {
            DeleteBlockSchemaWithHttpInfo(id);
        }

        /// <summary>
        /// Delete Block Schema Delete a block schema by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block schema id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> DeleteBlockSchemaWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/block_schemas/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBlockSchema", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Block Schema Delete a block schema by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block schema id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBlockSchemaAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteBlockSchemaWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Block Schema Delete a block schema by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block schema id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> DeleteBlockSchemaWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/block_schemas/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBlockSchema", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Schema By Checksum 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checksum">The block schema checksum</param>
        /// <param name="varVersion">Version of block schema. If not provided the most recently created block schema with the matching checksum will be returned. (optional)</param>
        /// <returns>BlockSchema</returns>
        public BlockSchema ReadBlockSchemaByChecksum(string checksum, string varVersion = default(string))
        {
            PrefectClient.Client.ApiResponse<BlockSchema> localVarResponse = ReadBlockSchemaByChecksumWithHttpInfo(checksum, varVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Schema By Checksum 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checksum">The block schema checksum</param>
        /// <param name="varVersion">Version of block schema. If not provided the most recently created block schema with the matching checksum will be returned. (optional)</param>
        /// <returns>ApiResponse of BlockSchema</returns>
        public PrefectClient.Client.ApiResponse<BlockSchema> ReadBlockSchemaByChecksumWithHttpInfo(string checksum, string varVersion = default(string))
        {
            // verify the required parameter 'checksum' is set
            if (checksum == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'checksum' when calling BlockSchemasApi->ReadBlockSchemaByChecksum");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("checksum", PrefectClient.Client.ClientUtils.ParameterToString(checksum)); // path parameter
            if (varVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(PrefectClient.Client.ClientUtils.ParameterToMultiMap("", "version", varVersion));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BlockSchema>("/block_schemas/checksum/{checksum}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockSchemaByChecksum", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Schema By Checksum 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checksum">The block schema checksum</param>
        /// <param name="varVersion">Version of block schema. If not provided the most recently created block schema with the matching checksum will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockSchema</returns>
        public async System.Threading.Tasks.Task<BlockSchema> ReadBlockSchemaByChecksumAsync(string checksum, string varVersion = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<BlockSchema> localVarResponse = await ReadBlockSchemaByChecksumWithHttpInfoAsync(checksum, varVersion, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Schema By Checksum 
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checksum">The block schema checksum</param>
        /// <param name="varVersion">Version of block schema. If not provided the most recently created block schema with the matching checksum will be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockSchema)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<BlockSchema>> ReadBlockSchemaByChecksumWithHttpInfoAsync(string checksum, string varVersion = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'checksum' is set
            if (checksum == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'checksum' when calling BlockSchemasApi->ReadBlockSchemaByChecksum");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("checksum", PrefectClient.Client.ClientUtils.ParameterToString(checksum)); // path parameter
            if (varVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(PrefectClient.Client.ClientUtils.ParameterToMultiMap("", "version", varVersion));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BlockSchema>("/block_schemas/checksum/{checksum}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockSchemaByChecksum", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Schema By Id Get a block schema by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block schema id</param>
        /// <returns>BlockSchema</returns>
        public BlockSchema ReadBlockSchemaById(Guid id)
        {
            PrefectClient.Client.ApiResponse<BlockSchema> localVarResponse = ReadBlockSchemaByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Schema By Id Get a block schema by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block schema id</param>
        /// <returns>ApiResponse of BlockSchema</returns>
        public PrefectClient.Client.ApiResponse<BlockSchema> ReadBlockSchemaByIdWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<BlockSchema>("/block_schemas/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockSchemaById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Schema By Id Get a block schema by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block schema id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockSchema</returns>
        public async System.Threading.Tasks.Task<BlockSchema> ReadBlockSchemaByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<BlockSchema> localVarResponse = await ReadBlockSchemaByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Schema By Id Get a block schema by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The block schema id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockSchema)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<BlockSchema>> ReadBlockSchemaByIdWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BlockSchema>("/block_schemas/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockSchemaById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Schemas Read all block schemas, optionally filtered by type
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBlockSchemasRequest"> (optional)</param>
        /// <returns>List&lt;BlockSchema&gt;</returns>
        public List<BlockSchema> ReadBlockSchemas(ReadBlockSchemasRequest readBlockSchemasRequest = default(ReadBlockSchemasRequest))
        {
            PrefectClient.Client.ApiResponse<List<BlockSchema>> localVarResponse = ReadBlockSchemasWithHttpInfo(readBlockSchemasRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Schemas Read all block schemas, optionally filtered by type
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBlockSchemasRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;BlockSchema&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<BlockSchema>> ReadBlockSchemasWithHttpInfo(ReadBlockSchemasRequest readBlockSchemasRequest = default(ReadBlockSchemasRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readBlockSchemasRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<BlockSchema>>("/block_schemas/filter", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockSchemas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Block Schemas Read all block schemas, optionally filtered by type
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBlockSchemasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BlockSchema&gt;</returns>
        public async System.Threading.Tasks.Task<List<BlockSchema>> ReadBlockSchemasAsync(ReadBlockSchemasRequest readBlockSchemasRequest = default(ReadBlockSchemasRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<BlockSchema>> localVarResponse = await ReadBlockSchemasWithHttpInfoAsync(readBlockSchemasRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Block Schemas Read all block schemas, optionally filtered by type
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readBlockSchemasRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BlockSchema&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<BlockSchema>>> ReadBlockSchemasWithHttpInfoAsync(ReadBlockSchemasRequest readBlockSchemasRequest = default(ReadBlockSchemasRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readBlockSchemasRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<BlockSchema>>("/block_schemas/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadBlockSchemas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
