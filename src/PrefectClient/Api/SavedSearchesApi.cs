/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using PrefectClient.Client;
using PrefectClient.Model;

namespace PrefectClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISavedSearchesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Saved Search
        /// </summary>
        /// <remarks>
        /// Gracefully creates a new saved search from the provided schema.\\n\\nIf a saved search with the same name already exists, the saved search fields are\\nreplaced.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savedSearchCreate"></param>
        /// <returns>SavedSearch</returns>
        SavedSearch CreateSavedSearch(SavedSearchCreate savedSearchCreate);

        /// <summary>
        /// Create Saved Search
        /// </summary>
        /// <remarks>
        /// Gracefully creates a new saved search from the provided schema.\\n\\nIf a saved search with the same name already exists, the saved search fields are\\nreplaced.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savedSearchCreate"></param>
        /// <returns>ApiResponse of SavedSearch</returns>
        ApiResponse<SavedSearch> CreateSavedSearchWithHttpInfo(SavedSearchCreate savedSearchCreate);
        /// <summary>
        /// Delete Saved Search
        /// </summary>
        /// <remarks>
        /// Delete a saved search by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The saved search id</param>
        /// <returns></returns>
        void DeleteSavedSearch(Guid id);

        /// <summary>
        /// Delete Saved Search
        /// </summary>
        /// <remarks>
        /// Delete a saved search by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The saved search id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSavedSearchWithHttpInfo(Guid id);
        /// <summary>
        /// Read Saved Search
        /// </summary>
        /// <remarks>
        /// Get a saved search by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The saved search id</param>
        /// <returns>SavedSearch</returns>
        SavedSearch ReadSavedSearch(Guid id);

        /// <summary>
        /// Read Saved Search
        /// </summary>
        /// <remarks>
        /// Get a saved search by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The saved search id</param>
        /// <returns>ApiResponse of SavedSearch</returns>
        ApiResponse<SavedSearch> ReadSavedSearchWithHttpInfo(Guid id);
        /// <summary>
        /// Read Saved Searches
        /// </summary>
        /// <remarks>
        /// Query for saved searches.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readSavedSearchesRequest"> (optional)</param>
        /// <returns>List&lt;SavedSearch&gt;</returns>
        List<SavedSearch> ReadSavedSearches(ReadSavedSearchesRequest readSavedSearchesRequest = default(ReadSavedSearchesRequest));

        /// <summary>
        /// Read Saved Searches
        /// </summary>
        /// <remarks>
        /// Query for saved searches.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readSavedSearchesRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;SavedSearch&gt;</returns>
        ApiResponse<List<SavedSearch>> ReadSavedSearchesWithHttpInfo(ReadSavedSearchesRequest readSavedSearchesRequest = default(ReadSavedSearchesRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISavedSearchesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Saved Search
        /// </summary>
        /// <remarks>
        /// Gracefully creates a new saved search from the provided schema.\\n\\nIf a saved search with the same name already exists, the saved search fields are\\nreplaced.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savedSearchCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SavedSearch</returns>
        System.Threading.Tasks.Task<SavedSearch> CreateSavedSearchAsync(SavedSearchCreate savedSearchCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Saved Search
        /// </summary>
        /// <remarks>
        /// Gracefully creates a new saved search from the provided schema.\\n\\nIf a saved search with the same name already exists, the saved search fields are\\nreplaced.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savedSearchCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SavedSearch)</returns>
        System.Threading.Tasks.Task<ApiResponse<SavedSearch>> CreateSavedSearchWithHttpInfoAsync(SavedSearchCreate savedSearchCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Saved Search
        /// </summary>
        /// <remarks>
        /// Delete a saved search by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The saved search id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSavedSearchAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Saved Search
        /// </summary>
        /// <remarks>
        /// Delete a saved search by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The saved search id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSavedSearchWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Saved Search
        /// </summary>
        /// <remarks>
        /// Get a saved search by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The saved search id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SavedSearch</returns>
        System.Threading.Tasks.Task<SavedSearch> ReadSavedSearchAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Saved Search
        /// </summary>
        /// <remarks>
        /// Get a saved search by id.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The saved search id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SavedSearch)</returns>
        System.Threading.Tasks.Task<ApiResponse<SavedSearch>> ReadSavedSearchWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read Saved Searches
        /// </summary>
        /// <remarks>
        /// Query for saved searches.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readSavedSearchesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SavedSearch&gt;</returns>
        System.Threading.Tasks.Task<List<SavedSearch>> ReadSavedSearchesAsync(ReadSavedSearchesRequest readSavedSearchesRequest = default(ReadSavedSearchesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read Saved Searches
        /// </summary>
        /// <remarks>
        /// Query for saved searches.
        /// </remarks>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readSavedSearchesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SavedSearch&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SavedSearch>>> ReadSavedSearchesWithHttpInfoAsync(ReadSavedSearchesRequest readSavedSearchesRequest = default(ReadSavedSearchesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISavedSearchesApi : ISavedSearchesApiSync, ISavedSearchesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SavedSearchesApi : IDisposable, ISavedSearchesApi
    {
        private PrefectClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SavedSearchesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public SavedSearchesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SavedSearchesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SavedSearchesApi(string basePath)
        {
            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SavedSearchesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SavedSearchesApi(PrefectClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SavedSearchesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SavedSearchesApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SavedSearchesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SavedSearchesApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                new PrefectClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SavedSearchesApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SavedSearchesApi(HttpClient client, PrefectClient.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PrefectClient.Client.Configuration.MergeConfigurations(
                PrefectClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PrefectClient.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SavedSearchesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public SavedSearchesApi(PrefectClient.Client.ISynchronousClient client, PrefectClient.Client.IAsynchronousClient asyncClient, PrefectClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PrefectClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public PrefectClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PrefectClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PrefectClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PrefectClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PrefectClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Saved Search Gracefully creates a new saved search from the provided schema.\\n\\nIf a saved search with the same name already exists, the saved search fields are\\nreplaced.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savedSearchCreate"></param>
        /// <returns>SavedSearch</returns>
        public SavedSearch CreateSavedSearch(SavedSearchCreate savedSearchCreate)
        {
            PrefectClient.Client.ApiResponse<SavedSearch> localVarResponse = CreateSavedSearchWithHttpInfo(savedSearchCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Saved Search Gracefully creates a new saved search from the provided schema.\\n\\nIf a saved search with the same name already exists, the saved search fields are\\nreplaced.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savedSearchCreate"></param>
        /// <returns>ApiResponse of SavedSearch</returns>
        public PrefectClient.Client.ApiResponse<SavedSearch> CreateSavedSearchWithHttpInfo(SavedSearchCreate savedSearchCreate)
        {
            // verify the required parameter 'savedSearchCreate' is set
            if (savedSearchCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'savedSearchCreate' when calling SavedSearchesApi->CreateSavedSearch");

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = savedSearchCreate;


            // make the HTTP request
            var localVarResponse = this.Client.Put<SavedSearch>("/saved_searches/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSavedSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Saved Search Gracefully creates a new saved search from the provided schema.\\n\\nIf a saved search with the same name already exists, the saved search fields are\\nreplaced.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savedSearchCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SavedSearch</returns>
        public async System.Threading.Tasks.Task<SavedSearch> CreateSavedSearchAsync(SavedSearchCreate savedSearchCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<SavedSearch> localVarResponse = await CreateSavedSearchWithHttpInfoAsync(savedSearchCreate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Saved Search Gracefully creates a new saved search from the provided schema.\\n\\nIf a saved search with the same name already exists, the saved search fields are\\nreplaced.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savedSearchCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SavedSearch)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<SavedSearch>> CreateSavedSearchWithHttpInfoAsync(SavedSearchCreate savedSearchCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'savedSearchCreate' is set
            if (savedSearchCreate == null)
                throw new PrefectClient.Client.ApiException(400, "Missing required parameter 'savedSearchCreate' when calling SavedSearchesApi->CreateSavedSearch");


            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = savedSearchCreate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SavedSearch>("/saved_searches/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSavedSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Saved Search Delete a saved search by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The saved search id</param>
        /// <returns></returns>
        public void DeleteSavedSearch(Guid id)
        {
            DeleteSavedSearchWithHttpInfo(id);
        }

        /// <summary>
        /// Delete Saved Search Delete a saved search by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The saved search id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PrefectClient.Client.ApiResponse<Object> DeleteSavedSearchWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/saved_searches/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSavedSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Saved Search Delete a saved search by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The saved search id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSavedSearchAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSavedSearchWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Saved Search Delete a saved search by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The saved search id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<Object>> DeleteSavedSearchWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/saved_searches/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSavedSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Saved Search Get a saved search by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The saved search id</param>
        /// <returns>SavedSearch</returns>
        public SavedSearch ReadSavedSearch(Guid id)
        {
            PrefectClient.Client.ApiResponse<SavedSearch> localVarResponse = ReadSavedSearchWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Saved Search Get a saved search by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The saved search id</param>
        /// <returns>ApiResponse of SavedSearch</returns>
        public PrefectClient.Client.ApiResponse<SavedSearch> ReadSavedSearchWithHttpInfo(Guid id)
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SavedSearch>("/saved_searches/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadSavedSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Saved Search Get a saved search by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The saved search id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SavedSearch</returns>
        public async System.Threading.Tasks.Task<SavedSearch> ReadSavedSearchAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<SavedSearch> localVarResponse = await ReadSavedSearchWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Saved Search Get a saved search by id.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The saved search id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SavedSearch)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<SavedSearch>> ReadSavedSearchWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PrefectClient.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SavedSearch>("/saved_searches/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadSavedSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Saved Searches Query for saved searches.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readSavedSearchesRequest"> (optional)</param>
        /// <returns>List&lt;SavedSearch&gt;</returns>
        public List<SavedSearch> ReadSavedSearches(ReadSavedSearchesRequest readSavedSearchesRequest = default(ReadSavedSearchesRequest))
        {
            PrefectClient.Client.ApiResponse<List<SavedSearch>> localVarResponse = ReadSavedSearchesWithHttpInfo(readSavedSearchesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Saved Searches Query for saved searches.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readSavedSearchesRequest"> (optional)</param>
        /// <returns>ApiResponse of List&lt;SavedSearch&gt;</returns>
        public PrefectClient.Client.ApiResponse<List<SavedSearch>> ReadSavedSearchesWithHttpInfo(ReadSavedSearchesRequest readSavedSearchesRequest = default(ReadSavedSearchesRequest))
        {
            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readSavedSearchesRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<SavedSearch>>("/saved_searches/filter", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadSavedSearches", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read Saved Searches Query for saved searches.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readSavedSearchesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SavedSearch&gt;</returns>
        public async System.Threading.Tasks.Task<List<SavedSearch>> ReadSavedSearchesAsync(ReadSavedSearchesRequest readSavedSearchesRequest = default(ReadSavedSearchesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PrefectClient.Client.ApiResponse<List<SavedSearch>> localVarResponse = await ReadSavedSearchesWithHttpInfoAsync(readSavedSearchesRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read Saved Searches Query for saved searches.
        /// </summary>
        /// <exception cref="PrefectClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readSavedSearchesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SavedSearch&gt;)</returns>
        public async System.Threading.Tasks.Task<PrefectClient.Client.ApiResponse<List<SavedSearch>>> ReadSavedSearchesWithHttpInfoAsync(ReadSavedSearchesRequest readSavedSearchesRequest = default(ReadSavedSearchesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PrefectClient.Client.RequestOptions localVarRequestOptions = new PrefectClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = PrefectClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PrefectClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = readSavedSearchesRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<SavedSearch>>("/saved_searches/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReadSavedSearches", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
