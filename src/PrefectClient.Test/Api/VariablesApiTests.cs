/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using PrefectClient.Client;
using PrefectClient.Api;
// uncomment below to import models
//using PrefectClient.Model;

namespace PrefectClient.Test.Api
{
    /// <summary>
    ///  Class for testing VariablesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class VariablesApiTests : IDisposable
    {
        private VariablesApi instance;

        public VariablesApiTests()
        {
            instance = new VariablesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of VariablesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' VariablesApi
            //Assert.IsType<VariablesApi>(instance);
        }

        /// <summary>
        /// Test CountVariables
        /// </summary>
        [Fact]
        public void CountVariablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CountVariablesRequest countVariablesRequest = null;
            //var response = instance.CountVariables(countVariablesRequest);
            //Assert.IsType<int>(response);
        }

        /// <summary>
        /// Test CreateVariable
        /// </summary>
        [Fact]
        public void CreateVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //VariableCreate variableCreate = null;
            //var response = instance.CreateVariable(variableCreate);
            //Assert.IsType<Variable>(response);
        }

        /// <summary>
        /// Test DeleteVariable
        /// </summary>
        [Fact]
        public void DeleteVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.DeleteVariable(id);
        }

        /// <summary>
        /// Test DeleteVariableByName
        /// </summary>
        [Fact]
        public void DeleteVariableByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeleteVariableByName(name);
        }

        /// <summary>
        /// Test ReadVariable
        /// </summary>
        [Fact]
        public void ReadVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.ReadVariable(id);
            //Assert.IsType<Variable>(response);
        }

        /// <summary>
        /// Test ReadVariableByName
        /// </summary>
        [Fact]
        public void ReadVariableByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.ReadVariableByName(name);
            //Assert.IsType<Variable>(response);
        }

        /// <summary>
        /// Test ReadVariables
        /// </summary>
        [Fact]
        public void ReadVariablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReadVariablesRequest readVariablesRequest = null;
            //var response = instance.ReadVariables(readVariablesRequest);
            //Assert.IsType<List<Variable>>(response);
        }

        /// <summary>
        /// Test UpdateVariable
        /// </summary>
        [Fact]
        public void UpdateVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //VariableUpdate variableUpdate = null;
            //instance.UpdateVariable(id, variableUpdate);
        }

        /// <summary>
        /// Test UpdateVariableByName
        /// </summary>
        [Fact]
        public void UpdateVariableByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //VariableUpdate variableUpdate = null;
            //instance.UpdateVariableByName(name, variableUpdate);
        }
    }
}
