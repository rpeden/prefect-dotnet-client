/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using PrefectClient.Client;
using PrefectClient.Api;
// uncomment below to import models
//using PrefectClient.Model;

namespace PrefectClient.Test.Api
{
    /// <summary>
    ///  Class for testing BlockTypesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BlockTypesApiTests : IDisposable
    {
        private BlockTypesApi instance;

        public BlockTypesApiTests()
        {
            instance = new BlockTypesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BlockTypesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' BlockTypesApi
            //Assert.IsType<BlockTypesApi>(instance);
        }

        /// <summary>
        /// Test CreateBlockType
        /// </summary>
        [Fact]
        public void CreateBlockTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BlockTypeCreate blockTypeCreate = null;
            //var response = instance.CreateBlockType(blockTypeCreate);
            //Assert.IsType<BlockType>(response);
        }

        /// <summary>
        /// Test DeleteBlockType
        /// </summary>
        [Fact]
        public void DeleteBlockTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //instance.DeleteBlockType(id);
        }

        /// <summary>
        /// Test InstallSystemBlockTypes
        /// </summary>
        [Fact]
        public void InstallSystemBlockTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.InstallSystemBlockTypes();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ReadBlockDocumentByNameForBlockType
        /// </summary>
        [Fact]
        public void ReadBlockDocumentByNameForBlockTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string slug = null;
            //string blockDocumentName = null;
            //bool? includeSecrets = null;
            //var response = instance.ReadBlockDocumentByNameForBlockType(slug, blockDocumentName, includeSecrets);
            //Assert.IsType<BlockDocument>(response);
        }

        /// <summary>
        /// Test ReadBlockDocumentByNameForBlockType_0
        /// </summary>
        [Fact]
        public void ReadBlockDocumentByNameForBlockType_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string slug = null;
            //string blockDocumentName = null;
            //bool? includeSecrets = null;
            //var response = instance.ReadBlockDocumentByNameForBlockType_0(slug, blockDocumentName, includeSecrets);
            //Assert.IsType<BlockDocument>(response);
        }

        /// <summary>
        /// Test ReadBlockDocumentsForBlockType
        /// </summary>
        [Fact]
        public void ReadBlockDocumentsForBlockTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string slug = null;
            //bool? includeSecrets = null;
            //var response = instance.ReadBlockDocumentsForBlockType(slug, includeSecrets);
            //Assert.IsType<List<BlockDocument>>(response);
        }

        /// <summary>
        /// Test ReadBlockDocumentsForBlockType_0
        /// </summary>
        [Fact]
        public void ReadBlockDocumentsForBlockType_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string slug = null;
            //bool? includeSecrets = null;
            //var response = instance.ReadBlockDocumentsForBlockType_0(slug, includeSecrets);
            //Assert.IsType<List<BlockDocument>>(response);
        }

        /// <summary>
        /// Test ReadBlockTypeById
        /// </summary>
        [Fact]
        public void ReadBlockTypeByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.ReadBlockTypeById(id);
            //Assert.IsType<BlockType>(response);
        }

        /// <summary>
        /// Test ReadBlockTypeBySlug
        /// </summary>
        [Fact]
        public void ReadBlockTypeBySlugTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string slug = null;
            //var response = instance.ReadBlockTypeBySlug(slug);
            //Assert.IsType<BlockType>(response);
        }

        /// <summary>
        /// Test ReadBlockTypes
        /// </summary>
        [Fact]
        public void ReadBlockTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReadBlockTypesRequest readBlockTypesRequest = null;
            //var response = instance.ReadBlockTypes(readBlockTypesRequest);
            //Assert.IsType<List<BlockType>>(response);
        }

        /// <summary>
        /// Test UpdateBlockType
        /// </summary>
        [Fact]
        public void UpdateBlockTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //BlockTypeUpdate blockTypeUpdate = null;
            //instance.UpdateBlockType(id, blockTypeUpdate);
        }
    }
}
