/*
 * Prefect API Client for .NET
 *
 * For more information, visit: https://github.com/rpeden/prefect-client-dotnet
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using PrefectClient.Client;
using PrefectClient.Api;
// uncomment below to import models
//using PrefectClient.Model;

namespace PrefectClient.Test.Api
{
    /// <summary>
    ///  Class for testing WorkPoolsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WorkPoolsApiTests : IDisposable
    {
        private WorkPoolsApi instance;

        public WorkPoolsApiTests()
        {
            instance = new WorkPoolsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WorkPoolsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' WorkPoolsApi
            //Assert.IsType<WorkPoolsApi>(instance);
        }

        /// <summary>
        /// Test CreateWorkPool
        /// </summary>
        [Fact]
        public void CreateWorkPoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WorkPoolCreate workPoolCreate = null;
            //var response = instance.CreateWorkPool(workPoolCreate);
            //Assert.IsType<WorkPool>(response);
        }

        /// <summary>
        /// Test CreateWorkPoolWorkQueue
        /// </summary>
        [Fact]
        public void CreateWorkPoolWorkQueueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workPoolName = null;
            //WorkQueueCreate workQueueCreate = null;
            //var response = instance.CreateWorkPoolWorkQueue(workPoolName, workQueueCreate);
            //Assert.IsType<WorkQueueResponse>(response);
        }

        /// <summary>
        /// Test DeleteWorkPool
        /// </summary>
        [Fact]
        public void DeleteWorkPoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeleteWorkPool(name);
        }

        /// <summary>
        /// Test DeleteWorkPoolWorkQueue
        /// </summary>
        [Fact]
        public void DeleteWorkPoolWorkQueueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workPoolName = null;
            //string name = null;
            //instance.DeleteWorkPoolWorkQueue(workPoolName, name);
        }

        /// <summary>
        /// Test GetScheduledFlowRuns
        /// </summary>
        [Fact]
        public void GetScheduledFlowRunsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //GetScheduledFlowRunsRequest getScheduledFlowRunsRequest = null;
            //var response = instance.GetScheduledFlowRuns(name, getScheduledFlowRunsRequest);
            //Assert.IsType<List<WorkerFlowRunResponse>>(response);
        }

        /// <summary>
        /// Test ReadWorkPool
        /// </summary>
        [Fact]
        public void ReadWorkPoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.ReadWorkPool(name);
            //Assert.IsType<WorkPool>(response);
        }

        /// <summary>
        /// Test ReadWorkPoolWorkQueue
        /// </summary>
        [Fact]
        public void ReadWorkPoolWorkQueueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workPoolName = null;
            //string name = null;
            //var response = instance.ReadWorkPoolWorkQueue(workPoolName, name);
            //Assert.IsType<WorkQueueResponse>(response);
        }

        /// <summary>
        /// Test ReadWorkPoolWorkQueues
        /// </summary>
        [Fact]
        public void ReadWorkPoolWorkQueuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workPoolName = null;
            //ReadWorkQueuesRequest readWorkQueuesRequest = null;
            //var response = instance.ReadWorkPoolWorkQueues(workPoolName, readWorkQueuesRequest);
            //Assert.IsType<List<WorkQueueResponse>>(response);
        }

        /// <summary>
        /// Test ReadWorkPools
        /// </summary>
        [Fact]
        public void ReadWorkPoolsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReadWorkPoolsRequest readWorkPoolsRequest = null;
            //var response = instance.ReadWorkPools(readWorkPoolsRequest);
            //Assert.IsType<List<WorkPool>>(response);
        }

        /// <summary>
        /// Test ReadWorkers
        /// </summary>
        [Fact]
        public void ReadWorkersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workPoolName = null;
            //ReadWorkersRequest readWorkersRequest = null;
            //var response = instance.ReadWorkers(workPoolName, readWorkersRequest);
            //Assert.IsType<List<Worker>>(response);
        }

        /// <summary>
        /// Test UpdateWorkPool
        /// </summary>
        [Fact]
        public void UpdateWorkPoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //WorkPoolUpdate workPoolUpdate = null;
            //instance.UpdateWorkPool(name, workPoolUpdate);
        }

        /// <summary>
        /// Test UpdateWorkPoolWorkQueue
        /// </summary>
        [Fact]
        public void UpdateWorkPoolWorkQueueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workPoolName = null;
            //string name = null;
            //WorkQueueUpdate workQueueUpdate = null;
            //instance.UpdateWorkPoolWorkQueue(workPoolName, name, workQueueUpdate);
        }

        /// <summary>
        /// Test WorkerHeartbeat
        /// </summary>
        [Fact]
        public void WorkerHeartbeatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string workPoolName = null;
            //WorkerHeartbeatRequest workerHeartbeatRequest = null;
            //instance.WorkerHeartbeat(workPoolName, workerHeartbeatRequest);
        }
    }
}
